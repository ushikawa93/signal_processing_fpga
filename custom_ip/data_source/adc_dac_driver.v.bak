module ADC_DAC_test(

	input 			 CLK_65,
	input				 CLK_125,
	input				 reset_n,
	input				 enable,
	 
   output 		    ADC_CLK_A,
	input    [13:0] ADC_DA,
	output			 ADC_OEB_A,
	input				 ADC_OTR_A,
	
	output			 ADC_CLK_B,
	input	 	[13:0] ADC_DB,
	output			 ADC_OEB_B,
	input				 ADC_OTR_B,
		
	output			 DAC_CLK_A,
	output   [13:0] DAC_DA,
	output			 DAC_WRT_A,
	
	output 			 DAC_CLK_B,
	output   [13:0] DAC_DB,
	output			 DAC_WRT_B,
	
	output			 DAC_MODE,
	output			 OSC_SMA_ADC4,
	output			 POWER_ON,
	output			 SMA_DAC4,
	
	output	[13:0] data_canal_a,
	output	[13:0] data_canal_b,
	output			 data_valid
	
);


//=======================================================
//  ADC y DAC REG/WIRE declarations
//=======================================================


assign  DAC_WRT_B = ~CLK_65;       //Input write signal for PORT B
assign  DAC_WRT_A = ~CLK_65;       //Input write signal for PORT A

assign  DAC_MODE = 1; 		        //Mode Select. 1 = dual port, 0 = interleaved.

assign  DAC_CLK_B = ~CLK_65; 	    //PLL Clock to DAC_B
assign  DAC_CLK_A = ~CLK_65; 	    //PLL Clock to DAC_A
 
assign  ADC_CLK_B = CLK_65;  	    //PLL Clock to ADC_B
assign  ADC_CLK_A = CLK_65;  	    //PLL Clock to ADC_A

assign  ADC_OEB_A = 0; 		  	    //ADC_OEA	Output enables activos en bajo
assign  ADC_OEB_B = 0; 			    //ADC_OEB

assign  POWER_ON  = 1;            //Disable OSC_SMA

assign  DAC_DA = (enable)? dato_dac : 0 ; //B
assign  DAC_DB = (enable)? dato_dac : 0 ; //A

reg	signed	 [13:0]		r_ADC_DA;
reg	signed	 [13:0]		r_ADC_DB;
reg								enable_reg;

always @ (posedge CLK_65) r_ADC_DA <= ADC_DA;
always @ (posedge CLK_65) r_ADC_DB <= ADC_DB;
always @ (posedge CLK_65) enable_reg <= enable;


//////////////// Salidas //////////////////
assign data_canal_a =  r_ADC_DA;
assign data_canal_b =  r_ADC_DB;
assign data_valid = enable_reg;


endmodule

