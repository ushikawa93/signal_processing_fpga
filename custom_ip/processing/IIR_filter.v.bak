
IIR_filter(

// Entradas de control
	input clock,
	input reset,
	input enable,
	
	
	// Entrada avalon streaming 
	input data_valid,
	input signed [63:0] data,	
		
	// Salida avalon streaming
	output signed [63:0] data_out,
	output reg data_out_valid,

	// Salidas auxiliares
	output ready,
	output fifo_lleno

);


parameter A1 = 1048576;			// 2**20
parameter A2 = -1048247;
parameter B1 = 165;
parameter B2 = 165;

wire [63:0] x_n;	assign x_n = data;
reg [63:0] x_n_1;
reg [63:0] y_n;
reg [63:0] y_n_1;

assign ready = 1; // No tiene buffers que limpiar asique esta siempre listo...
reg [31:0] counter;



always @ (posedge clock or negedge reset)
begin
	
	if(!reset)
	begin	
		counter <= 0;
		data_out_valid <= 0;
		
		x_n_1 <= 0;
		y_n <= 0;
		y_n_1 <= 0;
	
	end

	else if(enable)
	begin
		if(data_valid)
		begin
			
			y_n_1 <= y_n;
			x_n_1 <= x_n;
			
			y_n <= (B1 * x_n + B2 * x_n_1 - A2 * y_n_1 ) >> 20 ;   // Dividir por A1 es igual a un right shift de 20 		
			
			data_out_valid <= 1;
			
			counter <= (counter == 8192) ? counter : counter+1;
		end
		else
			data_out_valid <= 0;
	end

end

assign data_out = y_n; 
assign fifo_lleno = (counter == 8192) ;


endmodule
