
module lockin(

	input clock,
	input reset,
	input CE,
	input [15:0] data,
	
	output reg [31:0] data_out_fase,
	output reg data_valid_fase,
	
	output reg [31:0] data_out_cuad,
	output reg data_valid_cuad,
	
);

parameter M=31; 

reg [1:0] state; parameter init=0, esperar=1, multiplicar=2, act_salida=3; initial state=init;

reg [63:0] acum_fase;
reg [63:0] acum_cuad;

reg [31:0] datos_fase [0:M];
reg [31:0] datos_cuad [0:M];

reg [16:0] data_aux;

integer  ref_sen   [0:31];	initial	$readmemh("LU_tables/x32_16b_off.mem",ref_sen);
integer 	ref_cos    [0:31];	initial	$readmemh("LU_tables/y32_16b_off.mem",ref_cos);
 
integer i,index;
	
always @ (posedge clock)
begin

	if(reset)
		state <= init;

	case state
		init:
		begin
			acum_fase<=0;
			acum_cuad<=0;
			index <=0;
			for(i=0;i<(M+1);i=i+1)
			begin
				datos_fase[i]<=0;
				datos_cuadratura[i]<=0;
			end
			state <= esperar;
		end
	
		esperar:
		begin
			data_valid_fase <= 0;
			data_valid_cuad <= 0;
			
			if(CE) 
			begin
				data_aux <= data;
				acum_fase <= acum_fase - datos_fase[index];
				acum_cuad <= acum_cuad - datos_cuad[index];
				state <= multiplicar;
			end		
			
		end		
		
		multiplicar:
		begin
			datos_fase[index] <= data_aux * ref_sen;
			datos_cuad[index] <= data_aux * ref_cos;
			acum_fase <= acum_fase + data_aux * ref_sen;
			acum_cuad <= acum_cuad + data_aux * ref_cos;		
			state <= act_salida;
		end		
		
		act_salida:
		begin 
			data_out_fase <= acum_fase >>> 5;
			data_valid_fase <= 1;
			
			data_out_cuad <= acum_cuad >>> 5;
			data_valid_cuad <= 1;
			
			index <= (index== M)? 0: index+1;
			
			state <= esperar;
		
		end
		


	endcase
	
	
	
end

	
	
	
	