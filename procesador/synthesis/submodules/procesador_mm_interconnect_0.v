// procesador_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1 590

`timescale 1 ps / 1 ps
module procesador_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        clk_0_clk_clk,                                                       //                                                     clk_0_clk.clk
		input  wire        clock_bridge_0_out_clk_clk,                                          //                                        clock_bridge_0_out_clk.clk
		input  wire        fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset,                //                fifo0_64_bit_up_reset_in_reset_bridge_in_reset.reset
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        jtag_uart_0_reset_reset_bridge_in_reset_reset,                       //                       jtag_uart_0_reset_reset_bridge_in_reset.reset
		input  wire        nios2_gen2_0_reset_reset_bridge_in_reset_reset,                      //                      nios2_gen2_0_reset_reset_bridge_in_reset.reset
		input  wire        reset_reset_reset_bridge_in_reset_reset,                             //                             reset_reset_reset_bridge_in_reset.reset
		input  wire [18:0] nios2_gen2_0_data_master_address,                                    //                                      nios2_gen2_0_data_master.address
		output wire        nios2_gen2_0_data_master_waitrequest,                                //                                                              .waitrequest
		input  wire [3:0]  nios2_gen2_0_data_master_byteenable,                                 //                                                              .byteenable
		input  wire        nios2_gen2_0_data_master_read,                                       //                                                              .read
		output wire [31:0] nios2_gen2_0_data_master_readdata,                                   //                                                              .readdata
		input  wire        nios2_gen2_0_data_master_write,                                      //                                                              .write
		input  wire [31:0] nios2_gen2_0_data_master_writedata,                                  //                                                              .writedata
		input  wire        nios2_gen2_0_data_master_debugaccess,                                //                                                              .debugaccess
		input  wire [18:0] nios2_gen2_0_instruction_master_address,                             //                               nios2_gen2_0_instruction_master.address
		output wire        nios2_gen2_0_instruction_master_waitrequest,                         //                                                              .waitrequest
		input  wire        nios2_gen2_0_instruction_master_read,                                //                                                              .read
		output wire [31:0] nios2_gen2_0_instruction_master_readdata,                            //                                                              .readdata
		output wire [1:0]  divisor_clock_s1_address,                                            //                                              divisor_clock_s1.address
		output wire        divisor_clock_s1_write,                                              //                                                              .write
		input  wire [31:0] divisor_clock_s1_readdata,                                           //                                                              .readdata
		output wire [31:0] divisor_clock_s1_writedata,                                          //                                                              .writedata
		output wire        divisor_clock_s1_chipselect,                                         //                                                              .chipselect
		output wire [1:0]  enable_s1_address,                                                   //                                                     enable_s1.address
		output wire        enable_s1_write,                                                     //                                                              .write
		input  wire [31:0] enable_s1_readdata,                                                  //                                                              .readdata
		output wire [31:0] enable_s1_writedata,                                                 //                                                              .writedata
		output wire        enable_s1_chipselect,                                                //                                                              .chipselect
		output wire [0:0]  fifo0_32_bit_out_address,                                            //                                              fifo0_32_bit_out.address
		output wire        fifo0_32_bit_out_read,                                               //                                                              .read
		input  wire [31:0] fifo0_32_bit_out_readdata,                                           //                                                              .readdata
		input  wire        fifo0_32_bit_out_waitrequest,                                        //                                                              .waitrequest
		output wire [0:0]  fifo0_64_bit_down_out_address,                                       //                                         fifo0_64_bit_down_out.address
		output wire        fifo0_64_bit_down_out_read,                                          //                                                              .read
		input  wire [31:0] fifo0_64_bit_down_out_readdata,                                      //                                                              .readdata
		input  wire        fifo0_64_bit_down_out_waitrequest,                                   //                                                              .waitrequest
		output wire [0:0]  fifo0_64_bit_up_out_address,                                         //                                           fifo0_64_bit_up_out.address
		output wire        fifo0_64_bit_up_out_read,                                            //                                                              .read
		input  wire [31:0] fifo0_64_bit_up_out_readdata,                                        //                                                              .readdata
		input  wire        fifo0_64_bit_up_out_waitrequest,                                     //                                                              .waitrequest
		output wire [0:0]  fifo1_32_bit_out_address,                                            //                                              fifo1_32_bit_out.address
		output wire        fifo1_32_bit_out_read,                                               //                                                              .read
		input  wire [31:0] fifo1_32_bit_out_readdata,                                           //                                                              .readdata
		input  wire        fifo1_32_bit_out_waitrequest,                                        //                                                              .waitrequest
		output wire [0:0]  fifo1_64_bit_down_out_address,                                       //                                         fifo1_64_bit_down_out.address
		output wire        fifo1_64_bit_down_out_read,                                          //                                                              .read
		input  wire [31:0] fifo1_64_bit_down_out_readdata,                                      //                                                              .readdata
		input  wire        fifo1_64_bit_down_out_waitrequest,                                   //                                                              .waitrequest
		output wire [0:0]  fifo1_64_bit_up_out_address,                                         //                                           fifo1_64_bit_up_out.address
		output wire        fifo1_64_bit_up_out_read,                                            //                                                              .read
		input  wire [31:0] fifo1_64_bit_up_out_readdata,                                        //                                                              .readdata
		input  wire        fifo1_64_bit_up_out_waitrequest,                                     //                                                              .waitrequest
		output wire [1:0]  finalizacion_s1_address,                                             //                                               finalizacion_s1.address
		input  wire [31:0] finalizacion_s1_readdata,                                            //                                                              .readdata
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,                               //                                 jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                                 //                                                              .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                                  //                                                              .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,                              //                                                              .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,                             //                                                              .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,                           //                                                              .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,                            //                                                              .chipselect
		output wire [8:0]  nios2_gen2_0_debug_mem_slave_address,                                //                                  nios2_gen2_0_debug_mem_slave.address
		output wire        nios2_gen2_0_debug_mem_slave_write,                                  //                                                              .write
		output wire        nios2_gen2_0_debug_mem_slave_read,                                   //                                                              .read
		input  wire [31:0] nios2_gen2_0_debug_mem_slave_readdata,                               //                                                              .readdata
		output wire [31:0] nios2_gen2_0_debug_mem_slave_writedata,                              //                                                              .writedata
		output wire [3:0]  nios2_gen2_0_debug_mem_slave_byteenable,                             //                                                              .byteenable
		input  wire        nios2_gen2_0_debug_mem_slave_waitrequest,                            //                                                              .waitrequest
		output wire        nios2_gen2_0_debug_mem_slave_debugaccess,                            //                                                              .debugaccess
		output wire [8:0]  parameters_s0_address,                                               //                                                 parameters_s0.address
		output wire        parameters_s0_write,                                                 //                                                              .write
		output wire        parameters_s0_read,                                                  //                                                              .read
		input  wire [31:0] parameters_s0_readdata,                                              //                                                              .readdata
		output wire [31:0] parameters_s0_writedata,                                             //                                                              .writedata
		output wire [3:0]  parameters_s0_byteenable,                                            //                                                              .byteenable
		output wire [8:0]  parameters_1_s0_address,                                             //                                               parameters_1_s0.address
		output wire        parameters_1_s0_write,                                               //                                                              .write
		output wire        parameters_1_s0_read,                                                //                                                              .read
		input  wire [31:0] parameters_1_s0_readdata,                                            //                                                              .readdata
		output wire [31:0] parameters_1_s0_writedata,                                           //                                                              .writedata
		output wire [3:0]  parameters_1_s0_byteenable,                                          //                                                              .byteenable
		output wire [8:0]  parameters_2_s0_address,                                             //                                               parameters_2_s0.address
		output wire        parameters_2_s0_write,                                               //                                                              .write
		output wire        parameters_2_s0_read,                                                //                                                              .read
		input  wire [31:0] parameters_2_s0_readdata,                                            //                                                              .readdata
		output wire [31:0] parameters_2_s0_writedata,                                           //                                                              .writedata
		output wire [3:0]  parameters_2_s0_byteenable,                                          //                                                              .byteenable
		output wire [8:0]  parameters_3_s0_address,                                             //                                               parameters_3_s0.address
		output wire        parameters_3_s0_write,                                               //                                                              .write
		output wire        parameters_3_s0_read,                                                //                                                              .read
		input  wire [31:0] parameters_3_s0_readdata,                                            //                                                              .readdata
		output wire [31:0] parameters_3_s0_writedata,                                           //                                                              .writedata
		output wire [3:0]  parameters_3_s0_byteenable,                                          //                                                              .byteenable
		output wire [5:0]  pll_reconfigurar_mgmt_avalon_slave_address,                          //                            pll_reconfigurar_mgmt_avalon_slave.address
		output wire        pll_reconfigurar_mgmt_avalon_slave_write,                            //                                                              .write
		output wire        pll_reconfigurar_mgmt_avalon_slave_read,                             //                                                              .read
		input  wire [31:0] pll_reconfigurar_mgmt_avalon_slave_readdata,                         //                                                              .readdata
		output wire [31:0] pll_reconfigurar_mgmt_avalon_slave_writedata,                        //                                                              .writedata
		input  wire        pll_reconfigurar_mgmt_avalon_slave_waitrequest,                      //                                                              .waitrequest
		output wire [15:0] program_memory_s1_address,                                           //                                             program_memory_s1.address
		output wire        program_memory_s1_write,                                             //                                                              .write
		input  wire [31:0] program_memory_s1_readdata,                                          //                                                              .readdata
		output wire [31:0] program_memory_s1_writedata,                                         //                                                              .writedata
		output wire [3:0]  program_memory_s1_byteenable,                                        //                                                              .byteenable
		output wire        program_memory_s1_chipselect,                                        //                                                              .chipselect
		output wire        program_memory_s1_clken,                                             //                                                              .clken
		output wire [1:0]  reset_s1_address,                                                    //                                                      reset_s1.address
		output wire        reset_s1_write,                                                      //                                                              .write
		input  wire [31:0] reset_s1_readdata,                                                   //                                                              .readdata
		output wire [31:0] reset_s1_writedata,                                                  //                                                              .writedata
		output wire        reset_s1_chipselect,                                                 //                                                              .chipselect
		output wire [1:0]  result0_32_bit_s1_address,                                           //                                             result0_32_bit_s1.address
		input  wire [31:0] result0_32_bit_s1_readdata,                                          //                                                              .readdata
		output wire [1:0]  result0_64_bit_down_s1_address,                                      //                                        result0_64_bit_down_s1.address
		input  wire [31:0] result0_64_bit_down_s1_readdata,                                     //                                                              .readdata
		output wire [1:0]  result0_64_bit_up_s1_address,                                        //                                          result0_64_bit_up_s1.address
		input  wire [31:0] result0_64_bit_up_s1_readdata,                                       //                                                              .readdata
		output wire [1:0]  result1_32_bit_s1_address,                                           //                                             result1_32_bit_s1.address
		input  wire [31:0] result1_32_bit_s1_readdata,                                          //                                                              .readdata
		output wire [1:0]  result1_64_bit_down_s1_address,                                      //                                        result1_64_bit_down_s1.address
		input  wire [31:0] result1_64_bit_down_s1_readdata,                                     //                                                              .readdata
		output wire [1:0]  result1_64_bit_up_s1_address,                                        //                                          result1_64_bit_up_s1.address
		input  wire [31:0] result1_64_bit_up_s1_readdata                                        //                                                              .readdata
	);

	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	wire   [20:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	wire    [3:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	wire  [119:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_gen2_0_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                  // nios2_gen2_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [23:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	wire   [20:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                              // rsp_mux_003:src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	wire  [119:0] rsp_mux_003_src_data;                                                               // rsp_mux_003:src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                              // nios2_gen2_0_instruction_master_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [23:0] rsp_mux_003_src_channel;                                                            // rsp_mux_003:src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                      // rsp_mux_003:src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                        // rsp_mux_003:src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [20:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [120:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [120:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [119:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                  // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [23:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_0_debug_mem_slave_translator:uav_readdata -> nios2_gen2_0_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_0_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_0_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_0_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_0_debug_mem_slave_translator:uav_debugaccess
	wire   [20:0] nios2_gen2_0_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_0_debug_mem_slave_agent:m0_address -> nios2_gen2_0_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_0_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_0_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_read -> nios2_gen2_0_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_0_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_lock -> nios2_gen2_0_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_0_debug_mem_slave_agent:m0_writedata -> nios2_gen2_0_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_0_debug_mem_slave_agent:m0_write -> nios2_gen2_0_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_0_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_0_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_0_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [120:0] nios2_gen2_0_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_0_debug_mem_slave_agent:rf_source_data -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_valid
	wire  [120:0] nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_0_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_valid -> nios2_gen2_0_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_data -> nios2_gen2_0_debug_mem_slave_agent_rdata_fifo:in_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // nios2_gen2_0_debug_mem_slave_agent_rdata_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> nios2_gen2_0_debug_mem_slave_agent:cp_valid
	wire  [119:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> nios2_gen2_0_debug_mem_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                              // nios2_gen2_0_debug_mem_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [23:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> nios2_gen2_0_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] pll_reconfigurar_mgmt_avalon_slave_agent_m0_readdata;                               // pll_reconfigurar_mgmt_avalon_slave_translator:uav_readdata -> pll_reconfigurar_mgmt_avalon_slave_agent:m0_readdata
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_m0_waitrequest;                            // pll_reconfigurar_mgmt_avalon_slave_translator:uav_waitrequest -> pll_reconfigurar_mgmt_avalon_slave_agent:m0_waitrequest
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_m0_debugaccess;                            // pll_reconfigurar_mgmt_avalon_slave_agent:m0_debugaccess -> pll_reconfigurar_mgmt_avalon_slave_translator:uav_debugaccess
	wire   [20:0] pll_reconfigurar_mgmt_avalon_slave_agent_m0_address;                                // pll_reconfigurar_mgmt_avalon_slave_agent:m0_address -> pll_reconfigurar_mgmt_avalon_slave_translator:uav_address
	wire    [3:0] pll_reconfigurar_mgmt_avalon_slave_agent_m0_byteenable;                             // pll_reconfigurar_mgmt_avalon_slave_agent:m0_byteenable -> pll_reconfigurar_mgmt_avalon_slave_translator:uav_byteenable
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_m0_read;                                   // pll_reconfigurar_mgmt_avalon_slave_agent:m0_read -> pll_reconfigurar_mgmt_avalon_slave_translator:uav_read
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_m0_readdatavalid;                          // pll_reconfigurar_mgmt_avalon_slave_translator:uav_readdatavalid -> pll_reconfigurar_mgmt_avalon_slave_agent:m0_readdatavalid
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_m0_lock;                                   // pll_reconfigurar_mgmt_avalon_slave_agent:m0_lock -> pll_reconfigurar_mgmt_avalon_slave_translator:uav_lock
	wire   [31:0] pll_reconfigurar_mgmt_avalon_slave_agent_m0_writedata;                              // pll_reconfigurar_mgmt_avalon_slave_agent:m0_writedata -> pll_reconfigurar_mgmt_avalon_slave_translator:uav_writedata
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_m0_write;                                  // pll_reconfigurar_mgmt_avalon_slave_agent:m0_write -> pll_reconfigurar_mgmt_avalon_slave_translator:uav_write
	wire    [2:0] pll_reconfigurar_mgmt_avalon_slave_agent_m0_burstcount;                             // pll_reconfigurar_mgmt_avalon_slave_agent:m0_burstcount -> pll_reconfigurar_mgmt_avalon_slave_translator:uav_burstcount
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_valid;                           // pll_reconfigurar_mgmt_avalon_slave_agent:rf_source_valid -> pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo:in_valid
	wire  [120:0] pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_data;                            // pll_reconfigurar_mgmt_avalon_slave_agent:rf_source_data -> pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo:in_data
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_ready;                           // pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo:in_ready -> pll_reconfigurar_mgmt_avalon_slave_agent:rf_source_ready
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_startofpacket;                   // pll_reconfigurar_mgmt_avalon_slave_agent:rf_source_startofpacket -> pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_endofpacket;                     // pll_reconfigurar_mgmt_avalon_slave_agent:rf_source_endofpacket -> pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_valid;                        // pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo:out_valid -> pll_reconfigurar_mgmt_avalon_slave_agent:rf_sink_valid
	wire  [120:0] pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_data;                         // pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo:out_data -> pll_reconfigurar_mgmt_avalon_slave_agent:rf_sink_data
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_ready;                        // pll_reconfigurar_mgmt_avalon_slave_agent:rf_sink_ready -> pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo:out_ready
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_startofpacket;                // pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo:out_startofpacket -> pll_reconfigurar_mgmt_avalon_slave_agent:rf_sink_startofpacket
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_endofpacket;                  // pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo:out_endofpacket -> pll_reconfigurar_mgmt_avalon_slave_agent:rf_sink_endofpacket
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_src_valid;                      // pll_reconfigurar_mgmt_avalon_slave_agent:rdata_fifo_src_valid -> pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo:in_valid
	wire   [33:0] pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_src_data;                       // pll_reconfigurar_mgmt_avalon_slave_agent:rdata_fifo_src_data -> pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo:in_data
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_src_ready;                      // pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo:in_ready -> pll_reconfigurar_mgmt_avalon_slave_agent:rdata_fifo_src_ready
	wire   [31:0] fifo0_64_bit_up_out_agent_m0_readdata;                                              // fifo0_64_bit_up_out_translator:uav_readdata -> fifo0_64_bit_up_out_agent:m0_readdata
	wire          fifo0_64_bit_up_out_agent_m0_waitrequest;                                           // fifo0_64_bit_up_out_translator:uav_waitrequest -> fifo0_64_bit_up_out_agent:m0_waitrequest
	wire          fifo0_64_bit_up_out_agent_m0_debugaccess;                                           // fifo0_64_bit_up_out_agent:m0_debugaccess -> fifo0_64_bit_up_out_translator:uav_debugaccess
	wire   [20:0] fifo0_64_bit_up_out_agent_m0_address;                                               // fifo0_64_bit_up_out_agent:m0_address -> fifo0_64_bit_up_out_translator:uav_address
	wire    [3:0] fifo0_64_bit_up_out_agent_m0_byteenable;                                            // fifo0_64_bit_up_out_agent:m0_byteenable -> fifo0_64_bit_up_out_translator:uav_byteenable
	wire          fifo0_64_bit_up_out_agent_m0_read;                                                  // fifo0_64_bit_up_out_agent:m0_read -> fifo0_64_bit_up_out_translator:uav_read
	wire          fifo0_64_bit_up_out_agent_m0_readdatavalid;                                         // fifo0_64_bit_up_out_translator:uav_readdatavalid -> fifo0_64_bit_up_out_agent:m0_readdatavalid
	wire          fifo0_64_bit_up_out_agent_m0_lock;                                                  // fifo0_64_bit_up_out_agent:m0_lock -> fifo0_64_bit_up_out_translator:uav_lock
	wire   [31:0] fifo0_64_bit_up_out_agent_m0_writedata;                                             // fifo0_64_bit_up_out_agent:m0_writedata -> fifo0_64_bit_up_out_translator:uav_writedata
	wire          fifo0_64_bit_up_out_agent_m0_write;                                                 // fifo0_64_bit_up_out_agent:m0_write -> fifo0_64_bit_up_out_translator:uav_write
	wire    [2:0] fifo0_64_bit_up_out_agent_m0_burstcount;                                            // fifo0_64_bit_up_out_agent:m0_burstcount -> fifo0_64_bit_up_out_translator:uav_burstcount
	wire          fifo0_64_bit_up_out_agent_rf_source_valid;                                          // fifo0_64_bit_up_out_agent:rf_source_valid -> fifo0_64_bit_up_out_agent_rsp_fifo:in_valid
	wire  [120:0] fifo0_64_bit_up_out_agent_rf_source_data;                                           // fifo0_64_bit_up_out_agent:rf_source_data -> fifo0_64_bit_up_out_agent_rsp_fifo:in_data
	wire          fifo0_64_bit_up_out_agent_rf_source_ready;                                          // fifo0_64_bit_up_out_agent_rsp_fifo:in_ready -> fifo0_64_bit_up_out_agent:rf_source_ready
	wire          fifo0_64_bit_up_out_agent_rf_source_startofpacket;                                  // fifo0_64_bit_up_out_agent:rf_source_startofpacket -> fifo0_64_bit_up_out_agent_rsp_fifo:in_startofpacket
	wire          fifo0_64_bit_up_out_agent_rf_source_endofpacket;                                    // fifo0_64_bit_up_out_agent:rf_source_endofpacket -> fifo0_64_bit_up_out_agent_rsp_fifo:in_endofpacket
	wire          fifo0_64_bit_up_out_agent_rsp_fifo_out_valid;                                       // fifo0_64_bit_up_out_agent_rsp_fifo:out_valid -> fifo0_64_bit_up_out_agent:rf_sink_valid
	wire  [120:0] fifo0_64_bit_up_out_agent_rsp_fifo_out_data;                                        // fifo0_64_bit_up_out_agent_rsp_fifo:out_data -> fifo0_64_bit_up_out_agent:rf_sink_data
	wire          fifo0_64_bit_up_out_agent_rsp_fifo_out_ready;                                       // fifo0_64_bit_up_out_agent:rf_sink_ready -> fifo0_64_bit_up_out_agent_rsp_fifo:out_ready
	wire          fifo0_64_bit_up_out_agent_rsp_fifo_out_startofpacket;                               // fifo0_64_bit_up_out_agent_rsp_fifo:out_startofpacket -> fifo0_64_bit_up_out_agent:rf_sink_startofpacket
	wire          fifo0_64_bit_up_out_agent_rsp_fifo_out_endofpacket;                                 // fifo0_64_bit_up_out_agent_rsp_fifo:out_endofpacket -> fifo0_64_bit_up_out_agent:rf_sink_endofpacket
	wire          fifo0_64_bit_up_out_agent_rdata_fifo_src_valid;                                     // fifo0_64_bit_up_out_agent:rdata_fifo_src_valid -> fifo0_64_bit_up_out_agent_rdata_fifo:in_valid
	wire   [33:0] fifo0_64_bit_up_out_agent_rdata_fifo_src_data;                                      // fifo0_64_bit_up_out_agent:rdata_fifo_src_data -> fifo0_64_bit_up_out_agent_rdata_fifo:in_data
	wire          fifo0_64_bit_up_out_agent_rdata_fifo_src_ready;                                     // fifo0_64_bit_up_out_agent_rdata_fifo:in_ready -> fifo0_64_bit_up_out_agent:rdata_fifo_src_ready
	wire   [31:0] fifo0_64_bit_down_out_agent_m0_readdata;                                            // fifo0_64_bit_down_out_translator:uav_readdata -> fifo0_64_bit_down_out_agent:m0_readdata
	wire          fifo0_64_bit_down_out_agent_m0_waitrequest;                                         // fifo0_64_bit_down_out_translator:uav_waitrequest -> fifo0_64_bit_down_out_agent:m0_waitrequest
	wire          fifo0_64_bit_down_out_agent_m0_debugaccess;                                         // fifo0_64_bit_down_out_agent:m0_debugaccess -> fifo0_64_bit_down_out_translator:uav_debugaccess
	wire   [20:0] fifo0_64_bit_down_out_agent_m0_address;                                             // fifo0_64_bit_down_out_agent:m0_address -> fifo0_64_bit_down_out_translator:uav_address
	wire    [3:0] fifo0_64_bit_down_out_agent_m0_byteenable;                                          // fifo0_64_bit_down_out_agent:m0_byteenable -> fifo0_64_bit_down_out_translator:uav_byteenable
	wire          fifo0_64_bit_down_out_agent_m0_read;                                                // fifo0_64_bit_down_out_agent:m0_read -> fifo0_64_bit_down_out_translator:uav_read
	wire          fifo0_64_bit_down_out_agent_m0_readdatavalid;                                       // fifo0_64_bit_down_out_translator:uav_readdatavalid -> fifo0_64_bit_down_out_agent:m0_readdatavalid
	wire          fifo0_64_bit_down_out_agent_m0_lock;                                                // fifo0_64_bit_down_out_agent:m0_lock -> fifo0_64_bit_down_out_translator:uav_lock
	wire   [31:0] fifo0_64_bit_down_out_agent_m0_writedata;                                           // fifo0_64_bit_down_out_agent:m0_writedata -> fifo0_64_bit_down_out_translator:uav_writedata
	wire          fifo0_64_bit_down_out_agent_m0_write;                                               // fifo0_64_bit_down_out_agent:m0_write -> fifo0_64_bit_down_out_translator:uav_write
	wire    [2:0] fifo0_64_bit_down_out_agent_m0_burstcount;                                          // fifo0_64_bit_down_out_agent:m0_burstcount -> fifo0_64_bit_down_out_translator:uav_burstcount
	wire          fifo0_64_bit_down_out_agent_rf_source_valid;                                        // fifo0_64_bit_down_out_agent:rf_source_valid -> fifo0_64_bit_down_out_agent_rsp_fifo:in_valid
	wire  [120:0] fifo0_64_bit_down_out_agent_rf_source_data;                                         // fifo0_64_bit_down_out_agent:rf_source_data -> fifo0_64_bit_down_out_agent_rsp_fifo:in_data
	wire          fifo0_64_bit_down_out_agent_rf_source_ready;                                        // fifo0_64_bit_down_out_agent_rsp_fifo:in_ready -> fifo0_64_bit_down_out_agent:rf_source_ready
	wire          fifo0_64_bit_down_out_agent_rf_source_startofpacket;                                // fifo0_64_bit_down_out_agent:rf_source_startofpacket -> fifo0_64_bit_down_out_agent_rsp_fifo:in_startofpacket
	wire          fifo0_64_bit_down_out_agent_rf_source_endofpacket;                                  // fifo0_64_bit_down_out_agent:rf_source_endofpacket -> fifo0_64_bit_down_out_agent_rsp_fifo:in_endofpacket
	wire          fifo0_64_bit_down_out_agent_rsp_fifo_out_valid;                                     // fifo0_64_bit_down_out_agent_rsp_fifo:out_valid -> fifo0_64_bit_down_out_agent:rf_sink_valid
	wire  [120:0] fifo0_64_bit_down_out_agent_rsp_fifo_out_data;                                      // fifo0_64_bit_down_out_agent_rsp_fifo:out_data -> fifo0_64_bit_down_out_agent:rf_sink_data
	wire          fifo0_64_bit_down_out_agent_rsp_fifo_out_ready;                                     // fifo0_64_bit_down_out_agent:rf_sink_ready -> fifo0_64_bit_down_out_agent_rsp_fifo:out_ready
	wire          fifo0_64_bit_down_out_agent_rsp_fifo_out_startofpacket;                             // fifo0_64_bit_down_out_agent_rsp_fifo:out_startofpacket -> fifo0_64_bit_down_out_agent:rf_sink_startofpacket
	wire          fifo0_64_bit_down_out_agent_rsp_fifo_out_endofpacket;                               // fifo0_64_bit_down_out_agent_rsp_fifo:out_endofpacket -> fifo0_64_bit_down_out_agent:rf_sink_endofpacket
	wire          fifo0_64_bit_down_out_agent_rdata_fifo_src_valid;                                   // fifo0_64_bit_down_out_agent:rdata_fifo_src_valid -> fifo0_64_bit_down_out_agent_rdata_fifo:in_valid
	wire   [33:0] fifo0_64_bit_down_out_agent_rdata_fifo_src_data;                                    // fifo0_64_bit_down_out_agent:rdata_fifo_src_data -> fifo0_64_bit_down_out_agent_rdata_fifo:in_data
	wire          fifo0_64_bit_down_out_agent_rdata_fifo_src_ready;                                   // fifo0_64_bit_down_out_agent_rdata_fifo:in_ready -> fifo0_64_bit_down_out_agent:rdata_fifo_src_ready
	wire   [31:0] fifo1_64_bit_up_out_agent_m0_readdata;                                              // fifo1_64_bit_up_out_translator:uav_readdata -> fifo1_64_bit_up_out_agent:m0_readdata
	wire          fifo1_64_bit_up_out_agent_m0_waitrequest;                                           // fifo1_64_bit_up_out_translator:uav_waitrequest -> fifo1_64_bit_up_out_agent:m0_waitrequest
	wire          fifo1_64_bit_up_out_agent_m0_debugaccess;                                           // fifo1_64_bit_up_out_agent:m0_debugaccess -> fifo1_64_bit_up_out_translator:uav_debugaccess
	wire   [20:0] fifo1_64_bit_up_out_agent_m0_address;                                               // fifo1_64_bit_up_out_agent:m0_address -> fifo1_64_bit_up_out_translator:uav_address
	wire    [3:0] fifo1_64_bit_up_out_agent_m0_byteenable;                                            // fifo1_64_bit_up_out_agent:m0_byteenable -> fifo1_64_bit_up_out_translator:uav_byteenable
	wire          fifo1_64_bit_up_out_agent_m0_read;                                                  // fifo1_64_bit_up_out_agent:m0_read -> fifo1_64_bit_up_out_translator:uav_read
	wire          fifo1_64_bit_up_out_agent_m0_readdatavalid;                                         // fifo1_64_bit_up_out_translator:uav_readdatavalid -> fifo1_64_bit_up_out_agent:m0_readdatavalid
	wire          fifo1_64_bit_up_out_agent_m0_lock;                                                  // fifo1_64_bit_up_out_agent:m0_lock -> fifo1_64_bit_up_out_translator:uav_lock
	wire   [31:0] fifo1_64_bit_up_out_agent_m0_writedata;                                             // fifo1_64_bit_up_out_agent:m0_writedata -> fifo1_64_bit_up_out_translator:uav_writedata
	wire          fifo1_64_bit_up_out_agent_m0_write;                                                 // fifo1_64_bit_up_out_agent:m0_write -> fifo1_64_bit_up_out_translator:uav_write
	wire    [2:0] fifo1_64_bit_up_out_agent_m0_burstcount;                                            // fifo1_64_bit_up_out_agent:m0_burstcount -> fifo1_64_bit_up_out_translator:uav_burstcount
	wire          fifo1_64_bit_up_out_agent_rf_source_valid;                                          // fifo1_64_bit_up_out_agent:rf_source_valid -> fifo1_64_bit_up_out_agent_rsp_fifo:in_valid
	wire  [120:0] fifo1_64_bit_up_out_agent_rf_source_data;                                           // fifo1_64_bit_up_out_agent:rf_source_data -> fifo1_64_bit_up_out_agent_rsp_fifo:in_data
	wire          fifo1_64_bit_up_out_agent_rf_source_ready;                                          // fifo1_64_bit_up_out_agent_rsp_fifo:in_ready -> fifo1_64_bit_up_out_agent:rf_source_ready
	wire          fifo1_64_bit_up_out_agent_rf_source_startofpacket;                                  // fifo1_64_bit_up_out_agent:rf_source_startofpacket -> fifo1_64_bit_up_out_agent_rsp_fifo:in_startofpacket
	wire          fifo1_64_bit_up_out_agent_rf_source_endofpacket;                                    // fifo1_64_bit_up_out_agent:rf_source_endofpacket -> fifo1_64_bit_up_out_agent_rsp_fifo:in_endofpacket
	wire          fifo1_64_bit_up_out_agent_rsp_fifo_out_valid;                                       // fifo1_64_bit_up_out_agent_rsp_fifo:out_valid -> fifo1_64_bit_up_out_agent:rf_sink_valid
	wire  [120:0] fifo1_64_bit_up_out_agent_rsp_fifo_out_data;                                        // fifo1_64_bit_up_out_agent_rsp_fifo:out_data -> fifo1_64_bit_up_out_agent:rf_sink_data
	wire          fifo1_64_bit_up_out_agent_rsp_fifo_out_ready;                                       // fifo1_64_bit_up_out_agent:rf_sink_ready -> fifo1_64_bit_up_out_agent_rsp_fifo:out_ready
	wire          fifo1_64_bit_up_out_agent_rsp_fifo_out_startofpacket;                               // fifo1_64_bit_up_out_agent_rsp_fifo:out_startofpacket -> fifo1_64_bit_up_out_agent:rf_sink_startofpacket
	wire          fifo1_64_bit_up_out_agent_rsp_fifo_out_endofpacket;                                 // fifo1_64_bit_up_out_agent_rsp_fifo:out_endofpacket -> fifo1_64_bit_up_out_agent:rf_sink_endofpacket
	wire          fifo1_64_bit_up_out_agent_rdata_fifo_src_valid;                                     // fifo1_64_bit_up_out_agent:rdata_fifo_src_valid -> fifo1_64_bit_up_out_agent_rdata_fifo:in_valid
	wire   [33:0] fifo1_64_bit_up_out_agent_rdata_fifo_src_data;                                      // fifo1_64_bit_up_out_agent:rdata_fifo_src_data -> fifo1_64_bit_up_out_agent_rdata_fifo:in_data
	wire          fifo1_64_bit_up_out_agent_rdata_fifo_src_ready;                                     // fifo1_64_bit_up_out_agent_rdata_fifo:in_ready -> fifo1_64_bit_up_out_agent:rdata_fifo_src_ready
	wire   [31:0] fifo1_64_bit_down_out_agent_m0_readdata;                                            // fifo1_64_bit_down_out_translator:uav_readdata -> fifo1_64_bit_down_out_agent:m0_readdata
	wire          fifo1_64_bit_down_out_agent_m0_waitrequest;                                         // fifo1_64_bit_down_out_translator:uav_waitrequest -> fifo1_64_bit_down_out_agent:m0_waitrequest
	wire          fifo1_64_bit_down_out_agent_m0_debugaccess;                                         // fifo1_64_bit_down_out_agent:m0_debugaccess -> fifo1_64_bit_down_out_translator:uav_debugaccess
	wire   [20:0] fifo1_64_bit_down_out_agent_m0_address;                                             // fifo1_64_bit_down_out_agent:m0_address -> fifo1_64_bit_down_out_translator:uav_address
	wire    [3:0] fifo1_64_bit_down_out_agent_m0_byteenable;                                          // fifo1_64_bit_down_out_agent:m0_byteenable -> fifo1_64_bit_down_out_translator:uav_byteenable
	wire          fifo1_64_bit_down_out_agent_m0_read;                                                // fifo1_64_bit_down_out_agent:m0_read -> fifo1_64_bit_down_out_translator:uav_read
	wire          fifo1_64_bit_down_out_agent_m0_readdatavalid;                                       // fifo1_64_bit_down_out_translator:uav_readdatavalid -> fifo1_64_bit_down_out_agent:m0_readdatavalid
	wire          fifo1_64_bit_down_out_agent_m0_lock;                                                // fifo1_64_bit_down_out_agent:m0_lock -> fifo1_64_bit_down_out_translator:uav_lock
	wire   [31:0] fifo1_64_bit_down_out_agent_m0_writedata;                                           // fifo1_64_bit_down_out_agent:m0_writedata -> fifo1_64_bit_down_out_translator:uav_writedata
	wire          fifo1_64_bit_down_out_agent_m0_write;                                               // fifo1_64_bit_down_out_agent:m0_write -> fifo1_64_bit_down_out_translator:uav_write
	wire    [2:0] fifo1_64_bit_down_out_agent_m0_burstcount;                                          // fifo1_64_bit_down_out_agent:m0_burstcount -> fifo1_64_bit_down_out_translator:uav_burstcount
	wire          fifo1_64_bit_down_out_agent_rf_source_valid;                                        // fifo1_64_bit_down_out_agent:rf_source_valid -> fifo1_64_bit_down_out_agent_rsp_fifo:in_valid
	wire  [120:0] fifo1_64_bit_down_out_agent_rf_source_data;                                         // fifo1_64_bit_down_out_agent:rf_source_data -> fifo1_64_bit_down_out_agent_rsp_fifo:in_data
	wire          fifo1_64_bit_down_out_agent_rf_source_ready;                                        // fifo1_64_bit_down_out_agent_rsp_fifo:in_ready -> fifo1_64_bit_down_out_agent:rf_source_ready
	wire          fifo1_64_bit_down_out_agent_rf_source_startofpacket;                                // fifo1_64_bit_down_out_agent:rf_source_startofpacket -> fifo1_64_bit_down_out_agent_rsp_fifo:in_startofpacket
	wire          fifo1_64_bit_down_out_agent_rf_source_endofpacket;                                  // fifo1_64_bit_down_out_agent:rf_source_endofpacket -> fifo1_64_bit_down_out_agent_rsp_fifo:in_endofpacket
	wire          fifo1_64_bit_down_out_agent_rsp_fifo_out_valid;                                     // fifo1_64_bit_down_out_agent_rsp_fifo:out_valid -> fifo1_64_bit_down_out_agent:rf_sink_valid
	wire  [120:0] fifo1_64_bit_down_out_agent_rsp_fifo_out_data;                                      // fifo1_64_bit_down_out_agent_rsp_fifo:out_data -> fifo1_64_bit_down_out_agent:rf_sink_data
	wire          fifo1_64_bit_down_out_agent_rsp_fifo_out_ready;                                     // fifo1_64_bit_down_out_agent:rf_sink_ready -> fifo1_64_bit_down_out_agent_rsp_fifo:out_ready
	wire          fifo1_64_bit_down_out_agent_rsp_fifo_out_startofpacket;                             // fifo1_64_bit_down_out_agent_rsp_fifo:out_startofpacket -> fifo1_64_bit_down_out_agent:rf_sink_startofpacket
	wire          fifo1_64_bit_down_out_agent_rsp_fifo_out_endofpacket;                               // fifo1_64_bit_down_out_agent_rsp_fifo:out_endofpacket -> fifo1_64_bit_down_out_agent:rf_sink_endofpacket
	wire          fifo1_64_bit_down_out_agent_rdata_fifo_src_valid;                                   // fifo1_64_bit_down_out_agent:rdata_fifo_src_valid -> fifo1_64_bit_down_out_agent_rdata_fifo:in_valid
	wire   [33:0] fifo1_64_bit_down_out_agent_rdata_fifo_src_data;                                    // fifo1_64_bit_down_out_agent:rdata_fifo_src_data -> fifo1_64_bit_down_out_agent_rdata_fifo:in_data
	wire          fifo1_64_bit_down_out_agent_rdata_fifo_src_ready;                                   // fifo1_64_bit_down_out_agent_rdata_fifo:in_ready -> fifo1_64_bit_down_out_agent:rdata_fifo_src_ready
	wire   [31:0] fifo0_32_bit_out_agent_m0_readdata;                                                 // fifo0_32_bit_out_translator:uav_readdata -> fifo0_32_bit_out_agent:m0_readdata
	wire          fifo0_32_bit_out_agent_m0_waitrequest;                                              // fifo0_32_bit_out_translator:uav_waitrequest -> fifo0_32_bit_out_agent:m0_waitrequest
	wire          fifo0_32_bit_out_agent_m0_debugaccess;                                              // fifo0_32_bit_out_agent:m0_debugaccess -> fifo0_32_bit_out_translator:uav_debugaccess
	wire   [20:0] fifo0_32_bit_out_agent_m0_address;                                                  // fifo0_32_bit_out_agent:m0_address -> fifo0_32_bit_out_translator:uav_address
	wire    [3:0] fifo0_32_bit_out_agent_m0_byteenable;                                               // fifo0_32_bit_out_agent:m0_byteenable -> fifo0_32_bit_out_translator:uav_byteenable
	wire          fifo0_32_bit_out_agent_m0_read;                                                     // fifo0_32_bit_out_agent:m0_read -> fifo0_32_bit_out_translator:uav_read
	wire          fifo0_32_bit_out_agent_m0_readdatavalid;                                            // fifo0_32_bit_out_translator:uav_readdatavalid -> fifo0_32_bit_out_agent:m0_readdatavalid
	wire          fifo0_32_bit_out_agent_m0_lock;                                                     // fifo0_32_bit_out_agent:m0_lock -> fifo0_32_bit_out_translator:uav_lock
	wire   [31:0] fifo0_32_bit_out_agent_m0_writedata;                                                // fifo0_32_bit_out_agent:m0_writedata -> fifo0_32_bit_out_translator:uav_writedata
	wire          fifo0_32_bit_out_agent_m0_write;                                                    // fifo0_32_bit_out_agent:m0_write -> fifo0_32_bit_out_translator:uav_write
	wire    [2:0] fifo0_32_bit_out_agent_m0_burstcount;                                               // fifo0_32_bit_out_agent:m0_burstcount -> fifo0_32_bit_out_translator:uav_burstcount
	wire          fifo0_32_bit_out_agent_rf_source_valid;                                             // fifo0_32_bit_out_agent:rf_source_valid -> fifo0_32_bit_out_agent_rsp_fifo:in_valid
	wire  [120:0] fifo0_32_bit_out_agent_rf_source_data;                                              // fifo0_32_bit_out_agent:rf_source_data -> fifo0_32_bit_out_agent_rsp_fifo:in_data
	wire          fifo0_32_bit_out_agent_rf_source_ready;                                             // fifo0_32_bit_out_agent_rsp_fifo:in_ready -> fifo0_32_bit_out_agent:rf_source_ready
	wire          fifo0_32_bit_out_agent_rf_source_startofpacket;                                     // fifo0_32_bit_out_agent:rf_source_startofpacket -> fifo0_32_bit_out_agent_rsp_fifo:in_startofpacket
	wire          fifo0_32_bit_out_agent_rf_source_endofpacket;                                       // fifo0_32_bit_out_agent:rf_source_endofpacket -> fifo0_32_bit_out_agent_rsp_fifo:in_endofpacket
	wire          fifo0_32_bit_out_agent_rsp_fifo_out_valid;                                          // fifo0_32_bit_out_agent_rsp_fifo:out_valid -> fifo0_32_bit_out_agent:rf_sink_valid
	wire  [120:0] fifo0_32_bit_out_agent_rsp_fifo_out_data;                                           // fifo0_32_bit_out_agent_rsp_fifo:out_data -> fifo0_32_bit_out_agent:rf_sink_data
	wire          fifo0_32_bit_out_agent_rsp_fifo_out_ready;                                          // fifo0_32_bit_out_agent:rf_sink_ready -> fifo0_32_bit_out_agent_rsp_fifo:out_ready
	wire          fifo0_32_bit_out_agent_rsp_fifo_out_startofpacket;                                  // fifo0_32_bit_out_agent_rsp_fifo:out_startofpacket -> fifo0_32_bit_out_agent:rf_sink_startofpacket
	wire          fifo0_32_bit_out_agent_rsp_fifo_out_endofpacket;                                    // fifo0_32_bit_out_agent_rsp_fifo:out_endofpacket -> fifo0_32_bit_out_agent:rf_sink_endofpacket
	wire          fifo0_32_bit_out_agent_rdata_fifo_src_valid;                                        // fifo0_32_bit_out_agent:rdata_fifo_src_valid -> fifo0_32_bit_out_agent_rdata_fifo:in_valid
	wire   [33:0] fifo0_32_bit_out_agent_rdata_fifo_src_data;                                         // fifo0_32_bit_out_agent:rdata_fifo_src_data -> fifo0_32_bit_out_agent_rdata_fifo:in_data
	wire          fifo0_32_bit_out_agent_rdata_fifo_src_ready;                                        // fifo0_32_bit_out_agent_rdata_fifo:in_ready -> fifo0_32_bit_out_agent:rdata_fifo_src_ready
	wire   [31:0] fifo1_32_bit_out_agent_m0_readdata;                                                 // fifo1_32_bit_out_translator:uav_readdata -> fifo1_32_bit_out_agent:m0_readdata
	wire          fifo1_32_bit_out_agent_m0_waitrequest;                                              // fifo1_32_bit_out_translator:uav_waitrequest -> fifo1_32_bit_out_agent:m0_waitrequest
	wire          fifo1_32_bit_out_agent_m0_debugaccess;                                              // fifo1_32_bit_out_agent:m0_debugaccess -> fifo1_32_bit_out_translator:uav_debugaccess
	wire   [20:0] fifo1_32_bit_out_agent_m0_address;                                                  // fifo1_32_bit_out_agent:m0_address -> fifo1_32_bit_out_translator:uav_address
	wire    [3:0] fifo1_32_bit_out_agent_m0_byteenable;                                               // fifo1_32_bit_out_agent:m0_byteenable -> fifo1_32_bit_out_translator:uav_byteenable
	wire          fifo1_32_bit_out_agent_m0_read;                                                     // fifo1_32_bit_out_agent:m0_read -> fifo1_32_bit_out_translator:uav_read
	wire          fifo1_32_bit_out_agent_m0_readdatavalid;                                            // fifo1_32_bit_out_translator:uav_readdatavalid -> fifo1_32_bit_out_agent:m0_readdatavalid
	wire          fifo1_32_bit_out_agent_m0_lock;                                                     // fifo1_32_bit_out_agent:m0_lock -> fifo1_32_bit_out_translator:uav_lock
	wire   [31:0] fifo1_32_bit_out_agent_m0_writedata;                                                // fifo1_32_bit_out_agent:m0_writedata -> fifo1_32_bit_out_translator:uav_writedata
	wire          fifo1_32_bit_out_agent_m0_write;                                                    // fifo1_32_bit_out_agent:m0_write -> fifo1_32_bit_out_translator:uav_write
	wire    [2:0] fifo1_32_bit_out_agent_m0_burstcount;                                               // fifo1_32_bit_out_agent:m0_burstcount -> fifo1_32_bit_out_translator:uav_burstcount
	wire          fifo1_32_bit_out_agent_rf_source_valid;                                             // fifo1_32_bit_out_agent:rf_source_valid -> fifo1_32_bit_out_agent_rsp_fifo:in_valid
	wire  [120:0] fifo1_32_bit_out_agent_rf_source_data;                                              // fifo1_32_bit_out_agent:rf_source_data -> fifo1_32_bit_out_agent_rsp_fifo:in_data
	wire          fifo1_32_bit_out_agent_rf_source_ready;                                             // fifo1_32_bit_out_agent_rsp_fifo:in_ready -> fifo1_32_bit_out_agent:rf_source_ready
	wire          fifo1_32_bit_out_agent_rf_source_startofpacket;                                     // fifo1_32_bit_out_agent:rf_source_startofpacket -> fifo1_32_bit_out_agent_rsp_fifo:in_startofpacket
	wire          fifo1_32_bit_out_agent_rf_source_endofpacket;                                       // fifo1_32_bit_out_agent:rf_source_endofpacket -> fifo1_32_bit_out_agent_rsp_fifo:in_endofpacket
	wire          fifo1_32_bit_out_agent_rsp_fifo_out_valid;                                          // fifo1_32_bit_out_agent_rsp_fifo:out_valid -> fifo1_32_bit_out_agent:rf_sink_valid
	wire  [120:0] fifo1_32_bit_out_agent_rsp_fifo_out_data;                                           // fifo1_32_bit_out_agent_rsp_fifo:out_data -> fifo1_32_bit_out_agent:rf_sink_data
	wire          fifo1_32_bit_out_agent_rsp_fifo_out_ready;                                          // fifo1_32_bit_out_agent:rf_sink_ready -> fifo1_32_bit_out_agent_rsp_fifo:out_ready
	wire          fifo1_32_bit_out_agent_rsp_fifo_out_startofpacket;                                  // fifo1_32_bit_out_agent_rsp_fifo:out_startofpacket -> fifo1_32_bit_out_agent:rf_sink_startofpacket
	wire          fifo1_32_bit_out_agent_rsp_fifo_out_endofpacket;                                    // fifo1_32_bit_out_agent_rsp_fifo:out_endofpacket -> fifo1_32_bit_out_agent:rf_sink_endofpacket
	wire          fifo1_32_bit_out_agent_rdata_fifo_src_valid;                                        // fifo1_32_bit_out_agent:rdata_fifo_src_valid -> fifo1_32_bit_out_agent_rdata_fifo:in_valid
	wire   [33:0] fifo1_32_bit_out_agent_rdata_fifo_src_data;                                         // fifo1_32_bit_out_agent:rdata_fifo_src_data -> fifo1_32_bit_out_agent_rdata_fifo:in_data
	wire          fifo1_32_bit_out_agent_rdata_fifo_src_ready;                                        // fifo1_32_bit_out_agent_rdata_fifo:in_ready -> fifo1_32_bit_out_agent:rdata_fifo_src_ready
	wire   [31:0] parameters_s0_agent_m0_readdata;                                                    // parameters_s0_translator:uav_readdata -> parameters_s0_agent:m0_readdata
	wire          parameters_s0_agent_m0_waitrequest;                                                 // parameters_s0_translator:uav_waitrequest -> parameters_s0_agent:m0_waitrequest
	wire          parameters_s0_agent_m0_debugaccess;                                                 // parameters_s0_agent:m0_debugaccess -> parameters_s0_translator:uav_debugaccess
	wire   [20:0] parameters_s0_agent_m0_address;                                                     // parameters_s0_agent:m0_address -> parameters_s0_translator:uav_address
	wire    [3:0] parameters_s0_agent_m0_byteenable;                                                  // parameters_s0_agent:m0_byteenable -> parameters_s0_translator:uav_byteenable
	wire          parameters_s0_agent_m0_read;                                                        // parameters_s0_agent:m0_read -> parameters_s0_translator:uav_read
	wire          parameters_s0_agent_m0_readdatavalid;                                               // parameters_s0_translator:uav_readdatavalid -> parameters_s0_agent:m0_readdatavalid
	wire          parameters_s0_agent_m0_lock;                                                        // parameters_s0_agent:m0_lock -> parameters_s0_translator:uav_lock
	wire   [31:0] parameters_s0_agent_m0_writedata;                                                   // parameters_s0_agent:m0_writedata -> parameters_s0_translator:uav_writedata
	wire          parameters_s0_agent_m0_write;                                                       // parameters_s0_agent:m0_write -> parameters_s0_translator:uav_write
	wire    [2:0] parameters_s0_agent_m0_burstcount;                                                  // parameters_s0_agent:m0_burstcount -> parameters_s0_translator:uav_burstcount
	wire          parameters_s0_agent_rf_source_valid;                                                // parameters_s0_agent:rf_source_valid -> parameters_s0_agent_rsp_fifo:in_valid
	wire  [120:0] parameters_s0_agent_rf_source_data;                                                 // parameters_s0_agent:rf_source_data -> parameters_s0_agent_rsp_fifo:in_data
	wire          parameters_s0_agent_rf_source_ready;                                                // parameters_s0_agent_rsp_fifo:in_ready -> parameters_s0_agent:rf_source_ready
	wire          parameters_s0_agent_rf_source_startofpacket;                                        // parameters_s0_agent:rf_source_startofpacket -> parameters_s0_agent_rsp_fifo:in_startofpacket
	wire          parameters_s0_agent_rf_source_endofpacket;                                          // parameters_s0_agent:rf_source_endofpacket -> parameters_s0_agent_rsp_fifo:in_endofpacket
	wire          parameters_s0_agent_rsp_fifo_out_valid;                                             // parameters_s0_agent_rsp_fifo:out_valid -> parameters_s0_agent:rf_sink_valid
	wire  [120:0] parameters_s0_agent_rsp_fifo_out_data;                                              // parameters_s0_agent_rsp_fifo:out_data -> parameters_s0_agent:rf_sink_data
	wire          parameters_s0_agent_rsp_fifo_out_ready;                                             // parameters_s0_agent:rf_sink_ready -> parameters_s0_agent_rsp_fifo:out_ready
	wire          parameters_s0_agent_rsp_fifo_out_startofpacket;                                     // parameters_s0_agent_rsp_fifo:out_startofpacket -> parameters_s0_agent:rf_sink_startofpacket
	wire          parameters_s0_agent_rsp_fifo_out_endofpacket;                                       // parameters_s0_agent_rsp_fifo:out_endofpacket -> parameters_s0_agent:rf_sink_endofpacket
	wire          parameters_s0_agent_rdata_fifo_src_valid;                                           // parameters_s0_agent:rdata_fifo_src_valid -> parameters_s0_agent_rdata_fifo:in_valid
	wire   [33:0] parameters_s0_agent_rdata_fifo_src_data;                                            // parameters_s0_agent:rdata_fifo_src_data -> parameters_s0_agent_rdata_fifo:in_data
	wire          parameters_s0_agent_rdata_fifo_src_ready;                                           // parameters_s0_agent_rdata_fifo:in_ready -> parameters_s0_agent:rdata_fifo_src_ready
	wire   [31:0] parameters_1_s0_agent_m0_readdata;                                                  // parameters_1_s0_translator:uav_readdata -> parameters_1_s0_agent:m0_readdata
	wire          parameters_1_s0_agent_m0_waitrequest;                                               // parameters_1_s0_translator:uav_waitrequest -> parameters_1_s0_agent:m0_waitrequest
	wire          parameters_1_s0_agent_m0_debugaccess;                                               // parameters_1_s0_agent:m0_debugaccess -> parameters_1_s0_translator:uav_debugaccess
	wire   [20:0] parameters_1_s0_agent_m0_address;                                                   // parameters_1_s0_agent:m0_address -> parameters_1_s0_translator:uav_address
	wire    [3:0] parameters_1_s0_agent_m0_byteenable;                                                // parameters_1_s0_agent:m0_byteenable -> parameters_1_s0_translator:uav_byteenable
	wire          parameters_1_s0_agent_m0_read;                                                      // parameters_1_s0_agent:m0_read -> parameters_1_s0_translator:uav_read
	wire          parameters_1_s0_agent_m0_readdatavalid;                                             // parameters_1_s0_translator:uav_readdatavalid -> parameters_1_s0_agent:m0_readdatavalid
	wire          parameters_1_s0_agent_m0_lock;                                                      // parameters_1_s0_agent:m0_lock -> parameters_1_s0_translator:uav_lock
	wire   [31:0] parameters_1_s0_agent_m0_writedata;                                                 // parameters_1_s0_agent:m0_writedata -> parameters_1_s0_translator:uav_writedata
	wire          parameters_1_s0_agent_m0_write;                                                     // parameters_1_s0_agent:m0_write -> parameters_1_s0_translator:uav_write
	wire    [2:0] parameters_1_s0_agent_m0_burstcount;                                                // parameters_1_s0_agent:m0_burstcount -> parameters_1_s0_translator:uav_burstcount
	wire          parameters_1_s0_agent_rf_source_valid;                                              // parameters_1_s0_agent:rf_source_valid -> parameters_1_s0_agent_rsp_fifo:in_valid
	wire  [120:0] parameters_1_s0_agent_rf_source_data;                                               // parameters_1_s0_agent:rf_source_data -> parameters_1_s0_agent_rsp_fifo:in_data
	wire          parameters_1_s0_agent_rf_source_ready;                                              // parameters_1_s0_agent_rsp_fifo:in_ready -> parameters_1_s0_agent:rf_source_ready
	wire          parameters_1_s0_agent_rf_source_startofpacket;                                      // parameters_1_s0_agent:rf_source_startofpacket -> parameters_1_s0_agent_rsp_fifo:in_startofpacket
	wire          parameters_1_s0_agent_rf_source_endofpacket;                                        // parameters_1_s0_agent:rf_source_endofpacket -> parameters_1_s0_agent_rsp_fifo:in_endofpacket
	wire          parameters_1_s0_agent_rsp_fifo_out_valid;                                           // parameters_1_s0_agent_rsp_fifo:out_valid -> parameters_1_s0_agent:rf_sink_valid
	wire  [120:0] parameters_1_s0_agent_rsp_fifo_out_data;                                            // parameters_1_s0_agent_rsp_fifo:out_data -> parameters_1_s0_agent:rf_sink_data
	wire          parameters_1_s0_agent_rsp_fifo_out_ready;                                           // parameters_1_s0_agent:rf_sink_ready -> parameters_1_s0_agent_rsp_fifo:out_ready
	wire          parameters_1_s0_agent_rsp_fifo_out_startofpacket;                                   // parameters_1_s0_agent_rsp_fifo:out_startofpacket -> parameters_1_s0_agent:rf_sink_startofpacket
	wire          parameters_1_s0_agent_rsp_fifo_out_endofpacket;                                     // parameters_1_s0_agent_rsp_fifo:out_endofpacket -> parameters_1_s0_agent:rf_sink_endofpacket
	wire          parameters_1_s0_agent_rdata_fifo_src_valid;                                         // parameters_1_s0_agent:rdata_fifo_src_valid -> parameters_1_s0_agent_rdata_fifo:in_valid
	wire   [33:0] parameters_1_s0_agent_rdata_fifo_src_data;                                          // parameters_1_s0_agent:rdata_fifo_src_data -> parameters_1_s0_agent_rdata_fifo:in_data
	wire          parameters_1_s0_agent_rdata_fifo_src_ready;                                         // parameters_1_s0_agent_rdata_fifo:in_ready -> parameters_1_s0_agent:rdata_fifo_src_ready
	wire   [31:0] parameters_2_s0_agent_m0_readdata;                                                  // parameters_2_s0_translator:uav_readdata -> parameters_2_s0_agent:m0_readdata
	wire          parameters_2_s0_agent_m0_waitrequest;                                               // parameters_2_s0_translator:uav_waitrequest -> parameters_2_s0_agent:m0_waitrequest
	wire          parameters_2_s0_agent_m0_debugaccess;                                               // parameters_2_s0_agent:m0_debugaccess -> parameters_2_s0_translator:uav_debugaccess
	wire   [20:0] parameters_2_s0_agent_m0_address;                                                   // parameters_2_s0_agent:m0_address -> parameters_2_s0_translator:uav_address
	wire    [3:0] parameters_2_s0_agent_m0_byteenable;                                                // parameters_2_s0_agent:m0_byteenable -> parameters_2_s0_translator:uav_byteenable
	wire          parameters_2_s0_agent_m0_read;                                                      // parameters_2_s0_agent:m0_read -> parameters_2_s0_translator:uav_read
	wire          parameters_2_s0_agent_m0_readdatavalid;                                             // parameters_2_s0_translator:uav_readdatavalid -> parameters_2_s0_agent:m0_readdatavalid
	wire          parameters_2_s0_agent_m0_lock;                                                      // parameters_2_s0_agent:m0_lock -> parameters_2_s0_translator:uav_lock
	wire   [31:0] parameters_2_s0_agent_m0_writedata;                                                 // parameters_2_s0_agent:m0_writedata -> parameters_2_s0_translator:uav_writedata
	wire          parameters_2_s0_agent_m0_write;                                                     // parameters_2_s0_agent:m0_write -> parameters_2_s0_translator:uav_write
	wire    [2:0] parameters_2_s0_agent_m0_burstcount;                                                // parameters_2_s0_agent:m0_burstcount -> parameters_2_s0_translator:uav_burstcount
	wire          parameters_2_s0_agent_rf_source_valid;                                              // parameters_2_s0_agent:rf_source_valid -> parameters_2_s0_agent_rsp_fifo:in_valid
	wire  [120:0] parameters_2_s0_agent_rf_source_data;                                               // parameters_2_s0_agent:rf_source_data -> parameters_2_s0_agent_rsp_fifo:in_data
	wire          parameters_2_s0_agent_rf_source_ready;                                              // parameters_2_s0_agent_rsp_fifo:in_ready -> parameters_2_s0_agent:rf_source_ready
	wire          parameters_2_s0_agent_rf_source_startofpacket;                                      // parameters_2_s0_agent:rf_source_startofpacket -> parameters_2_s0_agent_rsp_fifo:in_startofpacket
	wire          parameters_2_s0_agent_rf_source_endofpacket;                                        // parameters_2_s0_agent:rf_source_endofpacket -> parameters_2_s0_agent_rsp_fifo:in_endofpacket
	wire          parameters_2_s0_agent_rsp_fifo_out_valid;                                           // parameters_2_s0_agent_rsp_fifo:out_valid -> parameters_2_s0_agent:rf_sink_valid
	wire  [120:0] parameters_2_s0_agent_rsp_fifo_out_data;                                            // parameters_2_s0_agent_rsp_fifo:out_data -> parameters_2_s0_agent:rf_sink_data
	wire          parameters_2_s0_agent_rsp_fifo_out_ready;                                           // parameters_2_s0_agent:rf_sink_ready -> parameters_2_s0_agent_rsp_fifo:out_ready
	wire          parameters_2_s0_agent_rsp_fifo_out_startofpacket;                                   // parameters_2_s0_agent_rsp_fifo:out_startofpacket -> parameters_2_s0_agent:rf_sink_startofpacket
	wire          parameters_2_s0_agent_rsp_fifo_out_endofpacket;                                     // parameters_2_s0_agent_rsp_fifo:out_endofpacket -> parameters_2_s0_agent:rf_sink_endofpacket
	wire          parameters_2_s0_agent_rdata_fifo_src_valid;                                         // parameters_2_s0_agent:rdata_fifo_src_valid -> parameters_2_s0_agent_rdata_fifo:in_valid
	wire   [33:0] parameters_2_s0_agent_rdata_fifo_src_data;                                          // parameters_2_s0_agent:rdata_fifo_src_data -> parameters_2_s0_agent_rdata_fifo:in_data
	wire          parameters_2_s0_agent_rdata_fifo_src_ready;                                         // parameters_2_s0_agent_rdata_fifo:in_ready -> parameters_2_s0_agent:rdata_fifo_src_ready
	wire   [31:0] parameters_3_s0_agent_m0_readdata;                                                  // parameters_3_s0_translator:uav_readdata -> parameters_3_s0_agent:m0_readdata
	wire          parameters_3_s0_agent_m0_waitrequest;                                               // parameters_3_s0_translator:uav_waitrequest -> parameters_3_s0_agent:m0_waitrequest
	wire          parameters_3_s0_agent_m0_debugaccess;                                               // parameters_3_s0_agent:m0_debugaccess -> parameters_3_s0_translator:uav_debugaccess
	wire   [20:0] parameters_3_s0_agent_m0_address;                                                   // parameters_3_s0_agent:m0_address -> parameters_3_s0_translator:uav_address
	wire    [3:0] parameters_3_s0_agent_m0_byteenable;                                                // parameters_3_s0_agent:m0_byteenable -> parameters_3_s0_translator:uav_byteenable
	wire          parameters_3_s0_agent_m0_read;                                                      // parameters_3_s0_agent:m0_read -> parameters_3_s0_translator:uav_read
	wire          parameters_3_s0_agent_m0_readdatavalid;                                             // parameters_3_s0_translator:uav_readdatavalid -> parameters_3_s0_agent:m0_readdatavalid
	wire          parameters_3_s0_agent_m0_lock;                                                      // parameters_3_s0_agent:m0_lock -> parameters_3_s0_translator:uav_lock
	wire   [31:0] parameters_3_s0_agent_m0_writedata;                                                 // parameters_3_s0_agent:m0_writedata -> parameters_3_s0_translator:uav_writedata
	wire          parameters_3_s0_agent_m0_write;                                                     // parameters_3_s0_agent:m0_write -> parameters_3_s0_translator:uav_write
	wire    [2:0] parameters_3_s0_agent_m0_burstcount;                                                // parameters_3_s0_agent:m0_burstcount -> parameters_3_s0_translator:uav_burstcount
	wire          parameters_3_s0_agent_rf_source_valid;                                              // parameters_3_s0_agent:rf_source_valid -> parameters_3_s0_agent_rsp_fifo:in_valid
	wire  [120:0] parameters_3_s0_agent_rf_source_data;                                               // parameters_3_s0_agent:rf_source_data -> parameters_3_s0_agent_rsp_fifo:in_data
	wire          parameters_3_s0_agent_rf_source_ready;                                              // parameters_3_s0_agent_rsp_fifo:in_ready -> parameters_3_s0_agent:rf_source_ready
	wire          parameters_3_s0_agent_rf_source_startofpacket;                                      // parameters_3_s0_agent:rf_source_startofpacket -> parameters_3_s0_agent_rsp_fifo:in_startofpacket
	wire          parameters_3_s0_agent_rf_source_endofpacket;                                        // parameters_3_s0_agent:rf_source_endofpacket -> parameters_3_s0_agent_rsp_fifo:in_endofpacket
	wire          parameters_3_s0_agent_rsp_fifo_out_valid;                                           // parameters_3_s0_agent_rsp_fifo:out_valid -> parameters_3_s0_agent:rf_sink_valid
	wire  [120:0] parameters_3_s0_agent_rsp_fifo_out_data;                                            // parameters_3_s0_agent_rsp_fifo:out_data -> parameters_3_s0_agent:rf_sink_data
	wire          parameters_3_s0_agent_rsp_fifo_out_ready;                                           // parameters_3_s0_agent:rf_sink_ready -> parameters_3_s0_agent_rsp_fifo:out_ready
	wire          parameters_3_s0_agent_rsp_fifo_out_startofpacket;                                   // parameters_3_s0_agent_rsp_fifo:out_startofpacket -> parameters_3_s0_agent:rf_sink_startofpacket
	wire          parameters_3_s0_agent_rsp_fifo_out_endofpacket;                                     // parameters_3_s0_agent_rsp_fifo:out_endofpacket -> parameters_3_s0_agent:rf_sink_endofpacket
	wire          parameters_3_s0_agent_rdata_fifo_src_valid;                                         // parameters_3_s0_agent:rdata_fifo_src_valid -> parameters_3_s0_agent_rdata_fifo:in_valid
	wire   [33:0] parameters_3_s0_agent_rdata_fifo_src_data;                                          // parameters_3_s0_agent:rdata_fifo_src_data -> parameters_3_s0_agent_rdata_fifo:in_data
	wire          parameters_3_s0_agent_rdata_fifo_src_ready;                                         // parameters_3_s0_agent_rdata_fifo:in_ready -> parameters_3_s0_agent:rdata_fifo_src_ready
	wire   [31:0] program_memory_s1_agent_m0_readdata;                                                // program_memory_s1_translator:uav_readdata -> program_memory_s1_agent:m0_readdata
	wire          program_memory_s1_agent_m0_waitrequest;                                             // program_memory_s1_translator:uav_waitrequest -> program_memory_s1_agent:m0_waitrequest
	wire          program_memory_s1_agent_m0_debugaccess;                                             // program_memory_s1_agent:m0_debugaccess -> program_memory_s1_translator:uav_debugaccess
	wire   [20:0] program_memory_s1_agent_m0_address;                                                 // program_memory_s1_agent:m0_address -> program_memory_s1_translator:uav_address
	wire    [3:0] program_memory_s1_agent_m0_byteenable;                                              // program_memory_s1_agent:m0_byteenable -> program_memory_s1_translator:uav_byteenable
	wire          program_memory_s1_agent_m0_read;                                                    // program_memory_s1_agent:m0_read -> program_memory_s1_translator:uav_read
	wire          program_memory_s1_agent_m0_readdatavalid;                                           // program_memory_s1_translator:uav_readdatavalid -> program_memory_s1_agent:m0_readdatavalid
	wire          program_memory_s1_agent_m0_lock;                                                    // program_memory_s1_agent:m0_lock -> program_memory_s1_translator:uav_lock
	wire   [31:0] program_memory_s1_agent_m0_writedata;                                               // program_memory_s1_agent:m0_writedata -> program_memory_s1_translator:uav_writedata
	wire          program_memory_s1_agent_m0_write;                                                   // program_memory_s1_agent:m0_write -> program_memory_s1_translator:uav_write
	wire    [2:0] program_memory_s1_agent_m0_burstcount;                                              // program_memory_s1_agent:m0_burstcount -> program_memory_s1_translator:uav_burstcount
	wire          program_memory_s1_agent_rf_source_valid;                                            // program_memory_s1_agent:rf_source_valid -> program_memory_s1_agent_rsp_fifo:in_valid
	wire  [120:0] program_memory_s1_agent_rf_source_data;                                             // program_memory_s1_agent:rf_source_data -> program_memory_s1_agent_rsp_fifo:in_data
	wire          program_memory_s1_agent_rf_source_ready;                                            // program_memory_s1_agent_rsp_fifo:in_ready -> program_memory_s1_agent:rf_source_ready
	wire          program_memory_s1_agent_rf_source_startofpacket;                                    // program_memory_s1_agent:rf_source_startofpacket -> program_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          program_memory_s1_agent_rf_source_endofpacket;                                      // program_memory_s1_agent:rf_source_endofpacket -> program_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          program_memory_s1_agent_rsp_fifo_out_valid;                                         // program_memory_s1_agent_rsp_fifo:out_valid -> program_memory_s1_agent:rf_sink_valid
	wire  [120:0] program_memory_s1_agent_rsp_fifo_out_data;                                          // program_memory_s1_agent_rsp_fifo:out_data -> program_memory_s1_agent:rf_sink_data
	wire          program_memory_s1_agent_rsp_fifo_out_ready;                                         // program_memory_s1_agent:rf_sink_ready -> program_memory_s1_agent_rsp_fifo:out_ready
	wire          program_memory_s1_agent_rsp_fifo_out_startofpacket;                                 // program_memory_s1_agent_rsp_fifo:out_startofpacket -> program_memory_s1_agent:rf_sink_startofpacket
	wire          program_memory_s1_agent_rsp_fifo_out_endofpacket;                                   // program_memory_s1_agent_rsp_fifo:out_endofpacket -> program_memory_s1_agent:rf_sink_endofpacket
	wire          program_memory_s1_agent_rdata_fifo_src_valid;                                       // program_memory_s1_agent:rdata_fifo_src_valid -> program_memory_s1_agent_rdata_fifo:in_valid
	wire   [33:0] program_memory_s1_agent_rdata_fifo_src_data;                                        // program_memory_s1_agent:rdata_fifo_src_data -> program_memory_s1_agent_rdata_fifo:in_data
	wire          program_memory_s1_agent_rdata_fifo_src_ready;                                       // program_memory_s1_agent_rdata_fifo:in_ready -> program_memory_s1_agent:rdata_fifo_src_ready
	wire   [31:0] divisor_clock_s1_agent_m0_readdata;                                                 // divisor_clock_s1_translator:uav_readdata -> divisor_clock_s1_agent:m0_readdata
	wire          divisor_clock_s1_agent_m0_waitrequest;                                              // divisor_clock_s1_translator:uav_waitrequest -> divisor_clock_s1_agent:m0_waitrequest
	wire          divisor_clock_s1_agent_m0_debugaccess;                                              // divisor_clock_s1_agent:m0_debugaccess -> divisor_clock_s1_translator:uav_debugaccess
	wire   [20:0] divisor_clock_s1_agent_m0_address;                                                  // divisor_clock_s1_agent:m0_address -> divisor_clock_s1_translator:uav_address
	wire    [3:0] divisor_clock_s1_agent_m0_byteenable;                                               // divisor_clock_s1_agent:m0_byteenable -> divisor_clock_s1_translator:uav_byteenable
	wire          divisor_clock_s1_agent_m0_read;                                                     // divisor_clock_s1_agent:m0_read -> divisor_clock_s1_translator:uav_read
	wire          divisor_clock_s1_agent_m0_readdatavalid;                                            // divisor_clock_s1_translator:uav_readdatavalid -> divisor_clock_s1_agent:m0_readdatavalid
	wire          divisor_clock_s1_agent_m0_lock;                                                     // divisor_clock_s1_agent:m0_lock -> divisor_clock_s1_translator:uav_lock
	wire   [31:0] divisor_clock_s1_agent_m0_writedata;                                                // divisor_clock_s1_agent:m0_writedata -> divisor_clock_s1_translator:uav_writedata
	wire          divisor_clock_s1_agent_m0_write;                                                    // divisor_clock_s1_agent:m0_write -> divisor_clock_s1_translator:uav_write
	wire    [2:0] divisor_clock_s1_agent_m0_burstcount;                                               // divisor_clock_s1_agent:m0_burstcount -> divisor_clock_s1_translator:uav_burstcount
	wire          divisor_clock_s1_agent_rf_source_valid;                                             // divisor_clock_s1_agent:rf_source_valid -> divisor_clock_s1_agent_rsp_fifo:in_valid
	wire  [120:0] divisor_clock_s1_agent_rf_source_data;                                              // divisor_clock_s1_agent:rf_source_data -> divisor_clock_s1_agent_rsp_fifo:in_data
	wire          divisor_clock_s1_agent_rf_source_ready;                                             // divisor_clock_s1_agent_rsp_fifo:in_ready -> divisor_clock_s1_agent:rf_source_ready
	wire          divisor_clock_s1_agent_rf_source_startofpacket;                                     // divisor_clock_s1_agent:rf_source_startofpacket -> divisor_clock_s1_agent_rsp_fifo:in_startofpacket
	wire          divisor_clock_s1_agent_rf_source_endofpacket;                                       // divisor_clock_s1_agent:rf_source_endofpacket -> divisor_clock_s1_agent_rsp_fifo:in_endofpacket
	wire          divisor_clock_s1_agent_rsp_fifo_out_valid;                                          // divisor_clock_s1_agent_rsp_fifo:out_valid -> divisor_clock_s1_agent:rf_sink_valid
	wire  [120:0] divisor_clock_s1_agent_rsp_fifo_out_data;                                           // divisor_clock_s1_agent_rsp_fifo:out_data -> divisor_clock_s1_agent:rf_sink_data
	wire          divisor_clock_s1_agent_rsp_fifo_out_ready;                                          // divisor_clock_s1_agent:rf_sink_ready -> divisor_clock_s1_agent_rsp_fifo:out_ready
	wire          divisor_clock_s1_agent_rsp_fifo_out_startofpacket;                                  // divisor_clock_s1_agent_rsp_fifo:out_startofpacket -> divisor_clock_s1_agent:rf_sink_startofpacket
	wire          divisor_clock_s1_agent_rsp_fifo_out_endofpacket;                                    // divisor_clock_s1_agent_rsp_fifo:out_endofpacket -> divisor_clock_s1_agent:rf_sink_endofpacket
	wire          divisor_clock_s1_agent_rdata_fifo_src_valid;                                        // divisor_clock_s1_agent:rdata_fifo_src_valid -> divisor_clock_s1_agent_rdata_fifo:in_valid
	wire   [33:0] divisor_clock_s1_agent_rdata_fifo_src_data;                                         // divisor_clock_s1_agent:rdata_fifo_src_data -> divisor_clock_s1_agent_rdata_fifo:in_data
	wire          divisor_clock_s1_agent_rdata_fifo_src_ready;                                        // divisor_clock_s1_agent_rdata_fifo:in_ready -> divisor_clock_s1_agent:rdata_fifo_src_ready
	wire   [31:0] reset_s1_agent_m0_readdata;                                                         // reset_s1_translator:uav_readdata -> reset_s1_agent:m0_readdata
	wire          reset_s1_agent_m0_waitrequest;                                                      // reset_s1_translator:uav_waitrequest -> reset_s1_agent:m0_waitrequest
	wire          reset_s1_agent_m0_debugaccess;                                                      // reset_s1_agent:m0_debugaccess -> reset_s1_translator:uav_debugaccess
	wire   [20:0] reset_s1_agent_m0_address;                                                          // reset_s1_agent:m0_address -> reset_s1_translator:uav_address
	wire    [3:0] reset_s1_agent_m0_byteenable;                                                       // reset_s1_agent:m0_byteenable -> reset_s1_translator:uav_byteenable
	wire          reset_s1_agent_m0_read;                                                             // reset_s1_agent:m0_read -> reset_s1_translator:uav_read
	wire          reset_s1_agent_m0_readdatavalid;                                                    // reset_s1_translator:uav_readdatavalid -> reset_s1_agent:m0_readdatavalid
	wire          reset_s1_agent_m0_lock;                                                             // reset_s1_agent:m0_lock -> reset_s1_translator:uav_lock
	wire   [31:0] reset_s1_agent_m0_writedata;                                                        // reset_s1_agent:m0_writedata -> reset_s1_translator:uav_writedata
	wire          reset_s1_agent_m0_write;                                                            // reset_s1_agent:m0_write -> reset_s1_translator:uav_write
	wire    [2:0] reset_s1_agent_m0_burstcount;                                                       // reset_s1_agent:m0_burstcount -> reset_s1_translator:uav_burstcount
	wire          reset_s1_agent_rf_source_valid;                                                     // reset_s1_agent:rf_source_valid -> reset_s1_agent_rsp_fifo:in_valid
	wire  [120:0] reset_s1_agent_rf_source_data;                                                      // reset_s1_agent:rf_source_data -> reset_s1_agent_rsp_fifo:in_data
	wire          reset_s1_agent_rf_source_ready;                                                     // reset_s1_agent_rsp_fifo:in_ready -> reset_s1_agent:rf_source_ready
	wire          reset_s1_agent_rf_source_startofpacket;                                             // reset_s1_agent:rf_source_startofpacket -> reset_s1_agent_rsp_fifo:in_startofpacket
	wire          reset_s1_agent_rf_source_endofpacket;                                               // reset_s1_agent:rf_source_endofpacket -> reset_s1_agent_rsp_fifo:in_endofpacket
	wire          reset_s1_agent_rsp_fifo_out_valid;                                                  // reset_s1_agent_rsp_fifo:out_valid -> reset_s1_agent:rf_sink_valid
	wire  [120:0] reset_s1_agent_rsp_fifo_out_data;                                                   // reset_s1_agent_rsp_fifo:out_data -> reset_s1_agent:rf_sink_data
	wire          reset_s1_agent_rsp_fifo_out_ready;                                                  // reset_s1_agent:rf_sink_ready -> reset_s1_agent_rsp_fifo:out_ready
	wire          reset_s1_agent_rsp_fifo_out_startofpacket;                                          // reset_s1_agent_rsp_fifo:out_startofpacket -> reset_s1_agent:rf_sink_startofpacket
	wire          reset_s1_agent_rsp_fifo_out_endofpacket;                                            // reset_s1_agent_rsp_fifo:out_endofpacket -> reset_s1_agent:rf_sink_endofpacket
	wire          reset_s1_agent_rdata_fifo_src_valid;                                                // reset_s1_agent:rdata_fifo_src_valid -> reset_s1_agent_rdata_fifo:in_valid
	wire   [33:0] reset_s1_agent_rdata_fifo_src_data;                                                 // reset_s1_agent:rdata_fifo_src_data -> reset_s1_agent_rdata_fifo:in_data
	wire          reset_s1_agent_rdata_fifo_src_ready;                                                // reset_s1_agent_rdata_fifo:in_ready -> reset_s1_agent:rdata_fifo_src_ready
	wire   [31:0] enable_s1_agent_m0_readdata;                                                        // enable_s1_translator:uav_readdata -> enable_s1_agent:m0_readdata
	wire          enable_s1_agent_m0_waitrequest;                                                     // enable_s1_translator:uav_waitrequest -> enable_s1_agent:m0_waitrequest
	wire          enable_s1_agent_m0_debugaccess;                                                     // enable_s1_agent:m0_debugaccess -> enable_s1_translator:uav_debugaccess
	wire   [20:0] enable_s1_agent_m0_address;                                                         // enable_s1_agent:m0_address -> enable_s1_translator:uav_address
	wire    [3:0] enable_s1_agent_m0_byteenable;                                                      // enable_s1_agent:m0_byteenable -> enable_s1_translator:uav_byteenable
	wire          enable_s1_agent_m0_read;                                                            // enable_s1_agent:m0_read -> enable_s1_translator:uav_read
	wire          enable_s1_agent_m0_readdatavalid;                                                   // enable_s1_translator:uav_readdatavalid -> enable_s1_agent:m0_readdatavalid
	wire          enable_s1_agent_m0_lock;                                                            // enable_s1_agent:m0_lock -> enable_s1_translator:uav_lock
	wire   [31:0] enable_s1_agent_m0_writedata;                                                       // enable_s1_agent:m0_writedata -> enable_s1_translator:uav_writedata
	wire          enable_s1_agent_m0_write;                                                           // enable_s1_agent:m0_write -> enable_s1_translator:uav_write
	wire    [2:0] enable_s1_agent_m0_burstcount;                                                      // enable_s1_agent:m0_burstcount -> enable_s1_translator:uav_burstcount
	wire          enable_s1_agent_rf_source_valid;                                                    // enable_s1_agent:rf_source_valid -> enable_s1_agent_rsp_fifo:in_valid
	wire  [120:0] enable_s1_agent_rf_source_data;                                                     // enable_s1_agent:rf_source_data -> enable_s1_agent_rsp_fifo:in_data
	wire          enable_s1_agent_rf_source_ready;                                                    // enable_s1_agent_rsp_fifo:in_ready -> enable_s1_agent:rf_source_ready
	wire          enable_s1_agent_rf_source_startofpacket;                                            // enable_s1_agent:rf_source_startofpacket -> enable_s1_agent_rsp_fifo:in_startofpacket
	wire          enable_s1_agent_rf_source_endofpacket;                                              // enable_s1_agent:rf_source_endofpacket -> enable_s1_agent_rsp_fifo:in_endofpacket
	wire          enable_s1_agent_rsp_fifo_out_valid;                                                 // enable_s1_agent_rsp_fifo:out_valid -> enable_s1_agent:rf_sink_valid
	wire  [120:0] enable_s1_agent_rsp_fifo_out_data;                                                  // enable_s1_agent_rsp_fifo:out_data -> enable_s1_agent:rf_sink_data
	wire          enable_s1_agent_rsp_fifo_out_ready;                                                 // enable_s1_agent:rf_sink_ready -> enable_s1_agent_rsp_fifo:out_ready
	wire          enable_s1_agent_rsp_fifo_out_startofpacket;                                         // enable_s1_agent_rsp_fifo:out_startofpacket -> enable_s1_agent:rf_sink_startofpacket
	wire          enable_s1_agent_rsp_fifo_out_endofpacket;                                           // enable_s1_agent_rsp_fifo:out_endofpacket -> enable_s1_agent:rf_sink_endofpacket
	wire          enable_s1_agent_rdata_fifo_src_valid;                                               // enable_s1_agent:rdata_fifo_src_valid -> enable_s1_agent_rdata_fifo:in_valid
	wire   [33:0] enable_s1_agent_rdata_fifo_src_data;                                                // enable_s1_agent:rdata_fifo_src_data -> enable_s1_agent_rdata_fifo:in_data
	wire          enable_s1_agent_rdata_fifo_src_ready;                                               // enable_s1_agent_rdata_fifo:in_ready -> enable_s1_agent:rdata_fifo_src_ready
	wire   [31:0] finalizacion_s1_agent_m0_readdata;                                                  // finalizacion_s1_translator:uav_readdata -> finalizacion_s1_agent:m0_readdata
	wire          finalizacion_s1_agent_m0_waitrequest;                                               // finalizacion_s1_translator:uav_waitrequest -> finalizacion_s1_agent:m0_waitrequest
	wire          finalizacion_s1_agent_m0_debugaccess;                                               // finalizacion_s1_agent:m0_debugaccess -> finalizacion_s1_translator:uav_debugaccess
	wire   [20:0] finalizacion_s1_agent_m0_address;                                                   // finalizacion_s1_agent:m0_address -> finalizacion_s1_translator:uav_address
	wire    [3:0] finalizacion_s1_agent_m0_byteenable;                                                // finalizacion_s1_agent:m0_byteenable -> finalizacion_s1_translator:uav_byteenable
	wire          finalizacion_s1_agent_m0_read;                                                      // finalizacion_s1_agent:m0_read -> finalizacion_s1_translator:uav_read
	wire          finalizacion_s1_agent_m0_readdatavalid;                                             // finalizacion_s1_translator:uav_readdatavalid -> finalizacion_s1_agent:m0_readdatavalid
	wire          finalizacion_s1_agent_m0_lock;                                                      // finalizacion_s1_agent:m0_lock -> finalizacion_s1_translator:uav_lock
	wire   [31:0] finalizacion_s1_agent_m0_writedata;                                                 // finalizacion_s1_agent:m0_writedata -> finalizacion_s1_translator:uav_writedata
	wire          finalizacion_s1_agent_m0_write;                                                     // finalizacion_s1_agent:m0_write -> finalizacion_s1_translator:uav_write
	wire    [2:0] finalizacion_s1_agent_m0_burstcount;                                                // finalizacion_s1_agent:m0_burstcount -> finalizacion_s1_translator:uav_burstcount
	wire          finalizacion_s1_agent_rf_source_valid;                                              // finalizacion_s1_agent:rf_source_valid -> finalizacion_s1_agent_rsp_fifo:in_valid
	wire  [120:0] finalizacion_s1_agent_rf_source_data;                                               // finalizacion_s1_agent:rf_source_data -> finalizacion_s1_agent_rsp_fifo:in_data
	wire          finalizacion_s1_agent_rf_source_ready;                                              // finalizacion_s1_agent_rsp_fifo:in_ready -> finalizacion_s1_agent:rf_source_ready
	wire          finalizacion_s1_agent_rf_source_startofpacket;                                      // finalizacion_s1_agent:rf_source_startofpacket -> finalizacion_s1_agent_rsp_fifo:in_startofpacket
	wire          finalizacion_s1_agent_rf_source_endofpacket;                                        // finalizacion_s1_agent:rf_source_endofpacket -> finalizacion_s1_agent_rsp_fifo:in_endofpacket
	wire          finalizacion_s1_agent_rsp_fifo_out_valid;                                           // finalizacion_s1_agent_rsp_fifo:out_valid -> finalizacion_s1_agent:rf_sink_valid
	wire  [120:0] finalizacion_s1_agent_rsp_fifo_out_data;                                            // finalizacion_s1_agent_rsp_fifo:out_data -> finalizacion_s1_agent:rf_sink_data
	wire          finalizacion_s1_agent_rsp_fifo_out_ready;                                           // finalizacion_s1_agent:rf_sink_ready -> finalizacion_s1_agent_rsp_fifo:out_ready
	wire          finalizacion_s1_agent_rsp_fifo_out_startofpacket;                                   // finalizacion_s1_agent_rsp_fifo:out_startofpacket -> finalizacion_s1_agent:rf_sink_startofpacket
	wire          finalizacion_s1_agent_rsp_fifo_out_endofpacket;                                     // finalizacion_s1_agent_rsp_fifo:out_endofpacket -> finalizacion_s1_agent:rf_sink_endofpacket
	wire          finalizacion_s1_agent_rdata_fifo_src_valid;                                         // finalizacion_s1_agent:rdata_fifo_src_valid -> finalizacion_s1_agent_rdata_fifo:in_valid
	wire   [33:0] finalizacion_s1_agent_rdata_fifo_src_data;                                          // finalizacion_s1_agent:rdata_fifo_src_data -> finalizacion_s1_agent_rdata_fifo:in_data
	wire          finalizacion_s1_agent_rdata_fifo_src_ready;                                         // finalizacion_s1_agent_rdata_fifo:in_ready -> finalizacion_s1_agent:rdata_fifo_src_ready
	wire   [31:0] result0_64_bit_up_s1_agent_m0_readdata;                                             // result0_64_bit_up_s1_translator:uav_readdata -> result0_64_bit_up_s1_agent:m0_readdata
	wire          result0_64_bit_up_s1_agent_m0_waitrequest;                                          // result0_64_bit_up_s1_translator:uav_waitrequest -> result0_64_bit_up_s1_agent:m0_waitrequest
	wire          result0_64_bit_up_s1_agent_m0_debugaccess;                                          // result0_64_bit_up_s1_agent:m0_debugaccess -> result0_64_bit_up_s1_translator:uav_debugaccess
	wire   [20:0] result0_64_bit_up_s1_agent_m0_address;                                              // result0_64_bit_up_s1_agent:m0_address -> result0_64_bit_up_s1_translator:uav_address
	wire    [3:0] result0_64_bit_up_s1_agent_m0_byteenable;                                           // result0_64_bit_up_s1_agent:m0_byteenable -> result0_64_bit_up_s1_translator:uav_byteenable
	wire          result0_64_bit_up_s1_agent_m0_read;                                                 // result0_64_bit_up_s1_agent:m0_read -> result0_64_bit_up_s1_translator:uav_read
	wire          result0_64_bit_up_s1_agent_m0_readdatavalid;                                        // result0_64_bit_up_s1_translator:uav_readdatavalid -> result0_64_bit_up_s1_agent:m0_readdatavalid
	wire          result0_64_bit_up_s1_agent_m0_lock;                                                 // result0_64_bit_up_s1_agent:m0_lock -> result0_64_bit_up_s1_translator:uav_lock
	wire   [31:0] result0_64_bit_up_s1_agent_m0_writedata;                                            // result0_64_bit_up_s1_agent:m0_writedata -> result0_64_bit_up_s1_translator:uav_writedata
	wire          result0_64_bit_up_s1_agent_m0_write;                                                // result0_64_bit_up_s1_agent:m0_write -> result0_64_bit_up_s1_translator:uav_write
	wire    [2:0] result0_64_bit_up_s1_agent_m0_burstcount;                                           // result0_64_bit_up_s1_agent:m0_burstcount -> result0_64_bit_up_s1_translator:uav_burstcount
	wire          result0_64_bit_up_s1_agent_rf_source_valid;                                         // result0_64_bit_up_s1_agent:rf_source_valid -> result0_64_bit_up_s1_agent_rsp_fifo:in_valid
	wire  [120:0] result0_64_bit_up_s1_agent_rf_source_data;                                          // result0_64_bit_up_s1_agent:rf_source_data -> result0_64_bit_up_s1_agent_rsp_fifo:in_data
	wire          result0_64_bit_up_s1_agent_rf_source_ready;                                         // result0_64_bit_up_s1_agent_rsp_fifo:in_ready -> result0_64_bit_up_s1_agent:rf_source_ready
	wire          result0_64_bit_up_s1_agent_rf_source_startofpacket;                                 // result0_64_bit_up_s1_agent:rf_source_startofpacket -> result0_64_bit_up_s1_agent_rsp_fifo:in_startofpacket
	wire          result0_64_bit_up_s1_agent_rf_source_endofpacket;                                   // result0_64_bit_up_s1_agent:rf_source_endofpacket -> result0_64_bit_up_s1_agent_rsp_fifo:in_endofpacket
	wire          result0_64_bit_up_s1_agent_rsp_fifo_out_valid;                                      // result0_64_bit_up_s1_agent_rsp_fifo:out_valid -> result0_64_bit_up_s1_agent:rf_sink_valid
	wire  [120:0] result0_64_bit_up_s1_agent_rsp_fifo_out_data;                                       // result0_64_bit_up_s1_agent_rsp_fifo:out_data -> result0_64_bit_up_s1_agent:rf_sink_data
	wire          result0_64_bit_up_s1_agent_rsp_fifo_out_ready;                                      // result0_64_bit_up_s1_agent:rf_sink_ready -> result0_64_bit_up_s1_agent_rsp_fifo:out_ready
	wire          result0_64_bit_up_s1_agent_rsp_fifo_out_startofpacket;                              // result0_64_bit_up_s1_agent_rsp_fifo:out_startofpacket -> result0_64_bit_up_s1_agent:rf_sink_startofpacket
	wire          result0_64_bit_up_s1_agent_rsp_fifo_out_endofpacket;                                // result0_64_bit_up_s1_agent_rsp_fifo:out_endofpacket -> result0_64_bit_up_s1_agent:rf_sink_endofpacket
	wire          result0_64_bit_up_s1_agent_rdata_fifo_src_valid;                                    // result0_64_bit_up_s1_agent:rdata_fifo_src_valid -> result0_64_bit_up_s1_agent_rdata_fifo:in_valid
	wire   [33:0] result0_64_bit_up_s1_agent_rdata_fifo_src_data;                                     // result0_64_bit_up_s1_agent:rdata_fifo_src_data -> result0_64_bit_up_s1_agent_rdata_fifo:in_data
	wire          result0_64_bit_up_s1_agent_rdata_fifo_src_ready;                                    // result0_64_bit_up_s1_agent_rdata_fifo:in_ready -> result0_64_bit_up_s1_agent:rdata_fifo_src_ready
	wire   [31:0] result0_64_bit_down_s1_agent_m0_readdata;                                           // result0_64_bit_down_s1_translator:uav_readdata -> result0_64_bit_down_s1_agent:m0_readdata
	wire          result0_64_bit_down_s1_agent_m0_waitrequest;                                        // result0_64_bit_down_s1_translator:uav_waitrequest -> result0_64_bit_down_s1_agent:m0_waitrequest
	wire          result0_64_bit_down_s1_agent_m0_debugaccess;                                        // result0_64_bit_down_s1_agent:m0_debugaccess -> result0_64_bit_down_s1_translator:uav_debugaccess
	wire   [20:0] result0_64_bit_down_s1_agent_m0_address;                                            // result0_64_bit_down_s1_agent:m0_address -> result0_64_bit_down_s1_translator:uav_address
	wire    [3:0] result0_64_bit_down_s1_agent_m0_byteenable;                                         // result0_64_bit_down_s1_agent:m0_byteenable -> result0_64_bit_down_s1_translator:uav_byteenable
	wire          result0_64_bit_down_s1_agent_m0_read;                                               // result0_64_bit_down_s1_agent:m0_read -> result0_64_bit_down_s1_translator:uav_read
	wire          result0_64_bit_down_s1_agent_m0_readdatavalid;                                      // result0_64_bit_down_s1_translator:uav_readdatavalid -> result0_64_bit_down_s1_agent:m0_readdatavalid
	wire          result0_64_bit_down_s1_agent_m0_lock;                                               // result0_64_bit_down_s1_agent:m0_lock -> result0_64_bit_down_s1_translator:uav_lock
	wire   [31:0] result0_64_bit_down_s1_agent_m0_writedata;                                          // result0_64_bit_down_s1_agent:m0_writedata -> result0_64_bit_down_s1_translator:uav_writedata
	wire          result0_64_bit_down_s1_agent_m0_write;                                              // result0_64_bit_down_s1_agent:m0_write -> result0_64_bit_down_s1_translator:uav_write
	wire    [2:0] result0_64_bit_down_s1_agent_m0_burstcount;                                         // result0_64_bit_down_s1_agent:m0_burstcount -> result0_64_bit_down_s1_translator:uav_burstcount
	wire          result0_64_bit_down_s1_agent_rf_source_valid;                                       // result0_64_bit_down_s1_agent:rf_source_valid -> result0_64_bit_down_s1_agent_rsp_fifo:in_valid
	wire  [120:0] result0_64_bit_down_s1_agent_rf_source_data;                                        // result0_64_bit_down_s1_agent:rf_source_data -> result0_64_bit_down_s1_agent_rsp_fifo:in_data
	wire          result0_64_bit_down_s1_agent_rf_source_ready;                                       // result0_64_bit_down_s1_agent_rsp_fifo:in_ready -> result0_64_bit_down_s1_agent:rf_source_ready
	wire          result0_64_bit_down_s1_agent_rf_source_startofpacket;                               // result0_64_bit_down_s1_agent:rf_source_startofpacket -> result0_64_bit_down_s1_agent_rsp_fifo:in_startofpacket
	wire          result0_64_bit_down_s1_agent_rf_source_endofpacket;                                 // result0_64_bit_down_s1_agent:rf_source_endofpacket -> result0_64_bit_down_s1_agent_rsp_fifo:in_endofpacket
	wire          result0_64_bit_down_s1_agent_rsp_fifo_out_valid;                                    // result0_64_bit_down_s1_agent_rsp_fifo:out_valid -> result0_64_bit_down_s1_agent:rf_sink_valid
	wire  [120:0] result0_64_bit_down_s1_agent_rsp_fifo_out_data;                                     // result0_64_bit_down_s1_agent_rsp_fifo:out_data -> result0_64_bit_down_s1_agent:rf_sink_data
	wire          result0_64_bit_down_s1_agent_rsp_fifo_out_ready;                                    // result0_64_bit_down_s1_agent:rf_sink_ready -> result0_64_bit_down_s1_agent_rsp_fifo:out_ready
	wire          result0_64_bit_down_s1_agent_rsp_fifo_out_startofpacket;                            // result0_64_bit_down_s1_agent_rsp_fifo:out_startofpacket -> result0_64_bit_down_s1_agent:rf_sink_startofpacket
	wire          result0_64_bit_down_s1_agent_rsp_fifo_out_endofpacket;                              // result0_64_bit_down_s1_agent_rsp_fifo:out_endofpacket -> result0_64_bit_down_s1_agent:rf_sink_endofpacket
	wire          result0_64_bit_down_s1_agent_rdata_fifo_src_valid;                                  // result0_64_bit_down_s1_agent:rdata_fifo_src_valid -> result0_64_bit_down_s1_agent_rdata_fifo:in_valid
	wire   [33:0] result0_64_bit_down_s1_agent_rdata_fifo_src_data;                                   // result0_64_bit_down_s1_agent:rdata_fifo_src_data -> result0_64_bit_down_s1_agent_rdata_fifo:in_data
	wire          result0_64_bit_down_s1_agent_rdata_fifo_src_ready;                                  // result0_64_bit_down_s1_agent_rdata_fifo:in_ready -> result0_64_bit_down_s1_agent:rdata_fifo_src_ready
	wire   [31:0] result1_64_bit_up_s1_agent_m0_readdata;                                             // result1_64_bit_up_s1_translator:uav_readdata -> result1_64_bit_up_s1_agent:m0_readdata
	wire          result1_64_bit_up_s1_agent_m0_waitrequest;                                          // result1_64_bit_up_s1_translator:uav_waitrequest -> result1_64_bit_up_s1_agent:m0_waitrequest
	wire          result1_64_bit_up_s1_agent_m0_debugaccess;                                          // result1_64_bit_up_s1_agent:m0_debugaccess -> result1_64_bit_up_s1_translator:uav_debugaccess
	wire   [20:0] result1_64_bit_up_s1_agent_m0_address;                                              // result1_64_bit_up_s1_agent:m0_address -> result1_64_bit_up_s1_translator:uav_address
	wire    [3:0] result1_64_bit_up_s1_agent_m0_byteenable;                                           // result1_64_bit_up_s1_agent:m0_byteenable -> result1_64_bit_up_s1_translator:uav_byteenable
	wire          result1_64_bit_up_s1_agent_m0_read;                                                 // result1_64_bit_up_s1_agent:m0_read -> result1_64_bit_up_s1_translator:uav_read
	wire          result1_64_bit_up_s1_agent_m0_readdatavalid;                                        // result1_64_bit_up_s1_translator:uav_readdatavalid -> result1_64_bit_up_s1_agent:m0_readdatavalid
	wire          result1_64_bit_up_s1_agent_m0_lock;                                                 // result1_64_bit_up_s1_agent:m0_lock -> result1_64_bit_up_s1_translator:uav_lock
	wire   [31:0] result1_64_bit_up_s1_agent_m0_writedata;                                            // result1_64_bit_up_s1_agent:m0_writedata -> result1_64_bit_up_s1_translator:uav_writedata
	wire          result1_64_bit_up_s1_agent_m0_write;                                                // result1_64_bit_up_s1_agent:m0_write -> result1_64_bit_up_s1_translator:uav_write
	wire    [2:0] result1_64_bit_up_s1_agent_m0_burstcount;                                           // result1_64_bit_up_s1_agent:m0_burstcount -> result1_64_bit_up_s1_translator:uav_burstcount
	wire          result1_64_bit_up_s1_agent_rf_source_valid;                                         // result1_64_bit_up_s1_agent:rf_source_valid -> result1_64_bit_up_s1_agent_rsp_fifo:in_valid
	wire  [120:0] result1_64_bit_up_s1_agent_rf_source_data;                                          // result1_64_bit_up_s1_agent:rf_source_data -> result1_64_bit_up_s1_agent_rsp_fifo:in_data
	wire          result1_64_bit_up_s1_agent_rf_source_ready;                                         // result1_64_bit_up_s1_agent_rsp_fifo:in_ready -> result1_64_bit_up_s1_agent:rf_source_ready
	wire          result1_64_bit_up_s1_agent_rf_source_startofpacket;                                 // result1_64_bit_up_s1_agent:rf_source_startofpacket -> result1_64_bit_up_s1_agent_rsp_fifo:in_startofpacket
	wire          result1_64_bit_up_s1_agent_rf_source_endofpacket;                                   // result1_64_bit_up_s1_agent:rf_source_endofpacket -> result1_64_bit_up_s1_agent_rsp_fifo:in_endofpacket
	wire          result1_64_bit_up_s1_agent_rsp_fifo_out_valid;                                      // result1_64_bit_up_s1_agent_rsp_fifo:out_valid -> result1_64_bit_up_s1_agent:rf_sink_valid
	wire  [120:0] result1_64_bit_up_s1_agent_rsp_fifo_out_data;                                       // result1_64_bit_up_s1_agent_rsp_fifo:out_data -> result1_64_bit_up_s1_agent:rf_sink_data
	wire          result1_64_bit_up_s1_agent_rsp_fifo_out_ready;                                      // result1_64_bit_up_s1_agent:rf_sink_ready -> result1_64_bit_up_s1_agent_rsp_fifo:out_ready
	wire          result1_64_bit_up_s1_agent_rsp_fifo_out_startofpacket;                              // result1_64_bit_up_s1_agent_rsp_fifo:out_startofpacket -> result1_64_bit_up_s1_agent:rf_sink_startofpacket
	wire          result1_64_bit_up_s1_agent_rsp_fifo_out_endofpacket;                                // result1_64_bit_up_s1_agent_rsp_fifo:out_endofpacket -> result1_64_bit_up_s1_agent:rf_sink_endofpacket
	wire          result1_64_bit_up_s1_agent_rdata_fifo_src_valid;                                    // result1_64_bit_up_s1_agent:rdata_fifo_src_valid -> result1_64_bit_up_s1_agent_rdata_fifo:in_valid
	wire   [33:0] result1_64_bit_up_s1_agent_rdata_fifo_src_data;                                     // result1_64_bit_up_s1_agent:rdata_fifo_src_data -> result1_64_bit_up_s1_agent_rdata_fifo:in_data
	wire          result1_64_bit_up_s1_agent_rdata_fifo_src_ready;                                    // result1_64_bit_up_s1_agent_rdata_fifo:in_ready -> result1_64_bit_up_s1_agent:rdata_fifo_src_ready
	wire   [31:0] result1_64_bit_down_s1_agent_m0_readdata;                                           // result1_64_bit_down_s1_translator:uav_readdata -> result1_64_bit_down_s1_agent:m0_readdata
	wire          result1_64_bit_down_s1_agent_m0_waitrequest;                                        // result1_64_bit_down_s1_translator:uav_waitrequest -> result1_64_bit_down_s1_agent:m0_waitrequest
	wire          result1_64_bit_down_s1_agent_m0_debugaccess;                                        // result1_64_bit_down_s1_agent:m0_debugaccess -> result1_64_bit_down_s1_translator:uav_debugaccess
	wire   [20:0] result1_64_bit_down_s1_agent_m0_address;                                            // result1_64_bit_down_s1_agent:m0_address -> result1_64_bit_down_s1_translator:uav_address
	wire    [3:0] result1_64_bit_down_s1_agent_m0_byteenable;                                         // result1_64_bit_down_s1_agent:m0_byteenable -> result1_64_bit_down_s1_translator:uav_byteenable
	wire          result1_64_bit_down_s1_agent_m0_read;                                               // result1_64_bit_down_s1_agent:m0_read -> result1_64_bit_down_s1_translator:uav_read
	wire          result1_64_bit_down_s1_agent_m0_readdatavalid;                                      // result1_64_bit_down_s1_translator:uav_readdatavalid -> result1_64_bit_down_s1_agent:m0_readdatavalid
	wire          result1_64_bit_down_s1_agent_m0_lock;                                               // result1_64_bit_down_s1_agent:m0_lock -> result1_64_bit_down_s1_translator:uav_lock
	wire   [31:0] result1_64_bit_down_s1_agent_m0_writedata;                                          // result1_64_bit_down_s1_agent:m0_writedata -> result1_64_bit_down_s1_translator:uav_writedata
	wire          result1_64_bit_down_s1_agent_m0_write;                                              // result1_64_bit_down_s1_agent:m0_write -> result1_64_bit_down_s1_translator:uav_write
	wire    [2:0] result1_64_bit_down_s1_agent_m0_burstcount;                                         // result1_64_bit_down_s1_agent:m0_burstcount -> result1_64_bit_down_s1_translator:uav_burstcount
	wire          result1_64_bit_down_s1_agent_rf_source_valid;                                       // result1_64_bit_down_s1_agent:rf_source_valid -> result1_64_bit_down_s1_agent_rsp_fifo:in_valid
	wire  [120:0] result1_64_bit_down_s1_agent_rf_source_data;                                        // result1_64_bit_down_s1_agent:rf_source_data -> result1_64_bit_down_s1_agent_rsp_fifo:in_data
	wire          result1_64_bit_down_s1_agent_rf_source_ready;                                       // result1_64_bit_down_s1_agent_rsp_fifo:in_ready -> result1_64_bit_down_s1_agent:rf_source_ready
	wire          result1_64_bit_down_s1_agent_rf_source_startofpacket;                               // result1_64_bit_down_s1_agent:rf_source_startofpacket -> result1_64_bit_down_s1_agent_rsp_fifo:in_startofpacket
	wire          result1_64_bit_down_s1_agent_rf_source_endofpacket;                                 // result1_64_bit_down_s1_agent:rf_source_endofpacket -> result1_64_bit_down_s1_agent_rsp_fifo:in_endofpacket
	wire          result1_64_bit_down_s1_agent_rsp_fifo_out_valid;                                    // result1_64_bit_down_s1_agent_rsp_fifo:out_valid -> result1_64_bit_down_s1_agent:rf_sink_valid
	wire  [120:0] result1_64_bit_down_s1_agent_rsp_fifo_out_data;                                     // result1_64_bit_down_s1_agent_rsp_fifo:out_data -> result1_64_bit_down_s1_agent:rf_sink_data
	wire          result1_64_bit_down_s1_agent_rsp_fifo_out_ready;                                    // result1_64_bit_down_s1_agent:rf_sink_ready -> result1_64_bit_down_s1_agent_rsp_fifo:out_ready
	wire          result1_64_bit_down_s1_agent_rsp_fifo_out_startofpacket;                            // result1_64_bit_down_s1_agent_rsp_fifo:out_startofpacket -> result1_64_bit_down_s1_agent:rf_sink_startofpacket
	wire          result1_64_bit_down_s1_agent_rsp_fifo_out_endofpacket;                              // result1_64_bit_down_s1_agent_rsp_fifo:out_endofpacket -> result1_64_bit_down_s1_agent:rf_sink_endofpacket
	wire          result1_64_bit_down_s1_agent_rdata_fifo_src_valid;                                  // result1_64_bit_down_s1_agent:rdata_fifo_src_valid -> result1_64_bit_down_s1_agent_rdata_fifo:in_valid
	wire   [33:0] result1_64_bit_down_s1_agent_rdata_fifo_src_data;                                   // result1_64_bit_down_s1_agent:rdata_fifo_src_data -> result1_64_bit_down_s1_agent_rdata_fifo:in_data
	wire          result1_64_bit_down_s1_agent_rdata_fifo_src_ready;                                  // result1_64_bit_down_s1_agent_rdata_fifo:in_ready -> result1_64_bit_down_s1_agent:rdata_fifo_src_ready
	wire   [31:0] result0_32_bit_s1_agent_m0_readdata;                                                // result0_32_bit_s1_translator:uav_readdata -> result0_32_bit_s1_agent:m0_readdata
	wire          result0_32_bit_s1_agent_m0_waitrequest;                                             // result0_32_bit_s1_translator:uav_waitrequest -> result0_32_bit_s1_agent:m0_waitrequest
	wire          result0_32_bit_s1_agent_m0_debugaccess;                                             // result0_32_bit_s1_agent:m0_debugaccess -> result0_32_bit_s1_translator:uav_debugaccess
	wire   [20:0] result0_32_bit_s1_agent_m0_address;                                                 // result0_32_bit_s1_agent:m0_address -> result0_32_bit_s1_translator:uav_address
	wire    [3:0] result0_32_bit_s1_agent_m0_byteenable;                                              // result0_32_bit_s1_agent:m0_byteenable -> result0_32_bit_s1_translator:uav_byteenable
	wire          result0_32_bit_s1_agent_m0_read;                                                    // result0_32_bit_s1_agent:m0_read -> result0_32_bit_s1_translator:uav_read
	wire          result0_32_bit_s1_agent_m0_readdatavalid;                                           // result0_32_bit_s1_translator:uav_readdatavalid -> result0_32_bit_s1_agent:m0_readdatavalid
	wire          result0_32_bit_s1_agent_m0_lock;                                                    // result0_32_bit_s1_agent:m0_lock -> result0_32_bit_s1_translator:uav_lock
	wire   [31:0] result0_32_bit_s1_agent_m0_writedata;                                               // result0_32_bit_s1_agent:m0_writedata -> result0_32_bit_s1_translator:uav_writedata
	wire          result0_32_bit_s1_agent_m0_write;                                                   // result0_32_bit_s1_agent:m0_write -> result0_32_bit_s1_translator:uav_write
	wire    [2:0] result0_32_bit_s1_agent_m0_burstcount;                                              // result0_32_bit_s1_agent:m0_burstcount -> result0_32_bit_s1_translator:uav_burstcount
	wire          result0_32_bit_s1_agent_rf_source_valid;                                            // result0_32_bit_s1_agent:rf_source_valid -> result0_32_bit_s1_agent_rsp_fifo:in_valid
	wire  [120:0] result0_32_bit_s1_agent_rf_source_data;                                             // result0_32_bit_s1_agent:rf_source_data -> result0_32_bit_s1_agent_rsp_fifo:in_data
	wire          result0_32_bit_s1_agent_rf_source_ready;                                            // result0_32_bit_s1_agent_rsp_fifo:in_ready -> result0_32_bit_s1_agent:rf_source_ready
	wire          result0_32_bit_s1_agent_rf_source_startofpacket;                                    // result0_32_bit_s1_agent:rf_source_startofpacket -> result0_32_bit_s1_agent_rsp_fifo:in_startofpacket
	wire          result0_32_bit_s1_agent_rf_source_endofpacket;                                      // result0_32_bit_s1_agent:rf_source_endofpacket -> result0_32_bit_s1_agent_rsp_fifo:in_endofpacket
	wire          result0_32_bit_s1_agent_rsp_fifo_out_valid;                                         // result0_32_bit_s1_agent_rsp_fifo:out_valid -> result0_32_bit_s1_agent:rf_sink_valid
	wire  [120:0] result0_32_bit_s1_agent_rsp_fifo_out_data;                                          // result0_32_bit_s1_agent_rsp_fifo:out_data -> result0_32_bit_s1_agent:rf_sink_data
	wire          result0_32_bit_s1_agent_rsp_fifo_out_ready;                                         // result0_32_bit_s1_agent:rf_sink_ready -> result0_32_bit_s1_agent_rsp_fifo:out_ready
	wire          result0_32_bit_s1_agent_rsp_fifo_out_startofpacket;                                 // result0_32_bit_s1_agent_rsp_fifo:out_startofpacket -> result0_32_bit_s1_agent:rf_sink_startofpacket
	wire          result0_32_bit_s1_agent_rsp_fifo_out_endofpacket;                                   // result0_32_bit_s1_agent_rsp_fifo:out_endofpacket -> result0_32_bit_s1_agent:rf_sink_endofpacket
	wire          result0_32_bit_s1_agent_rdata_fifo_src_valid;                                       // result0_32_bit_s1_agent:rdata_fifo_src_valid -> result0_32_bit_s1_agent_rdata_fifo:in_valid
	wire   [33:0] result0_32_bit_s1_agent_rdata_fifo_src_data;                                        // result0_32_bit_s1_agent:rdata_fifo_src_data -> result0_32_bit_s1_agent_rdata_fifo:in_data
	wire          result0_32_bit_s1_agent_rdata_fifo_src_ready;                                       // result0_32_bit_s1_agent_rdata_fifo:in_ready -> result0_32_bit_s1_agent:rdata_fifo_src_ready
	wire   [31:0] result1_32_bit_s1_agent_m0_readdata;                                                // result1_32_bit_s1_translator:uav_readdata -> result1_32_bit_s1_agent:m0_readdata
	wire          result1_32_bit_s1_agent_m0_waitrequest;                                             // result1_32_bit_s1_translator:uav_waitrequest -> result1_32_bit_s1_agent:m0_waitrequest
	wire          result1_32_bit_s1_agent_m0_debugaccess;                                             // result1_32_bit_s1_agent:m0_debugaccess -> result1_32_bit_s1_translator:uav_debugaccess
	wire   [20:0] result1_32_bit_s1_agent_m0_address;                                                 // result1_32_bit_s1_agent:m0_address -> result1_32_bit_s1_translator:uav_address
	wire    [3:0] result1_32_bit_s1_agent_m0_byteenable;                                              // result1_32_bit_s1_agent:m0_byteenable -> result1_32_bit_s1_translator:uav_byteenable
	wire          result1_32_bit_s1_agent_m0_read;                                                    // result1_32_bit_s1_agent:m0_read -> result1_32_bit_s1_translator:uav_read
	wire          result1_32_bit_s1_agent_m0_readdatavalid;                                           // result1_32_bit_s1_translator:uav_readdatavalid -> result1_32_bit_s1_agent:m0_readdatavalid
	wire          result1_32_bit_s1_agent_m0_lock;                                                    // result1_32_bit_s1_agent:m0_lock -> result1_32_bit_s1_translator:uav_lock
	wire   [31:0] result1_32_bit_s1_agent_m0_writedata;                                               // result1_32_bit_s1_agent:m0_writedata -> result1_32_bit_s1_translator:uav_writedata
	wire          result1_32_bit_s1_agent_m0_write;                                                   // result1_32_bit_s1_agent:m0_write -> result1_32_bit_s1_translator:uav_write
	wire    [2:0] result1_32_bit_s1_agent_m0_burstcount;                                              // result1_32_bit_s1_agent:m0_burstcount -> result1_32_bit_s1_translator:uav_burstcount
	wire          result1_32_bit_s1_agent_rf_source_valid;                                            // result1_32_bit_s1_agent:rf_source_valid -> result1_32_bit_s1_agent_rsp_fifo:in_valid
	wire  [120:0] result1_32_bit_s1_agent_rf_source_data;                                             // result1_32_bit_s1_agent:rf_source_data -> result1_32_bit_s1_agent_rsp_fifo:in_data
	wire          result1_32_bit_s1_agent_rf_source_ready;                                            // result1_32_bit_s1_agent_rsp_fifo:in_ready -> result1_32_bit_s1_agent:rf_source_ready
	wire          result1_32_bit_s1_agent_rf_source_startofpacket;                                    // result1_32_bit_s1_agent:rf_source_startofpacket -> result1_32_bit_s1_agent_rsp_fifo:in_startofpacket
	wire          result1_32_bit_s1_agent_rf_source_endofpacket;                                      // result1_32_bit_s1_agent:rf_source_endofpacket -> result1_32_bit_s1_agent_rsp_fifo:in_endofpacket
	wire          result1_32_bit_s1_agent_rsp_fifo_out_valid;                                         // result1_32_bit_s1_agent_rsp_fifo:out_valid -> result1_32_bit_s1_agent:rf_sink_valid
	wire  [120:0] result1_32_bit_s1_agent_rsp_fifo_out_data;                                          // result1_32_bit_s1_agent_rsp_fifo:out_data -> result1_32_bit_s1_agent:rf_sink_data
	wire          result1_32_bit_s1_agent_rsp_fifo_out_ready;                                         // result1_32_bit_s1_agent:rf_sink_ready -> result1_32_bit_s1_agent_rsp_fifo:out_ready
	wire          result1_32_bit_s1_agent_rsp_fifo_out_startofpacket;                                 // result1_32_bit_s1_agent_rsp_fifo:out_startofpacket -> result1_32_bit_s1_agent:rf_sink_startofpacket
	wire          result1_32_bit_s1_agent_rsp_fifo_out_endofpacket;                                   // result1_32_bit_s1_agent_rsp_fifo:out_endofpacket -> result1_32_bit_s1_agent:rf_sink_endofpacket
	wire          result1_32_bit_s1_agent_rdata_fifo_src_valid;                                       // result1_32_bit_s1_agent:rdata_fifo_src_valid -> result1_32_bit_s1_agent_rdata_fifo:in_valid
	wire   [33:0] result1_32_bit_s1_agent_rdata_fifo_src_data;                                        // result1_32_bit_s1_agent:rdata_fifo_src_data -> result1_32_bit_s1_agent_rdata_fifo:in_data
	wire          result1_32_bit_s1_agent_rdata_fifo_src_ready;                                       // result1_32_bit_s1_agent_rdata_fifo:in_ready -> result1_32_bit_s1_agent:rdata_fifo_src_ready
	wire          nios2_gen2_0_data_master_agent_cp_valid;                                            // nios2_gen2_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [119:0] nios2_gen2_0_data_master_agent_cp_data;                                             // nios2_gen2_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_gen2_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	wire          nios2_gen2_0_data_master_agent_cp_startofpacket;                                    // nios2_gen2_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_gen2_0_data_master_agent_cp_endofpacket;                                      // nios2_gen2_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [119:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire   [23:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                       // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router_001:sink_valid
	wire  [119:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                        // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                       // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                               // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                                 // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router_001:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                        // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_002:sink_valid
	wire  [119:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                         // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_002:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                        // router_002:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                                // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_002:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                                  // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_002:sink_endofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_valid;                                     // nios2_gen2_0_instruction_master_agent:cp_valid -> router_003:sink_valid
	wire  [119:0] nios2_gen2_0_instruction_master_agent_cp_data;                                      // nios2_gen2_0_instruction_master_agent:cp_data -> router_003:sink_data
	wire          nios2_gen2_0_instruction_master_agent_cp_ready;                                     // router_003:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	wire          nios2_gen2_0_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [119:0] router_003_src_data;                                                                // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                               // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [23:0] router_003_src_channel;                                                             // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_004:sink_valid
	wire  [119:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_004:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                       // router_004:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux:sink_valid
	wire  [119:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                               // rsp_demux:sink_ready -> router_004:src_ready
	wire   [23:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_0_debug_mem_slave_agent:rp_valid -> router_005:sink_valid
	wire  [119:0] nios2_gen2_0_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_0_debug_mem_slave_agent:rp_data -> router_005:sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_ready;                                        // router_005:sink_ready -> nios2_gen2_0_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_0_debug_mem_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_0_debug_mem_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [119:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                               // rsp_demux_001:sink_ready -> router_005:src_ready
	wire   [23:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rp_valid;                                  // pll_reconfigurar_mgmt_avalon_slave_agent:rp_valid -> router_006:sink_valid
	wire  [119:0] pll_reconfigurar_mgmt_avalon_slave_agent_rp_data;                                   // pll_reconfigurar_mgmt_avalon_slave_agent:rp_data -> router_006:sink_data
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rp_ready;                                  // router_006:sink_ready -> pll_reconfigurar_mgmt_avalon_slave_agent:rp_ready
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rp_startofpacket;                          // pll_reconfigurar_mgmt_avalon_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rp_endofpacket;                            // pll_reconfigurar_mgmt_avalon_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [119:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                                               // rsp_demux_002:sink_ready -> router_006:src_ready
	wire   [23:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          fifo0_64_bit_up_out_agent_rp_valid;                                                 // fifo0_64_bit_up_out_agent:rp_valid -> router_007:sink_valid
	wire  [119:0] fifo0_64_bit_up_out_agent_rp_data;                                                  // fifo0_64_bit_up_out_agent:rp_data -> router_007:sink_data
	wire          fifo0_64_bit_up_out_agent_rp_ready;                                                 // router_007:sink_ready -> fifo0_64_bit_up_out_agent:rp_ready
	wire          fifo0_64_bit_up_out_agent_rp_startofpacket;                                         // fifo0_64_bit_up_out_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          fifo0_64_bit_up_out_agent_rp_endofpacket;                                           // fifo0_64_bit_up_out_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_003:sink_valid
	wire  [119:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_003:sink_data
	wire          router_007_src_ready;                                                               // rsp_demux_003:sink_ready -> router_007:src_ready
	wire   [23:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_003:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          fifo0_64_bit_down_out_agent_rp_valid;                                               // fifo0_64_bit_down_out_agent:rp_valid -> router_008:sink_valid
	wire  [119:0] fifo0_64_bit_down_out_agent_rp_data;                                                // fifo0_64_bit_down_out_agent:rp_data -> router_008:sink_data
	wire          fifo0_64_bit_down_out_agent_rp_ready;                                               // router_008:sink_ready -> fifo0_64_bit_down_out_agent:rp_ready
	wire          fifo0_64_bit_down_out_agent_rp_startofpacket;                                       // fifo0_64_bit_down_out_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          fifo0_64_bit_down_out_agent_rp_endofpacket;                                         // fifo0_64_bit_down_out_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_004:sink_valid
	wire  [119:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_004:sink_data
	wire          router_008_src_ready;                                                               // rsp_demux_004:sink_ready -> router_008:src_ready
	wire   [23:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_004:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          fifo1_64_bit_up_out_agent_rp_valid;                                                 // fifo1_64_bit_up_out_agent:rp_valid -> router_009:sink_valid
	wire  [119:0] fifo1_64_bit_up_out_agent_rp_data;                                                  // fifo1_64_bit_up_out_agent:rp_data -> router_009:sink_data
	wire          fifo1_64_bit_up_out_agent_rp_ready;                                                 // router_009:sink_ready -> fifo1_64_bit_up_out_agent:rp_ready
	wire          fifo1_64_bit_up_out_agent_rp_startofpacket;                                         // fifo1_64_bit_up_out_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          fifo1_64_bit_up_out_agent_rp_endofpacket;                                           // fifo1_64_bit_up_out_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_005:sink_valid
	wire  [119:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_005:sink_data
	wire          router_009_src_ready;                                                               // rsp_demux_005:sink_ready -> router_009:src_ready
	wire   [23:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_005:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          fifo1_64_bit_down_out_agent_rp_valid;                                               // fifo1_64_bit_down_out_agent:rp_valid -> router_010:sink_valid
	wire  [119:0] fifo1_64_bit_down_out_agent_rp_data;                                                // fifo1_64_bit_down_out_agent:rp_data -> router_010:sink_data
	wire          fifo1_64_bit_down_out_agent_rp_ready;                                               // router_010:sink_ready -> fifo1_64_bit_down_out_agent:rp_ready
	wire          fifo1_64_bit_down_out_agent_rp_startofpacket;                                       // fifo1_64_bit_down_out_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          fifo1_64_bit_down_out_agent_rp_endofpacket;                                         // fifo1_64_bit_down_out_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_006:sink_valid
	wire  [119:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_006:sink_data
	wire          router_010_src_ready;                                                               // rsp_demux_006:sink_ready -> router_010:src_ready
	wire   [23:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_006:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          fifo0_32_bit_out_agent_rp_valid;                                                    // fifo0_32_bit_out_agent:rp_valid -> router_011:sink_valid
	wire  [119:0] fifo0_32_bit_out_agent_rp_data;                                                     // fifo0_32_bit_out_agent:rp_data -> router_011:sink_data
	wire          fifo0_32_bit_out_agent_rp_ready;                                                    // router_011:sink_ready -> fifo0_32_bit_out_agent:rp_ready
	wire          fifo0_32_bit_out_agent_rp_startofpacket;                                            // fifo0_32_bit_out_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          fifo0_32_bit_out_agent_rp_endofpacket;                                              // fifo0_32_bit_out_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_007:sink_valid
	wire  [119:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_007:sink_data
	wire          router_011_src_ready;                                                               // rsp_demux_007:sink_ready -> router_011:src_ready
	wire   [23:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_007:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          fifo1_32_bit_out_agent_rp_valid;                                                    // fifo1_32_bit_out_agent:rp_valid -> router_012:sink_valid
	wire  [119:0] fifo1_32_bit_out_agent_rp_data;                                                     // fifo1_32_bit_out_agent:rp_data -> router_012:sink_data
	wire          fifo1_32_bit_out_agent_rp_ready;                                                    // router_012:sink_ready -> fifo1_32_bit_out_agent:rp_ready
	wire          fifo1_32_bit_out_agent_rp_startofpacket;                                            // fifo1_32_bit_out_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          fifo1_32_bit_out_agent_rp_endofpacket;                                              // fifo1_32_bit_out_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_008:sink_valid
	wire  [119:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_008:sink_data
	wire          router_012_src_ready;                                                               // rsp_demux_008:sink_ready -> router_012:src_ready
	wire   [23:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_008:sink_channel
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          parameters_s0_agent_rp_valid;                                                       // parameters_s0_agent:rp_valid -> router_013:sink_valid
	wire  [119:0] parameters_s0_agent_rp_data;                                                        // parameters_s0_agent:rp_data -> router_013:sink_data
	wire          parameters_s0_agent_rp_ready;                                                       // router_013:sink_ready -> parameters_s0_agent:rp_ready
	wire          parameters_s0_agent_rp_startofpacket;                                               // parameters_s0_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          parameters_s0_agent_rp_endofpacket;                                                 // parameters_s0_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                               // router_013:src_valid -> rsp_demux_009:sink_valid
	wire  [119:0] router_013_src_data;                                                                // router_013:src_data -> rsp_demux_009:sink_data
	wire          router_013_src_ready;                                                               // rsp_demux_009:sink_ready -> router_013:src_ready
	wire   [23:0] router_013_src_channel;                                                             // router_013:src_channel -> rsp_demux_009:sink_channel
	wire          router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          parameters_1_s0_agent_rp_valid;                                                     // parameters_1_s0_agent:rp_valid -> router_014:sink_valid
	wire  [119:0] parameters_1_s0_agent_rp_data;                                                      // parameters_1_s0_agent:rp_data -> router_014:sink_data
	wire          parameters_1_s0_agent_rp_ready;                                                     // router_014:sink_ready -> parameters_1_s0_agent:rp_ready
	wire          parameters_1_s0_agent_rp_startofpacket;                                             // parameters_1_s0_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          parameters_1_s0_agent_rp_endofpacket;                                               // parameters_1_s0_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                               // router_014:src_valid -> rsp_demux_010:sink_valid
	wire  [119:0] router_014_src_data;                                                                // router_014:src_data -> rsp_demux_010:sink_data
	wire          router_014_src_ready;                                                               // rsp_demux_010:sink_ready -> router_014:src_ready
	wire   [23:0] router_014_src_channel;                                                             // router_014:src_channel -> rsp_demux_010:sink_channel
	wire          router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          parameters_2_s0_agent_rp_valid;                                                     // parameters_2_s0_agent:rp_valid -> router_015:sink_valid
	wire  [119:0] parameters_2_s0_agent_rp_data;                                                      // parameters_2_s0_agent:rp_data -> router_015:sink_data
	wire          parameters_2_s0_agent_rp_ready;                                                     // router_015:sink_ready -> parameters_2_s0_agent:rp_ready
	wire          parameters_2_s0_agent_rp_startofpacket;                                             // parameters_2_s0_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          parameters_2_s0_agent_rp_endofpacket;                                               // parameters_2_s0_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                               // router_015:src_valid -> rsp_demux_011:sink_valid
	wire  [119:0] router_015_src_data;                                                                // router_015:src_data -> rsp_demux_011:sink_data
	wire          router_015_src_ready;                                                               // rsp_demux_011:sink_ready -> router_015:src_ready
	wire   [23:0] router_015_src_channel;                                                             // router_015:src_channel -> rsp_demux_011:sink_channel
	wire          router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          parameters_3_s0_agent_rp_valid;                                                     // parameters_3_s0_agent:rp_valid -> router_016:sink_valid
	wire  [119:0] parameters_3_s0_agent_rp_data;                                                      // parameters_3_s0_agent:rp_data -> router_016:sink_data
	wire          parameters_3_s0_agent_rp_ready;                                                     // router_016:sink_ready -> parameters_3_s0_agent:rp_ready
	wire          parameters_3_s0_agent_rp_startofpacket;                                             // parameters_3_s0_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          parameters_3_s0_agent_rp_endofpacket;                                               // parameters_3_s0_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                               // router_016:src_valid -> rsp_demux_012:sink_valid
	wire  [119:0] router_016_src_data;                                                                // router_016:src_data -> rsp_demux_012:sink_data
	wire          router_016_src_ready;                                                               // rsp_demux_012:sink_ready -> router_016:src_ready
	wire   [23:0] router_016_src_channel;                                                             // router_016:src_channel -> rsp_demux_012:sink_channel
	wire          router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          program_memory_s1_agent_rp_valid;                                                   // program_memory_s1_agent:rp_valid -> router_017:sink_valid
	wire  [119:0] program_memory_s1_agent_rp_data;                                                    // program_memory_s1_agent:rp_data -> router_017:sink_data
	wire          program_memory_s1_agent_rp_ready;                                                   // router_017:sink_ready -> program_memory_s1_agent:rp_ready
	wire          program_memory_s1_agent_rp_startofpacket;                                           // program_memory_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          program_memory_s1_agent_rp_endofpacket;                                             // program_memory_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                               // router_017:src_valid -> rsp_demux_013:sink_valid
	wire  [119:0] router_017_src_data;                                                                // router_017:src_data -> rsp_demux_013:sink_data
	wire          router_017_src_ready;                                                               // rsp_demux_013:sink_ready -> router_017:src_ready
	wire   [23:0] router_017_src_channel;                                                             // router_017:src_channel -> rsp_demux_013:sink_channel
	wire          router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          divisor_clock_s1_agent_rp_valid;                                                    // divisor_clock_s1_agent:rp_valid -> router_018:sink_valid
	wire  [119:0] divisor_clock_s1_agent_rp_data;                                                     // divisor_clock_s1_agent:rp_data -> router_018:sink_data
	wire          divisor_clock_s1_agent_rp_ready;                                                    // router_018:sink_ready -> divisor_clock_s1_agent:rp_ready
	wire          divisor_clock_s1_agent_rp_startofpacket;                                            // divisor_clock_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          divisor_clock_s1_agent_rp_endofpacket;                                              // divisor_clock_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux_014:sink_valid
	wire  [119:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux_014:sink_data
	wire          router_018_src_ready;                                                               // rsp_demux_014:sink_ready -> router_018:src_ready
	wire   [23:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux_014:sink_channel
	wire          router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          reset_s1_agent_rp_valid;                                                            // reset_s1_agent:rp_valid -> router_019:sink_valid
	wire  [119:0] reset_s1_agent_rp_data;                                                             // reset_s1_agent:rp_data -> router_019:sink_data
	wire          reset_s1_agent_rp_ready;                                                            // router_019:sink_ready -> reset_s1_agent:rp_ready
	wire          reset_s1_agent_rp_startofpacket;                                                    // reset_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          reset_s1_agent_rp_endofpacket;                                                      // reset_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                               // router_019:src_valid -> rsp_demux_015:sink_valid
	wire  [119:0] router_019_src_data;                                                                // router_019:src_data -> rsp_demux_015:sink_data
	wire          router_019_src_ready;                                                               // rsp_demux_015:sink_ready -> router_019:src_ready
	wire   [23:0] router_019_src_channel;                                                             // router_019:src_channel -> rsp_demux_015:sink_channel
	wire          router_019_src_startofpacket;                                                       // router_019:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_019_src_endofpacket;                                                         // router_019:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          enable_s1_agent_rp_valid;                                                           // enable_s1_agent:rp_valid -> router_020:sink_valid
	wire  [119:0] enable_s1_agent_rp_data;                                                            // enable_s1_agent:rp_data -> router_020:sink_data
	wire          enable_s1_agent_rp_ready;                                                           // router_020:sink_ready -> enable_s1_agent:rp_ready
	wire          enable_s1_agent_rp_startofpacket;                                                   // enable_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          enable_s1_agent_rp_endofpacket;                                                     // enable_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                               // router_020:src_valid -> rsp_demux_016:sink_valid
	wire  [119:0] router_020_src_data;                                                                // router_020:src_data -> rsp_demux_016:sink_data
	wire          router_020_src_ready;                                                               // rsp_demux_016:sink_ready -> router_020:src_ready
	wire   [23:0] router_020_src_channel;                                                             // router_020:src_channel -> rsp_demux_016:sink_channel
	wire          router_020_src_startofpacket;                                                       // router_020:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_020_src_endofpacket;                                                         // router_020:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          finalizacion_s1_agent_rp_valid;                                                     // finalizacion_s1_agent:rp_valid -> router_021:sink_valid
	wire  [119:0] finalizacion_s1_agent_rp_data;                                                      // finalizacion_s1_agent:rp_data -> router_021:sink_data
	wire          finalizacion_s1_agent_rp_ready;                                                     // router_021:sink_ready -> finalizacion_s1_agent:rp_ready
	wire          finalizacion_s1_agent_rp_startofpacket;                                             // finalizacion_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          finalizacion_s1_agent_rp_endofpacket;                                               // finalizacion_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                               // router_021:src_valid -> rsp_demux_017:sink_valid
	wire  [119:0] router_021_src_data;                                                                // router_021:src_data -> rsp_demux_017:sink_data
	wire          router_021_src_ready;                                                               // rsp_demux_017:sink_ready -> router_021:src_ready
	wire   [23:0] router_021_src_channel;                                                             // router_021:src_channel -> rsp_demux_017:sink_channel
	wire          router_021_src_startofpacket;                                                       // router_021:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_021_src_endofpacket;                                                         // router_021:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          result0_64_bit_up_s1_agent_rp_valid;                                                // result0_64_bit_up_s1_agent:rp_valid -> router_022:sink_valid
	wire  [119:0] result0_64_bit_up_s1_agent_rp_data;                                                 // result0_64_bit_up_s1_agent:rp_data -> router_022:sink_data
	wire          result0_64_bit_up_s1_agent_rp_ready;                                                // router_022:sink_ready -> result0_64_bit_up_s1_agent:rp_ready
	wire          result0_64_bit_up_s1_agent_rp_startofpacket;                                        // result0_64_bit_up_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          result0_64_bit_up_s1_agent_rp_endofpacket;                                          // result0_64_bit_up_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                               // router_022:src_valid -> rsp_demux_018:sink_valid
	wire  [119:0] router_022_src_data;                                                                // router_022:src_data -> rsp_demux_018:sink_data
	wire          router_022_src_ready;                                                               // rsp_demux_018:sink_ready -> router_022:src_ready
	wire   [23:0] router_022_src_channel;                                                             // router_022:src_channel -> rsp_demux_018:sink_channel
	wire          router_022_src_startofpacket;                                                       // router_022:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_022_src_endofpacket;                                                         // router_022:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          result0_64_bit_down_s1_agent_rp_valid;                                              // result0_64_bit_down_s1_agent:rp_valid -> router_023:sink_valid
	wire  [119:0] result0_64_bit_down_s1_agent_rp_data;                                               // result0_64_bit_down_s1_agent:rp_data -> router_023:sink_data
	wire          result0_64_bit_down_s1_agent_rp_ready;                                              // router_023:sink_ready -> result0_64_bit_down_s1_agent:rp_ready
	wire          result0_64_bit_down_s1_agent_rp_startofpacket;                                      // result0_64_bit_down_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          result0_64_bit_down_s1_agent_rp_endofpacket;                                        // result0_64_bit_down_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                               // router_023:src_valid -> rsp_demux_019:sink_valid
	wire  [119:0] router_023_src_data;                                                                // router_023:src_data -> rsp_demux_019:sink_data
	wire          router_023_src_ready;                                                               // rsp_demux_019:sink_ready -> router_023:src_ready
	wire   [23:0] router_023_src_channel;                                                             // router_023:src_channel -> rsp_demux_019:sink_channel
	wire          router_023_src_startofpacket;                                                       // router_023:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_023_src_endofpacket;                                                         // router_023:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          result1_64_bit_up_s1_agent_rp_valid;                                                // result1_64_bit_up_s1_agent:rp_valid -> router_024:sink_valid
	wire  [119:0] result1_64_bit_up_s1_agent_rp_data;                                                 // result1_64_bit_up_s1_agent:rp_data -> router_024:sink_data
	wire          result1_64_bit_up_s1_agent_rp_ready;                                                // router_024:sink_ready -> result1_64_bit_up_s1_agent:rp_ready
	wire          result1_64_bit_up_s1_agent_rp_startofpacket;                                        // result1_64_bit_up_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          result1_64_bit_up_s1_agent_rp_endofpacket;                                          // result1_64_bit_up_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                               // router_024:src_valid -> rsp_demux_020:sink_valid
	wire  [119:0] router_024_src_data;                                                                // router_024:src_data -> rsp_demux_020:sink_data
	wire          router_024_src_ready;                                                               // rsp_demux_020:sink_ready -> router_024:src_ready
	wire   [23:0] router_024_src_channel;                                                             // router_024:src_channel -> rsp_demux_020:sink_channel
	wire          router_024_src_startofpacket;                                                       // router_024:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_024_src_endofpacket;                                                         // router_024:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          result1_64_bit_down_s1_agent_rp_valid;                                              // result1_64_bit_down_s1_agent:rp_valid -> router_025:sink_valid
	wire  [119:0] result1_64_bit_down_s1_agent_rp_data;                                               // result1_64_bit_down_s1_agent:rp_data -> router_025:sink_data
	wire          result1_64_bit_down_s1_agent_rp_ready;                                              // router_025:sink_ready -> result1_64_bit_down_s1_agent:rp_ready
	wire          result1_64_bit_down_s1_agent_rp_startofpacket;                                      // result1_64_bit_down_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          result1_64_bit_down_s1_agent_rp_endofpacket;                                        // result1_64_bit_down_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                               // router_025:src_valid -> rsp_demux_021:sink_valid
	wire  [119:0] router_025_src_data;                                                                // router_025:src_data -> rsp_demux_021:sink_data
	wire          router_025_src_ready;                                                               // rsp_demux_021:sink_ready -> router_025:src_ready
	wire   [23:0] router_025_src_channel;                                                             // router_025:src_channel -> rsp_demux_021:sink_channel
	wire          router_025_src_startofpacket;                                                       // router_025:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_025_src_endofpacket;                                                         // router_025:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          result0_32_bit_s1_agent_rp_valid;                                                   // result0_32_bit_s1_agent:rp_valid -> router_026:sink_valid
	wire  [119:0] result0_32_bit_s1_agent_rp_data;                                                    // result0_32_bit_s1_agent:rp_data -> router_026:sink_data
	wire          result0_32_bit_s1_agent_rp_ready;                                                   // router_026:sink_ready -> result0_32_bit_s1_agent:rp_ready
	wire          result0_32_bit_s1_agent_rp_startofpacket;                                           // result0_32_bit_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          result0_32_bit_s1_agent_rp_endofpacket;                                             // result0_32_bit_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                               // router_026:src_valid -> rsp_demux_022:sink_valid
	wire  [119:0] router_026_src_data;                                                                // router_026:src_data -> rsp_demux_022:sink_data
	wire          router_026_src_ready;                                                               // rsp_demux_022:sink_ready -> router_026:src_ready
	wire   [23:0] router_026_src_channel;                                                             // router_026:src_channel -> rsp_demux_022:sink_channel
	wire          router_026_src_startofpacket;                                                       // router_026:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_026_src_endofpacket;                                                         // router_026:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          result1_32_bit_s1_agent_rp_valid;                                                   // result1_32_bit_s1_agent:rp_valid -> router_027:sink_valid
	wire  [119:0] result1_32_bit_s1_agent_rp_data;                                                    // result1_32_bit_s1_agent:rp_data -> router_027:sink_data
	wire          result1_32_bit_s1_agent_rp_ready;                                                   // router_027:sink_ready -> result1_32_bit_s1_agent:rp_ready
	wire          result1_32_bit_s1_agent_rp_startofpacket;                                           // result1_32_bit_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          result1_32_bit_s1_agent_rp_endofpacket;                                             // result1_32_bit_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                               // router_027:src_valid -> rsp_demux_023:sink_valid
	wire  [119:0] router_027_src_data;                                                                // router_027:src_data -> rsp_demux_023:sink_data
	wire          router_027_src_ready;                                                               // rsp_demux_023:sink_ready -> router_027:src_ready
	wire   [23:0] router_027_src_channel;                                                             // router_027:src_channel -> rsp_demux_023:sink_channel
	wire          router_027_src_startofpacket;                                                       // router_027:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_027_src_endofpacket;                                                         // router_027:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [119:0] router_001_src_data;                                                                // router_001:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                               // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [23:0] router_001_src_channel;                                                             // router_001:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [119:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                                    // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                                   // cmd_demux_001:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [23:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                                 // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                           // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                             // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [119:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                              // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [23:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                                   // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [119:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                                    // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                                   // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [23:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                                 // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                           // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                             // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [119:0] router_002_src_data;                                                                // router_002:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                               // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [23:0] router_002_src_channel;                                                             // router_002:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [119:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                                    // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                                   // cmd_demux_002:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [23:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                                 // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                           // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                             // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                              // rsp_mux_002:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [119:0] rsp_mux_002_src_data;                                                               // rsp_mux_002:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                              // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [23:0] rsp_mux_002_src_channel;                                                            // rsp_mux_002:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                      // rsp_mux_002:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                        // rsp_mux_002:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                                   // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [119:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                                    // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                                   // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [23:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                                 // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                           // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                             // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> pll_reconfigurar_mgmt_avalon_slave_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> pll_reconfigurar_mgmt_avalon_slave_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                              // pll_reconfigurar_mgmt_avalon_slave_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [23:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> pll_reconfigurar_mgmt_avalon_slave_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> pll_reconfigurar_mgmt_avalon_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> pll_reconfigurar_mgmt_avalon_slave_burst_adapter:sink0_endofpacket
	wire          pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_valid;                     // pll_reconfigurar_mgmt_avalon_slave_burst_adapter:source0_valid -> pll_reconfigurar_mgmt_avalon_slave_agent:cp_valid
	wire  [119:0] pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_data;                      // pll_reconfigurar_mgmt_avalon_slave_burst_adapter:source0_data -> pll_reconfigurar_mgmt_avalon_slave_agent:cp_data
	wire          pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_ready;                     // pll_reconfigurar_mgmt_avalon_slave_agent:cp_ready -> pll_reconfigurar_mgmt_avalon_slave_burst_adapter:source0_ready
	wire   [23:0] pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_channel;                   // pll_reconfigurar_mgmt_avalon_slave_burst_adapter:source0_channel -> pll_reconfigurar_mgmt_avalon_slave_agent:cp_channel
	wire          pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_startofpacket;             // pll_reconfigurar_mgmt_avalon_slave_burst_adapter:source0_startofpacket -> pll_reconfigurar_mgmt_avalon_slave_agent:cp_startofpacket
	wire          pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_endofpacket;               // pll_reconfigurar_mgmt_avalon_slave_burst_adapter:source0_endofpacket -> pll_reconfigurar_mgmt_avalon_slave_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> fifo0_64_bit_up_out_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> fifo0_64_bit_up_out_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                              // fifo0_64_bit_up_out_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [23:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> fifo0_64_bit_up_out_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> fifo0_64_bit_up_out_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> fifo0_64_bit_up_out_burst_adapter:sink0_endofpacket
	wire          fifo0_64_bit_up_out_burst_adapter_source0_valid;                                    // fifo0_64_bit_up_out_burst_adapter:source0_valid -> fifo0_64_bit_up_out_agent:cp_valid
	wire  [119:0] fifo0_64_bit_up_out_burst_adapter_source0_data;                                     // fifo0_64_bit_up_out_burst_adapter:source0_data -> fifo0_64_bit_up_out_agent:cp_data
	wire          fifo0_64_bit_up_out_burst_adapter_source0_ready;                                    // fifo0_64_bit_up_out_agent:cp_ready -> fifo0_64_bit_up_out_burst_adapter:source0_ready
	wire   [23:0] fifo0_64_bit_up_out_burst_adapter_source0_channel;                                  // fifo0_64_bit_up_out_burst_adapter:source0_channel -> fifo0_64_bit_up_out_agent:cp_channel
	wire          fifo0_64_bit_up_out_burst_adapter_source0_startofpacket;                            // fifo0_64_bit_up_out_burst_adapter:source0_startofpacket -> fifo0_64_bit_up_out_agent:cp_startofpacket
	wire          fifo0_64_bit_up_out_burst_adapter_source0_endofpacket;                              // fifo0_64_bit_up_out_burst_adapter:source0_endofpacket -> fifo0_64_bit_up_out_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> fifo0_64_bit_down_out_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> fifo0_64_bit_down_out_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                              // fifo0_64_bit_down_out_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [23:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> fifo0_64_bit_down_out_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> fifo0_64_bit_down_out_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> fifo0_64_bit_down_out_burst_adapter:sink0_endofpacket
	wire          fifo0_64_bit_down_out_burst_adapter_source0_valid;                                  // fifo0_64_bit_down_out_burst_adapter:source0_valid -> fifo0_64_bit_down_out_agent:cp_valid
	wire  [119:0] fifo0_64_bit_down_out_burst_adapter_source0_data;                                   // fifo0_64_bit_down_out_burst_adapter:source0_data -> fifo0_64_bit_down_out_agent:cp_data
	wire          fifo0_64_bit_down_out_burst_adapter_source0_ready;                                  // fifo0_64_bit_down_out_agent:cp_ready -> fifo0_64_bit_down_out_burst_adapter:source0_ready
	wire   [23:0] fifo0_64_bit_down_out_burst_adapter_source0_channel;                                // fifo0_64_bit_down_out_burst_adapter:source0_channel -> fifo0_64_bit_down_out_agent:cp_channel
	wire          fifo0_64_bit_down_out_burst_adapter_source0_startofpacket;                          // fifo0_64_bit_down_out_burst_adapter:source0_startofpacket -> fifo0_64_bit_down_out_agent:cp_startofpacket
	wire          fifo0_64_bit_down_out_burst_adapter_source0_endofpacket;                            // fifo0_64_bit_down_out_burst_adapter:source0_endofpacket -> fifo0_64_bit_down_out_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> fifo1_64_bit_up_out_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> fifo1_64_bit_up_out_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                              // fifo1_64_bit_up_out_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [23:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> fifo1_64_bit_up_out_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> fifo1_64_bit_up_out_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> fifo1_64_bit_up_out_burst_adapter:sink0_endofpacket
	wire          fifo1_64_bit_up_out_burst_adapter_source0_valid;                                    // fifo1_64_bit_up_out_burst_adapter:source0_valid -> fifo1_64_bit_up_out_agent:cp_valid
	wire  [119:0] fifo1_64_bit_up_out_burst_adapter_source0_data;                                     // fifo1_64_bit_up_out_burst_adapter:source0_data -> fifo1_64_bit_up_out_agent:cp_data
	wire          fifo1_64_bit_up_out_burst_adapter_source0_ready;                                    // fifo1_64_bit_up_out_agent:cp_ready -> fifo1_64_bit_up_out_burst_adapter:source0_ready
	wire   [23:0] fifo1_64_bit_up_out_burst_adapter_source0_channel;                                  // fifo1_64_bit_up_out_burst_adapter:source0_channel -> fifo1_64_bit_up_out_agent:cp_channel
	wire          fifo1_64_bit_up_out_burst_adapter_source0_startofpacket;                            // fifo1_64_bit_up_out_burst_adapter:source0_startofpacket -> fifo1_64_bit_up_out_agent:cp_startofpacket
	wire          fifo1_64_bit_up_out_burst_adapter_source0_endofpacket;                              // fifo1_64_bit_up_out_burst_adapter:source0_endofpacket -> fifo1_64_bit_up_out_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> fifo1_64_bit_down_out_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> fifo1_64_bit_down_out_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                              // fifo1_64_bit_down_out_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [23:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> fifo1_64_bit_down_out_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> fifo1_64_bit_down_out_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> fifo1_64_bit_down_out_burst_adapter:sink0_endofpacket
	wire          fifo1_64_bit_down_out_burst_adapter_source0_valid;                                  // fifo1_64_bit_down_out_burst_adapter:source0_valid -> fifo1_64_bit_down_out_agent:cp_valid
	wire  [119:0] fifo1_64_bit_down_out_burst_adapter_source0_data;                                   // fifo1_64_bit_down_out_burst_adapter:source0_data -> fifo1_64_bit_down_out_agent:cp_data
	wire          fifo1_64_bit_down_out_burst_adapter_source0_ready;                                  // fifo1_64_bit_down_out_agent:cp_ready -> fifo1_64_bit_down_out_burst_adapter:source0_ready
	wire   [23:0] fifo1_64_bit_down_out_burst_adapter_source0_channel;                                // fifo1_64_bit_down_out_burst_adapter:source0_channel -> fifo1_64_bit_down_out_agent:cp_channel
	wire          fifo1_64_bit_down_out_burst_adapter_source0_startofpacket;                          // fifo1_64_bit_down_out_burst_adapter:source0_startofpacket -> fifo1_64_bit_down_out_agent:cp_startofpacket
	wire          fifo1_64_bit_down_out_burst_adapter_source0_endofpacket;                            // fifo1_64_bit_down_out_burst_adapter:source0_endofpacket -> fifo1_64_bit_down_out_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> fifo0_32_bit_out_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> fifo0_32_bit_out_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                              // fifo0_32_bit_out_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [23:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> fifo0_32_bit_out_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> fifo0_32_bit_out_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> fifo0_32_bit_out_burst_adapter:sink0_endofpacket
	wire          fifo0_32_bit_out_burst_adapter_source0_valid;                                       // fifo0_32_bit_out_burst_adapter:source0_valid -> fifo0_32_bit_out_agent:cp_valid
	wire  [119:0] fifo0_32_bit_out_burst_adapter_source0_data;                                        // fifo0_32_bit_out_burst_adapter:source0_data -> fifo0_32_bit_out_agent:cp_data
	wire          fifo0_32_bit_out_burst_adapter_source0_ready;                                       // fifo0_32_bit_out_agent:cp_ready -> fifo0_32_bit_out_burst_adapter:source0_ready
	wire   [23:0] fifo0_32_bit_out_burst_adapter_source0_channel;                                     // fifo0_32_bit_out_burst_adapter:source0_channel -> fifo0_32_bit_out_agent:cp_channel
	wire          fifo0_32_bit_out_burst_adapter_source0_startofpacket;                               // fifo0_32_bit_out_burst_adapter:source0_startofpacket -> fifo0_32_bit_out_agent:cp_startofpacket
	wire          fifo0_32_bit_out_burst_adapter_source0_endofpacket;                                 // fifo0_32_bit_out_burst_adapter:source0_endofpacket -> fifo0_32_bit_out_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> fifo1_32_bit_out_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> fifo1_32_bit_out_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                              // fifo1_32_bit_out_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [23:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> fifo1_32_bit_out_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> fifo1_32_bit_out_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> fifo1_32_bit_out_burst_adapter:sink0_endofpacket
	wire          fifo1_32_bit_out_burst_adapter_source0_valid;                                       // fifo1_32_bit_out_burst_adapter:source0_valid -> fifo1_32_bit_out_agent:cp_valid
	wire  [119:0] fifo1_32_bit_out_burst_adapter_source0_data;                                        // fifo1_32_bit_out_burst_adapter:source0_data -> fifo1_32_bit_out_agent:cp_data
	wire          fifo1_32_bit_out_burst_adapter_source0_ready;                                       // fifo1_32_bit_out_agent:cp_ready -> fifo1_32_bit_out_burst_adapter:source0_ready
	wire   [23:0] fifo1_32_bit_out_burst_adapter_source0_channel;                                     // fifo1_32_bit_out_burst_adapter:source0_channel -> fifo1_32_bit_out_agent:cp_channel
	wire          fifo1_32_bit_out_burst_adapter_source0_startofpacket;                               // fifo1_32_bit_out_burst_adapter:source0_startofpacket -> fifo1_32_bit_out_agent:cp_startofpacket
	wire          fifo1_32_bit_out_burst_adapter_source0_endofpacket;                                 // fifo1_32_bit_out_burst_adapter:source0_endofpacket -> fifo1_32_bit_out_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> parameters_s0_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> parameters_s0_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                              // parameters_s0_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [23:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> parameters_s0_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> parameters_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> parameters_s0_burst_adapter:sink0_endofpacket
	wire          parameters_s0_burst_adapter_source0_valid;                                          // parameters_s0_burst_adapter:source0_valid -> parameters_s0_agent:cp_valid
	wire  [119:0] parameters_s0_burst_adapter_source0_data;                                           // parameters_s0_burst_adapter:source0_data -> parameters_s0_agent:cp_data
	wire          parameters_s0_burst_adapter_source0_ready;                                          // parameters_s0_agent:cp_ready -> parameters_s0_burst_adapter:source0_ready
	wire   [23:0] parameters_s0_burst_adapter_source0_channel;                                        // parameters_s0_burst_adapter:source0_channel -> parameters_s0_agent:cp_channel
	wire          parameters_s0_burst_adapter_source0_startofpacket;                                  // parameters_s0_burst_adapter:source0_startofpacket -> parameters_s0_agent:cp_startofpacket
	wire          parameters_s0_burst_adapter_source0_endofpacket;                                    // parameters_s0_burst_adapter:source0_endofpacket -> parameters_s0_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> parameters_1_s0_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> parameters_1_s0_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                              // parameters_1_s0_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [23:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> parameters_1_s0_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> parameters_1_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> parameters_1_s0_burst_adapter:sink0_endofpacket
	wire          parameters_1_s0_burst_adapter_source0_valid;                                        // parameters_1_s0_burst_adapter:source0_valid -> parameters_1_s0_agent:cp_valid
	wire  [119:0] parameters_1_s0_burst_adapter_source0_data;                                         // parameters_1_s0_burst_adapter:source0_data -> parameters_1_s0_agent:cp_data
	wire          parameters_1_s0_burst_adapter_source0_ready;                                        // parameters_1_s0_agent:cp_ready -> parameters_1_s0_burst_adapter:source0_ready
	wire   [23:0] parameters_1_s0_burst_adapter_source0_channel;                                      // parameters_1_s0_burst_adapter:source0_channel -> parameters_1_s0_agent:cp_channel
	wire          parameters_1_s0_burst_adapter_source0_startofpacket;                                // parameters_1_s0_burst_adapter:source0_startofpacket -> parameters_1_s0_agent:cp_startofpacket
	wire          parameters_1_s0_burst_adapter_source0_endofpacket;                                  // parameters_1_s0_burst_adapter:source0_endofpacket -> parameters_1_s0_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> parameters_2_s0_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> parameters_2_s0_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                              // parameters_2_s0_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [23:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> parameters_2_s0_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> parameters_2_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> parameters_2_s0_burst_adapter:sink0_endofpacket
	wire          parameters_2_s0_burst_adapter_source0_valid;                                        // parameters_2_s0_burst_adapter:source0_valid -> parameters_2_s0_agent:cp_valid
	wire  [119:0] parameters_2_s0_burst_adapter_source0_data;                                         // parameters_2_s0_burst_adapter:source0_data -> parameters_2_s0_agent:cp_data
	wire          parameters_2_s0_burst_adapter_source0_ready;                                        // parameters_2_s0_agent:cp_ready -> parameters_2_s0_burst_adapter:source0_ready
	wire   [23:0] parameters_2_s0_burst_adapter_source0_channel;                                      // parameters_2_s0_burst_adapter:source0_channel -> parameters_2_s0_agent:cp_channel
	wire          parameters_2_s0_burst_adapter_source0_startofpacket;                                // parameters_2_s0_burst_adapter:source0_startofpacket -> parameters_2_s0_agent:cp_startofpacket
	wire          parameters_2_s0_burst_adapter_source0_endofpacket;                                  // parameters_2_s0_burst_adapter:source0_endofpacket -> parameters_2_s0_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                              // cmd_mux_012:src_valid -> parameters_3_s0_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_012_src_data;                                                               // cmd_mux_012:src_data -> parameters_3_s0_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                              // parameters_3_s0_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [23:0] cmd_mux_012_src_channel;                                                            // cmd_mux_012:src_channel -> parameters_3_s0_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                                      // cmd_mux_012:src_startofpacket -> parameters_3_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                        // cmd_mux_012:src_endofpacket -> parameters_3_s0_burst_adapter:sink0_endofpacket
	wire          parameters_3_s0_burst_adapter_source0_valid;                                        // parameters_3_s0_burst_adapter:source0_valid -> parameters_3_s0_agent:cp_valid
	wire  [119:0] parameters_3_s0_burst_adapter_source0_data;                                         // parameters_3_s0_burst_adapter:source0_data -> parameters_3_s0_agent:cp_data
	wire          parameters_3_s0_burst_adapter_source0_ready;                                        // parameters_3_s0_agent:cp_ready -> parameters_3_s0_burst_adapter:source0_ready
	wire   [23:0] parameters_3_s0_burst_adapter_source0_channel;                                      // parameters_3_s0_burst_adapter:source0_channel -> parameters_3_s0_agent:cp_channel
	wire          parameters_3_s0_burst_adapter_source0_startofpacket;                                // parameters_3_s0_burst_adapter:source0_startofpacket -> parameters_3_s0_agent:cp_startofpacket
	wire          parameters_3_s0_burst_adapter_source0_endofpacket;                                  // parameters_3_s0_burst_adapter:source0_endofpacket -> parameters_3_s0_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                              // cmd_mux_013:src_valid -> program_memory_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_013_src_data;                                                               // cmd_mux_013:src_data -> program_memory_s1_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                              // program_memory_s1_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [23:0] cmd_mux_013_src_channel;                                                            // cmd_mux_013:src_channel -> program_memory_s1_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                                      // cmd_mux_013:src_startofpacket -> program_memory_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                        // cmd_mux_013:src_endofpacket -> program_memory_s1_burst_adapter:sink0_endofpacket
	wire          program_memory_s1_burst_adapter_source0_valid;                                      // program_memory_s1_burst_adapter:source0_valid -> program_memory_s1_agent:cp_valid
	wire  [119:0] program_memory_s1_burst_adapter_source0_data;                                       // program_memory_s1_burst_adapter:source0_data -> program_memory_s1_agent:cp_data
	wire          program_memory_s1_burst_adapter_source0_ready;                                      // program_memory_s1_agent:cp_ready -> program_memory_s1_burst_adapter:source0_ready
	wire   [23:0] program_memory_s1_burst_adapter_source0_channel;                                    // program_memory_s1_burst_adapter:source0_channel -> program_memory_s1_agent:cp_channel
	wire          program_memory_s1_burst_adapter_source0_startofpacket;                              // program_memory_s1_burst_adapter:source0_startofpacket -> program_memory_s1_agent:cp_startofpacket
	wire          program_memory_s1_burst_adapter_source0_endofpacket;                                // program_memory_s1_burst_adapter:source0_endofpacket -> program_memory_s1_agent:cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                              // cmd_mux_014:src_valid -> divisor_clock_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_014_src_data;                                                               // cmd_mux_014:src_data -> divisor_clock_s1_burst_adapter:sink0_data
	wire          cmd_mux_014_src_ready;                                                              // divisor_clock_s1_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire   [23:0] cmd_mux_014_src_channel;                                                            // cmd_mux_014:src_channel -> divisor_clock_s1_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_startofpacket;                                                      // cmd_mux_014:src_startofpacket -> divisor_clock_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                        // cmd_mux_014:src_endofpacket -> divisor_clock_s1_burst_adapter:sink0_endofpacket
	wire          divisor_clock_s1_burst_adapter_source0_valid;                                       // divisor_clock_s1_burst_adapter:source0_valid -> divisor_clock_s1_agent:cp_valid
	wire  [119:0] divisor_clock_s1_burst_adapter_source0_data;                                        // divisor_clock_s1_burst_adapter:source0_data -> divisor_clock_s1_agent:cp_data
	wire          divisor_clock_s1_burst_adapter_source0_ready;                                       // divisor_clock_s1_agent:cp_ready -> divisor_clock_s1_burst_adapter:source0_ready
	wire   [23:0] divisor_clock_s1_burst_adapter_source0_channel;                                     // divisor_clock_s1_burst_adapter:source0_channel -> divisor_clock_s1_agent:cp_channel
	wire          divisor_clock_s1_burst_adapter_source0_startofpacket;                               // divisor_clock_s1_burst_adapter:source0_startofpacket -> divisor_clock_s1_agent:cp_startofpacket
	wire          divisor_clock_s1_burst_adapter_source0_endofpacket;                                 // divisor_clock_s1_burst_adapter:source0_endofpacket -> divisor_clock_s1_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                              // cmd_mux_015:src_valid -> reset_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_015_src_data;                                                               // cmd_mux_015:src_data -> reset_s1_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                              // reset_s1_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [23:0] cmd_mux_015_src_channel;                                                            // cmd_mux_015:src_channel -> reset_s1_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                                      // cmd_mux_015:src_startofpacket -> reset_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                        // cmd_mux_015:src_endofpacket -> reset_s1_burst_adapter:sink0_endofpacket
	wire          reset_s1_burst_adapter_source0_valid;                                               // reset_s1_burst_adapter:source0_valid -> reset_s1_agent:cp_valid
	wire  [119:0] reset_s1_burst_adapter_source0_data;                                                // reset_s1_burst_adapter:source0_data -> reset_s1_agent:cp_data
	wire          reset_s1_burst_adapter_source0_ready;                                               // reset_s1_agent:cp_ready -> reset_s1_burst_adapter:source0_ready
	wire   [23:0] reset_s1_burst_adapter_source0_channel;                                             // reset_s1_burst_adapter:source0_channel -> reset_s1_agent:cp_channel
	wire          reset_s1_burst_adapter_source0_startofpacket;                                       // reset_s1_burst_adapter:source0_startofpacket -> reset_s1_agent:cp_startofpacket
	wire          reset_s1_burst_adapter_source0_endofpacket;                                         // reset_s1_burst_adapter:source0_endofpacket -> reset_s1_agent:cp_endofpacket
	wire          cmd_mux_016_src_valid;                                                              // cmd_mux_016:src_valid -> enable_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_016_src_data;                                                               // cmd_mux_016:src_data -> enable_s1_burst_adapter:sink0_data
	wire          cmd_mux_016_src_ready;                                                              // enable_s1_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire   [23:0] cmd_mux_016_src_channel;                                                            // cmd_mux_016:src_channel -> enable_s1_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_startofpacket;                                                      // cmd_mux_016:src_startofpacket -> enable_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                        // cmd_mux_016:src_endofpacket -> enable_s1_burst_adapter:sink0_endofpacket
	wire          enable_s1_burst_adapter_source0_valid;                                              // enable_s1_burst_adapter:source0_valid -> enable_s1_agent:cp_valid
	wire  [119:0] enable_s1_burst_adapter_source0_data;                                               // enable_s1_burst_adapter:source0_data -> enable_s1_agent:cp_data
	wire          enable_s1_burst_adapter_source0_ready;                                              // enable_s1_agent:cp_ready -> enable_s1_burst_adapter:source0_ready
	wire   [23:0] enable_s1_burst_adapter_source0_channel;                                            // enable_s1_burst_adapter:source0_channel -> enable_s1_agent:cp_channel
	wire          enable_s1_burst_adapter_source0_startofpacket;                                      // enable_s1_burst_adapter:source0_startofpacket -> enable_s1_agent:cp_startofpacket
	wire          enable_s1_burst_adapter_source0_endofpacket;                                        // enable_s1_burst_adapter:source0_endofpacket -> enable_s1_agent:cp_endofpacket
	wire          cmd_mux_017_src_valid;                                                              // cmd_mux_017:src_valid -> finalizacion_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_017_src_data;                                                               // cmd_mux_017:src_data -> finalizacion_s1_burst_adapter:sink0_data
	wire          cmd_mux_017_src_ready;                                                              // finalizacion_s1_burst_adapter:sink0_ready -> cmd_mux_017:src_ready
	wire   [23:0] cmd_mux_017_src_channel;                                                            // cmd_mux_017:src_channel -> finalizacion_s1_burst_adapter:sink0_channel
	wire          cmd_mux_017_src_startofpacket;                                                      // cmd_mux_017:src_startofpacket -> finalizacion_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                        // cmd_mux_017:src_endofpacket -> finalizacion_s1_burst_adapter:sink0_endofpacket
	wire          finalizacion_s1_burst_adapter_source0_valid;                                        // finalizacion_s1_burst_adapter:source0_valid -> finalizacion_s1_agent:cp_valid
	wire  [119:0] finalizacion_s1_burst_adapter_source0_data;                                         // finalizacion_s1_burst_adapter:source0_data -> finalizacion_s1_agent:cp_data
	wire          finalizacion_s1_burst_adapter_source0_ready;                                        // finalizacion_s1_agent:cp_ready -> finalizacion_s1_burst_adapter:source0_ready
	wire   [23:0] finalizacion_s1_burst_adapter_source0_channel;                                      // finalizacion_s1_burst_adapter:source0_channel -> finalizacion_s1_agent:cp_channel
	wire          finalizacion_s1_burst_adapter_source0_startofpacket;                                // finalizacion_s1_burst_adapter:source0_startofpacket -> finalizacion_s1_agent:cp_startofpacket
	wire          finalizacion_s1_burst_adapter_source0_endofpacket;                                  // finalizacion_s1_burst_adapter:source0_endofpacket -> finalizacion_s1_agent:cp_endofpacket
	wire          cmd_mux_018_src_valid;                                                              // cmd_mux_018:src_valid -> result0_64_bit_up_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_018_src_data;                                                               // cmd_mux_018:src_data -> result0_64_bit_up_s1_burst_adapter:sink0_data
	wire          cmd_mux_018_src_ready;                                                              // result0_64_bit_up_s1_burst_adapter:sink0_ready -> cmd_mux_018:src_ready
	wire   [23:0] cmd_mux_018_src_channel;                                                            // cmd_mux_018:src_channel -> result0_64_bit_up_s1_burst_adapter:sink0_channel
	wire          cmd_mux_018_src_startofpacket;                                                      // cmd_mux_018:src_startofpacket -> result0_64_bit_up_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                        // cmd_mux_018:src_endofpacket -> result0_64_bit_up_s1_burst_adapter:sink0_endofpacket
	wire          result0_64_bit_up_s1_burst_adapter_source0_valid;                                   // result0_64_bit_up_s1_burst_adapter:source0_valid -> result0_64_bit_up_s1_agent:cp_valid
	wire  [119:0] result0_64_bit_up_s1_burst_adapter_source0_data;                                    // result0_64_bit_up_s1_burst_adapter:source0_data -> result0_64_bit_up_s1_agent:cp_data
	wire          result0_64_bit_up_s1_burst_adapter_source0_ready;                                   // result0_64_bit_up_s1_agent:cp_ready -> result0_64_bit_up_s1_burst_adapter:source0_ready
	wire   [23:0] result0_64_bit_up_s1_burst_adapter_source0_channel;                                 // result0_64_bit_up_s1_burst_adapter:source0_channel -> result0_64_bit_up_s1_agent:cp_channel
	wire          result0_64_bit_up_s1_burst_adapter_source0_startofpacket;                           // result0_64_bit_up_s1_burst_adapter:source0_startofpacket -> result0_64_bit_up_s1_agent:cp_startofpacket
	wire          result0_64_bit_up_s1_burst_adapter_source0_endofpacket;                             // result0_64_bit_up_s1_burst_adapter:source0_endofpacket -> result0_64_bit_up_s1_agent:cp_endofpacket
	wire          cmd_mux_019_src_valid;                                                              // cmd_mux_019:src_valid -> result0_64_bit_down_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_019_src_data;                                                               // cmd_mux_019:src_data -> result0_64_bit_down_s1_burst_adapter:sink0_data
	wire          cmd_mux_019_src_ready;                                                              // result0_64_bit_down_s1_burst_adapter:sink0_ready -> cmd_mux_019:src_ready
	wire   [23:0] cmd_mux_019_src_channel;                                                            // cmd_mux_019:src_channel -> result0_64_bit_down_s1_burst_adapter:sink0_channel
	wire          cmd_mux_019_src_startofpacket;                                                      // cmd_mux_019:src_startofpacket -> result0_64_bit_down_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                        // cmd_mux_019:src_endofpacket -> result0_64_bit_down_s1_burst_adapter:sink0_endofpacket
	wire          result0_64_bit_down_s1_burst_adapter_source0_valid;                                 // result0_64_bit_down_s1_burst_adapter:source0_valid -> result0_64_bit_down_s1_agent:cp_valid
	wire  [119:0] result0_64_bit_down_s1_burst_adapter_source0_data;                                  // result0_64_bit_down_s1_burst_adapter:source0_data -> result0_64_bit_down_s1_agent:cp_data
	wire          result0_64_bit_down_s1_burst_adapter_source0_ready;                                 // result0_64_bit_down_s1_agent:cp_ready -> result0_64_bit_down_s1_burst_adapter:source0_ready
	wire   [23:0] result0_64_bit_down_s1_burst_adapter_source0_channel;                               // result0_64_bit_down_s1_burst_adapter:source0_channel -> result0_64_bit_down_s1_agent:cp_channel
	wire          result0_64_bit_down_s1_burst_adapter_source0_startofpacket;                         // result0_64_bit_down_s1_burst_adapter:source0_startofpacket -> result0_64_bit_down_s1_agent:cp_startofpacket
	wire          result0_64_bit_down_s1_burst_adapter_source0_endofpacket;                           // result0_64_bit_down_s1_burst_adapter:source0_endofpacket -> result0_64_bit_down_s1_agent:cp_endofpacket
	wire          cmd_mux_020_src_valid;                                                              // cmd_mux_020:src_valid -> result1_64_bit_up_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_020_src_data;                                                               // cmd_mux_020:src_data -> result1_64_bit_up_s1_burst_adapter:sink0_data
	wire          cmd_mux_020_src_ready;                                                              // result1_64_bit_up_s1_burst_adapter:sink0_ready -> cmd_mux_020:src_ready
	wire   [23:0] cmd_mux_020_src_channel;                                                            // cmd_mux_020:src_channel -> result1_64_bit_up_s1_burst_adapter:sink0_channel
	wire          cmd_mux_020_src_startofpacket;                                                      // cmd_mux_020:src_startofpacket -> result1_64_bit_up_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                        // cmd_mux_020:src_endofpacket -> result1_64_bit_up_s1_burst_adapter:sink0_endofpacket
	wire          result1_64_bit_up_s1_burst_adapter_source0_valid;                                   // result1_64_bit_up_s1_burst_adapter:source0_valid -> result1_64_bit_up_s1_agent:cp_valid
	wire  [119:0] result1_64_bit_up_s1_burst_adapter_source0_data;                                    // result1_64_bit_up_s1_burst_adapter:source0_data -> result1_64_bit_up_s1_agent:cp_data
	wire          result1_64_bit_up_s1_burst_adapter_source0_ready;                                   // result1_64_bit_up_s1_agent:cp_ready -> result1_64_bit_up_s1_burst_adapter:source0_ready
	wire   [23:0] result1_64_bit_up_s1_burst_adapter_source0_channel;                                 // result1_64_bit_up_s1_burst_adapter:source0_channel -> result1_64_bit_up_s1_agent:cp_channel
	wire          result1_64_bit_up_s1_burst_adapter_source0_startofpacket;                           // result1_64_bit_up_s1_burst_adapter:source0_startofpacket -> result1_64_bit_up_s1_agent:cp_startofpacket
	wire          result1_64_bit_up_s1_burst_adapter_source0_endofpacket;                             // result1_64_bit_up_s1_burst_adapter:source0_endofpacket -> result1_64_bit_up_s1_agent:cp_endofpacket
	wire          cmd_mux_021_src_valid;                                                              // cmd_mux_021:src_valid -> result1_64_bit_down_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_021_src_data;                                                               // cmd_mux_021:src_data -> result1_64_bit_down_s1_burst_adapter:sink0_data
	wire          cmd_mux_021_src_ready;                                                              // result1_64_bit_down_s1_burst_adapter:sink0_ready -> cmd_mux_021:src_ready
	wire   [23:0] cmd_mux_021_src_channel;                                                            // cmd_mux_021:src_channel -> result1_64_bit_down_s1_burst_adapter:sink0_channel
	wire          cmd_mux_021_src_startofpacket;                                                      // cmd_mux_021:src_startofpacket -> result1_64_bit_down_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                        // cmd_mux_021:src_endofpacket -> result1_64_bit_down_s1_burst_adapter:sink0_endofpacket
	wire          result1_64_bit_down_s1_burst_adapter_source0_valid;                                 // result1_64_bit_down_s1_burst_adapter:source0_valid -> result1_64_bit_down_s1_agent:cp_valid
	wire  [119:0] result1_64_bit_down_s1_burst_adapter_source0_data;                                  // result1_64_bit_down_s1_burst_adapter:source0_data -> result1_64_bit_down_s1_agent:cp_data
	wire          result1_64_bit_down_s1_burst_adapter_source0_ready;                                 // result1_64_bit_down_s1_agent:cp_ready -> result1_64_bit_down_s1_burst_adapter:source0_ready
	wire   [23:0] result1_64_bit_down_s1_burst_adapter_source0_channel;                               // result1_64_bit_down_s1_burst_adapter:source0_channel -> result1_64_bit_down_s1_agent:cp_channel
	wire          result1_64_bit_down_s1_burst_adapter_source0_startofpacket;                         // result1_64_bit_down_s1_burst_adapter:source0_startofpacket -> result1_64_bit_down_s1_agent:cp_startofpacket
	wire          result1_64_bit_down_s1_burst_adapter_source0_endofpacket;                           // result1_64_bit_down_s1_burst_adapter:source0_endofpacket -> result1_64_bit_down_s1_agent:cp_endofpacket
	wire          cmd_mux_022_src_valid;                                                              // cmd_mux_022:src_valid -> result0_32_bit_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_022_src_data;                                                               // cmd_mux_022:src_data -> result0_32_bit_s1_burst_adapter:sink0_data
	wire          cmd_mux_022_src_ready;                                                              // result0_32_bit_s1_burst_adapter:sink0_ready -> cmd_mux_022:src_ready
	wire   [23:0] cmd_mux_022_src_channel;                                                            // cmd_mux_022:src_channel -> result0_32_bit_s1_burst_adapter:sink0_channel
	wire          cmd_mux_022_src_startofpacket;                                                      // cmd_mux_022:src_startofpacket -> result0_32_bit_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                        // cmd_mux_022:src_endofpacket -> result0_32_bit_s1_burst_adapter:sink0_endofpacket
	wire          result0_32_bit_s1_burst_adapter_source0_valid;                                      // result0_32_bit_s1_burst_adapter:source0_valid -> result0_32_bit_s1_agent:cp_valid
	wire  [119:0] result0_32_bit_s1_burst_adapter_source0_data;                                       // result0_32_bit_s1_burst_adapter:source0_data -> result0_32_bit_s1_agent:cp_data
	wire          result0_32_bit_s1_burst_adapter_source0_ready;                                      // result0_32_bit_s1_agent:cp_ready -> result0_32_bit_s1_burst_adapter:source0_ready
	wire   [23:0] result0_32_bit_s1_burst_adapter_source0_channel;                                    // result0_32_bit_s1_burst_adapter:source0_channel -> result0_32_bit_s1_agent:cp_channel
	wire          result0_32_bit_s1_burst_adapter_source0_startofpacket;                              // result0_32_bit_s1_burst_adapter:source0_startofpacket -> result0_32_bit_s1_agent:cp_startofpacket
	wire          result0_32_bit_s1_burst_adapter_source0_endofpacket;                                // result0_32_bit_s1_burst_adapter:source0_endofpacket -> result0_32_bit_s1_agent:cp_endofpacket
	wire          cmd_mux_023_src_valid;                                                              // cmd_mux_023:src_valid -> result1_32_bit_s1_burst_adapter:sink0_valid
	wire  [119:0] cmd_mux_023_src_data;                                                               // cmd_mux_023:src_data -> result1_32_bit_s1_burst_adapter:sink0_data
	wire          cmd_mux_023_src_ready;                                                              // result1_32_bit_s1_burst_adapter:sink0_ready -> cmd_mux_023:src_ready
	wire   [23:0] cmd_mux_023_src_channel;                                                            // cmd_mux_023:src_channel -> result1_32_bit_s1_burst_adapter:sink0_channel
	wire          cmd_mux_023_src_startofpacket;                                                      // cmd_mux_023:src_startofpacket -> result1_32_bit_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                        // cmd_mux_023:src_endofpacket -> result1_32_bit_s1_burst_adapter:sink0_endofpacket
	wire          result1_32_bit_s1_burst_adapter_source0_valid;                                      // result1_32_bit_s1_burst_adapter:source0_valid -> result1_32_bit_s1_agent:cp_valid
	wire  [119:0] result1_32_bit_s1_burst_adapter_source0_data;                                       // result1_32_bit_s1_burst_adapter:source0_data -> result1_32_bit_s1_agent:cp_data
	wire          result1_32_bit_s1_burst_adapter_source0_ready;                                      // result1_32_bit_s1_agent:cp_ready -> result1_32_bit_s1_burst_adapter:source0_ready
	wire   [23:0] result1_32_bit_s1_burst_adapter_source0_channel;                                    // result1_32_bit_s1_burst_adapter:source0_channel -> result1_32_bit_s1_agent:cp_channel
	wire          result1_32_bit_s1_burst_adapter_source0_startofpacket;                              // result1_32_bit_s1_burst_adapter:source0_startofpacket -> result1_32_bit_s1_agent:cp_startofpacket
	wire          result1_32_bit_s1_burst_adapter_source0_endofpacket;                                // result1_32_bit_s1_burst_adapter:source0_endofpacket -> result1_32_bit_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [119:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [23:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [119:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [23:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [119:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [23:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [119:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                               // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [23:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                              // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [119:0] cmd_demux_src10_data;                                                               // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                              // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [23:0] cmd_demux_src10_channel;                                                            // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                      // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                        // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                              // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [119:0] cmd_demux_src11_data;                                                               // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                              // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [23:0] cmd_demux_src11_channel;                                                            // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                      // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                        // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                              // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [119:0] cmd_demux_src12_data;                                                               // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                              // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [23:0] cmd_demux_src12_channel;                                                            // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                      // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                        // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                              // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [119:0] cmd_demux_src13_data;                                                               // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                              // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [23:0] cmd_demux_src13_channel;                                                            // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                      // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                        // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                              // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [119:0] cmd_demux_src14_data;                                                               // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                              // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [23:0] cmd_demux_src14_channel;                                                            // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                      // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                        // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                              // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [119:0] cmd_demux_src16_data;                                                               // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                              // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [23:0] cmd_demux_src16_channel;                                                            // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                      // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                        // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                              // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [119:0] cmd_demux_src17_data;                                                               // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                              // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [23:0] cmd_demux_src17_channel;                                                            // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                      // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                        // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                              // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [119:0] cmd_demux_src18_data;                                                               // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                              // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [23:0] cmd_demux_src18_channel;                                                            // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                      // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                        // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                              // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [119:0] cmd_demux_src19_data;                                                               // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                              // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [23:0] cmd_demux_src19_channel;                                                            // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                      // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                        // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                              // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [119:0] cmd_demux_src20_data;                                                               // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                              // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [23:0] cmd_demux_src20_channel;                                                            // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                      // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                        // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                              // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [119:0] cmd_demux_src21_data;                                                               // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                              // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [23:0] cmd_demux_src21_channel;                                                            // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                      // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                        // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_src22_valid;                                                              // cmd_demux:src22_valid -> cmd_mux_022:sink0_valid
	wire  [119:0] cmd_demux_src22_data;                                                               // cmd_demux:src22_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_src22_ready;                                                              // cmd_mux_022:sink0_ready -> cmd_demux:src22_ready
	wire   [23:0] cmd_demux_src22_channel;                                                            // cmd_demux:src22_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_src22_startofpacket;                                                      // cmd_demux:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_src22_endofpacket;                                                        // cmd_demux:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_src23_valid;                                                              // cmd_demux:src23_valid -> cmd_mux_023:sink0_valid
	wire  [119:0] cmd_demux_src23_data;                                                               // cmd_demux:src23_data -> cmd_mux_023:sink0_data
	wire          cmd_demux_src23_ready;                                                              // cmd_mux_023:sink0_ready -> cmd_demux:src23_ready
	wire   [23:0] cmd_demux_src23_channel;                                                            // cmd_demux:src23_channel -> cmd_mux_023:sink0_channel
	wire          cmd_demux_src23_startofpacket;                                                      // cmd_demux:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          cmd_demux_src23_endofpacket;                                                        // cmd_demux:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux_002:sink1_valid
	wire  [119:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux_002:sink1_ready -> cmd_demux_001:src0_ready
	wire   [23:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                           // cmd_demux_001:src7_valid -> cmd_mux_009:sink1_valid
	wire  [119:0] cmd_demux_001_src7_data;                                                            // cmd_demux_001:src7_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src7_ready;                                                           // cmd_mux_009:sink1_ready -> cmd_demux_001:src7_ready
	wire   [23:0] cmd_demux_001_src7_channel;                                                         // cmd_demux_001:src7_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                                   // cmd_demux_001:src7_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                     // cmd_demux_001:src7_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                           // cmd_demux_001:src8_valid -> cmd_mux_010:sink1_valid
	wire  [119:0] cmd_demux_001_src8_data;                                                            // cmd_demux_001:src8_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src8_ready;                                                           // cmd_mux_010:sink1_ready -> cmd_demux_001:src8_ready
	wire   [23:0] cmd_demux_001_src8_channel;                                                         // cmd_demux_001:src8_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                                   // cmd_demux_001:src8_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                     // cmd_demux_001:src8_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                                           // cmd_demux_001:src9_valid -> cmd_mux_011:sink1_valid
	wire  [119:0] cmd_demux_001_src9_data;                                                            // cmd_demux_001:src9_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src9_ready;                                                           // cmd_mux_011:sink1_ready -> cmd_demux_001:src9_ready
	wire   [23:0] cmd_demux_001_src9_channel;                                                         // cmd_demux_001:src9_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                                   // cmd_demux_001:src9_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                     // cmd_demux_001:src9_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                                          // cmd_demux_001:src10_valid -> cmd_mux_012:sink1_valid
	wire  [119:0] cmd_demux_001_src10_data;                                                           // cmd_demux_001:src10_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src10_ready;                                                          // cmd_mux_012:sink1_ready -> cmd_demux_001:src10_ready
	wire   [23:0] cmd_demux_001_src10_channel;                                                        // cmd_demux_001:src10_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                                  // cmd_demux_001:src10_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                    // cmd_demux_001:src10_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                                          // cmd_demux_001:src11_valid -> cmd_mux_013:sink1_valid
	wire  [119:0] cmd_demux_001_src11_data;                                                           // cmd_demux_001:src11_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_001_src11_ready;                                                          // cmd_mux_013:sink1_ready -> cmd_demux_001:src11_ready
	wire   [23:0] cmd_demux_001_src11_channel;                                                        // cmd_demux_001:src11_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                                                  // cmd_demux_001:src11_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                    // cmd_demux_001:src11_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                                          // cmd_demux_001:src12_valid -> cmd_mux_014:sink1_valid
	wire  [119:0] cmd_demux_001_src12_data;                                                           // cmd_demux_001:src12_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_001_src12_ready;                                                          // cmd_mux_014:sink1_ready -> cmd_demux_001:src12_ready
	wire   [23:0] cmd_demux_001_src12_channel;                                                        // cmd_demux_001:src12_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_001_src12_startofpacket;                                                  // cmd_demux_001:src12_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                    // cmd_demux_001:src12_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_001_src14_valid;                                                          // cmd_demux_001:src14_valid -> cmd_mux_016:sink1_valid
	wire  [119:0] cmd_demux_001_src14_data;                                                           // cmd_demux_001:src14_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_001_src14_ready;                                                          // cmd_mux_016:sink1_ready -> cmd_demux_001:src14_ready
	wire   [23:0] cmd_demux_001_src14_channel;                                                        // cmd_demux_001:src14_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_001_src14_startofpacket;                                                  // cmd_demux_001:src14_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                                    // cmd_demux_001:src14_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_001_src15_valid;                                                          // cmd_demux_001:src15_valid -> cmd_mux_017:sink1_valid
	wire  [119:0] cmd_demux_001_src15_data;                                                           // cmd_demux_001:src15_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_001_src15_ready;                                                          // cmd_mux_017:sink1_ready -> cmd_demux_001:src15_ready
	wire   [23:0] cmd_demux_001_src15_channel;                                                        // cmd_demux_001:src15_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_001_src15_startofpacket;                                                  // cmd_demux_001:src15_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                                    // cmd_demux_001:src15_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_001_src16_valid;                                                          // cmd_demux_001:src16_valid -> cmd_mux_018:sink1_valid
	wire  [119:0] cmd_demux_001_src16_data;                                                           // cmd_demux_001:src16_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_001_src16_ready;                                                          // cmd_mux_018:sink1_ready -> cmd_demux_001:src16_ready
	wire   [23:0] cmd_demux_001_src16_channel;                                                        // cmd_demux_001:src16_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_001_src16_startofpacket;                                                  // cmd_demux_001:src16_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                                                    // cmd_demux_001:src16_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_001_src17_valid;                                                          // cmd_demux_001:src17_valid -> cmd_mux_019:sink1_valid
	wire  [119:0] cmd_demux_001_src17_data;                                                           // cmd_demux_001:src17_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_001_src17_ready;                                                          // cmd_mux_019:sink1_ready -> cmd_demux_001:src17_ready
	wire   [23:0] cmd_demux_001_src17_channel;                                                        // cmd_demux_001:src17_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_001_src17_startofpacket;                                                  // cmd_demux_001:src17_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                                                    // cmd_demux_001:src17_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_001_src18_valid;                                                          // cmd_demux_001:src18_valid -> cmd_mux_020:sink1_valid
	wire  [119:0] cmd_demux_001_src18_data;                                                           // cmd_demux_001:src18_data -> cmd_mux_020:sink1_data
	wire          cmd_demux_001_src18_ready;                                                          // cmd_mux_020:sink1_ready -> cmd_demux_001:src18_ready
	wire   [23:0] cmd_demux_001_src18_channel;                                                        // cmd_demux_001:src18_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_001_src18_startofpacket;                                                  // cmd_demux_001:src18_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                                                    // cmd_demux_001:src18_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_001_src19_valid;                                                          // cmd_demux_001:src19_valid -> cmd_mux_021:sink1_valid
	wire  [119:0] cmd_demux_001_src19_data;                                                           // cmd_demux_001:src19_data -> cmd_mux_021:sink1_data
	wire          cmd_demux_001_src19_ready;                                                          // cmd_mux_021:sink1_ready -> cmd_demux_001:src19_ready
	wire   [23:0] cmd_demux_001_src19_channel;                                                        // cmd_demux_001:src19_channel -> cmd_mux_021:sink1_channel
	wire          cmd_demux_001_src19_startofpacket;                                                  // cmd_demux_001:src19_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                                                    // cmd_demux_001:src19_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          cmd_demux_001_src20_valid;                                                          // cmd_demux_001:src20_valid -> cmd_mux_022:sink1_valid
	wire  [119:0] cmd_demux_001_src20_data;                                                           // cmd_demux_001:src20_data -> cmd_mux_022:sink1_data
	wire          cmd_demux_001_src20_ready;                                                          // cmd_mux_022:sink1_ready -> cmd_demux_001:src20_ready
	wire   [23:0] cmd_demux_001_src20_channel;                                                        // cmd_demux_001:src20_channel -> cmd_mux_022:sink1_channel
	wire          cmd_demux_001_src20_startofpacket;                                                  // cmd_demux_001:src20_startofpacket -> cmd_mux_022:sink1_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                                                    // cmd_demux_001:src20_endofpacket -> cmd_mux_022:sink1_endofpacket
	wire          cmd_demux_001_src21_valid;                                                          // cmd_demux_001:src21_valid -> cmd_mux_023:sink1_valid
	wire  [119:0] cmd_demux_001_src21_data;                                                           // cmd_demux_001:src21_data -> cmd_mux_023:sink1_data
	wire          cmd_demux_001_src21_ready;                                                          // cmd_mux_023:sink1_ready -> cmd_demux_001:src21_ready
	wire   [23:0] cmd_demux_001_src21_channel;                                                        // cmd_demux_001:src21_channel -> cmd_mux_023:sink1_channel
	wire          cmd_demux_001_src21_startofpacket;                                                  // cmd_demux_001:src21_startofpacket -> cmd_mux_023:sink1_startofpacket
	wire          cmd_demux_001_src21_endofpacket;                                                    // cmd_demux_001:src21_endofpacket -> cmd_mux_023:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                           // cmd_demux_002:src0_valid -> cmd_mux_002:sink2_valid
	wire  [119:0] cmd_demux_002_src0_data;                                                            // cmd_demux_002:src0_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_002_src0_ready;                                                           // cmd_mux_002:sink2_ready -> cmd_demux_002:src0_ready
	wire   [23:0] cmd_demux_002_src0_channel;                                                         // cmd_demux_002:src0_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                   // cmd_demux_002:src0_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                     // cmd_demux_002:src0_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_002_src7_valid;                                                           // cmd_demux_002:src7_valid -> cmd_mux_009:sink2_valid
	wire  [119:0] cmd_demux_002_src7_data;                                                            // cmd_demux_002:src7_data -> cmd_mux_009:sink2_data
	wire          cmd_demux_002_src7_ready;                                                           // cmd_mux_009:sink2_ready -> cmd_demux_002:src7_ready
	wire   [23:0] cmd_demux_002_src7_channel;                                                         // cmd_demux_002:src7_channel -> cmd_mux_009:sink2_channel
	wire          cmd_demux_002_src7_startofpacket;                                                   // cmd_demux_002:src7_startofpacket -> cmd_mux_009:sink2_startofpacket
	wire          cmd_demux_002_src7_endofpacket;                                                     // cmd_demux_002:src7_endofpacket -> cmd_mux_009:sink2_endofpacket
	wire          cmd_demux_002_src8_valid;                                                           // cmd_demux_002:src8_valid -> cmd_mux_010:sink2_valid
	wire  [119:0] cmd_demux_002_src8_data;                                                            // cmd_demux_002:src8_data -> cmd_mux_010:sink2_data
	wire          cmd_demux_002_src8_ready;                                                           // cmd_mux_010:sink2_ready -> cmd_demux_002:src8_ready
	wire   [23:0] cmd_demux_002_src8_channel;                                                         // cmd_demux_002:src8_channel -> cmd_mux_010:sink2_channel
	wire          cmd_demux_002_src8_startofpacket;                                                   // cmd_demux_002:src8_startofpacket -> cmd_mux_010:sink2_startofpacket
	wire          cmd_demux_002_src8_endofpacket;                                                     // cmd_demux_002:src8_endofpacket -> cmd_mux_010:sink2_endofpacket
	wire          cmd_demux_002_src9_valid;                                                           // cmd_demux_002:src9_valid -> cmd_mux_011:sink2_valid
	wire  [119:0] cmd_demux_002_src9_data;                                                            // cmd_demux_002:src9_data -> cmd_mux_011:sink2_data
	wire          cmd_demux_002_src9_ready;                                                           // cmd_mux_011:sink2_ready -> cmd_demux_002:src9_ready
	wire   [23:0] cmd_demux_002_src9_channel;                                                         // cmd_demux_002:src9_channel -> cmd_mux_011:sink2_channel
	wire          cmd_demux_002_src9_startofpacket;                                                   // cmd_demux_002:src9_startofpacket -> cmd_mux_011:sink2_startofpacket
	wire          cmd_demux_002_src9_endofpacket;                                                     // cmd_demux_002:src9_endofpacket -> cmd_mux_011:sink2_endofpacket
	wire          cmd_demux_002_src10_valid;                                                          // cmd_demux_002:src10_valid -> cmd_mux_012:sink2_valid
	wire  [119:0] cmd_demux_002_src10_data;                                                           // cmd_demux_002:src10_data -> cmd_mux_012:sink2_data
	wire          cmd_demux_002_src10_ready;                                                          // cmd_mux_012:sink2_ready -> cmd_demux_002:src10_ready
	wire   [23:0] cmd_demux_002_src10_channel;                                                        // cmd_demux_002:src10_channel -> cmd_mux_012:sink2_channel
	wire          cmd_demux_002_src10_startofpacket;                                                  // cmd_demux_002:src10_startofpacket -> cmd_mux_012:sink2_startofpacket
	wire          cmd_demux_002_src10_endofpacket;                                                    // cmd_demux_002:src10_endofpacket -> cmd_mux_012:sink2_endofpacket
	wire          cmd_demux_002_src11_valid;                                                          // cmd_demux_002:src11_valid -> cmd_mux_013:sink2_valid
	wire  [119:0] cmd_demux_002_src11_data;                                                           // cmd_demux_002:src11_data -> cmd_mux_013:sink2_data
	wire          cmd_demux_002_src11_ready;                                                          // cmd_mux_013:sink2_ready -> cmd_demux_002:src11_ready
	wire   [23:0] cmd_demux_002_src11_channel;                                                        // cmd_demux_002:src11_channel -> cmd_mux_013:sink2_channel
	wire          cmd_demux_002_src11_startofpacket;                                                  // cmd_demux_002:src11_startofpacket -> cmd_mux_013:sink2_startofpacket
	wire          cmd_demux_002_src11_endofpacket;                                                    // cmd_demux_002:src11_endofpacket -> cmd_mux_013:sink2_endofpacket
	wire          cmd_demux_002_src12_valid;                                                          // cmd_demux_002:src12_valid -> cmd_mux_014:sink2_valid
	wire  [119:0] cmd_demux_002_src12_data;                                                           // cmd_demux_002:src12_data -> cmd_mux_014:sink2_data
	wire          cmd_demux_002_src12_ready;                                                          // cmd_mux_014:sink2_ready -> cmd_demux_002:src12_ready
	wire   [23:0] cmd_demux_002_src12_channel;                                                        // cmd_demux_002:src12_channel -> cmd_mux_014:sink2_channel
	wire          cmd_demux_002_src12_startofpacket;                                                  // cmd_demux_002:src12_startofpacket -> cmd_mux_014:sink2_startofpacket
	wire          cmd_demux_002_src12_endofpacket;                                                    // cmd_demux_002:src12_endofpacket -> cmd_mux_014:sink2_endofpacket
	wire          cmd_demux_002_src14_valid;                                                          // cmd_demux_002:src14_valid -> cmd_mux_016:sink2_valid
	wire  [119:0] cmd_demux_002_src14_data;                                                           // cmd_demux_002:src14_data -> cmd_mux_016:sink2_data
	wire          cmd_demux_002_src14_ready;                                                          // cmd_mux_016:sink2_ready -> cmd_demux_002:src14_ready
	wire   [23:0] cmd_demux_002_src14_channel;                                                        // cmd_demux_002:src14_channel -> cmd_mux_016:sink2_channel
	wire          cmd_demux_002_src14_startofpacket;                                                  // cmd_demux_002:src14_startofpacket -> cmd_mux_016:sink2_startofpacket
	wire          cmd_demux_002_src14_endofpacket;                                                    // cmd_demux_002:src14_endofpacket -> cmd_mux_016:sink2_endofpacket
	wire          cmd_demux_002_src15_valid;                                                          // cmd_demux_002:src15_valid -> cmd_mux_017:sink2_valid
	wire  [119:0] cmd_demux_002_src15_data;                                                           // cmd_demux_002:src15_data -> cmd_mux_017:sink2_data
	wire          cmd_demux_002_src15_ready;                                                          // cmd_mux_017:sink2_ready -> cmd_demux_002:src15_ready
	wire   [23:0] cmd_demux_002_src15_channel;                                                        // cmd_demux_002:src15_channel -> cmd_mux_017:sink2_channel
	wire          cmd_demux_002_src15_startofpacket;                                                  // cmd_demux_002:src15_startofpacket -> cmd_mux_017:sink2_startofpacket
	wire          cmd_demux_002_src15_endofpacket;                                                    // cmd_demux_002:src15_endofpacket -> cmd_mux_017:sink2_endofpacket
	wire          cmd_demux_002_src16_valid;                                                          // cmd_demux_002:src16_valid -> cmd_mux_018:sink2_valid
	wire  [119:0] cmd_demux_002_src16_data;                                                           // cmd_demux_002:src16_data -> cmd_mux_018:sink2_data
	wire          cmd_demux_002_src16_ready;                                                          // cmd_mux_018:sink2_ready -> cmd_demux_002:src16_ready
	wire   [23:0] cmd_demux_002_src16_channel;                                                        // cmd_demux_002:src16_channel -> cmd_mux_018:sink2_channel
	wire          cmd_demux_002_src16_startofpacket;                                                  // cmd_demux_002:src16_startofpacket -> cmd_mux_018:sink2_startofpacket
	wire          cmd_demux_002_src16_endofpacket;                                                    // cmd_demux_002:src16_endofpacket -> cmd_mux_018:sink2_endofpacket
	wire          cmd_demux_002_src17_valid;                                                          // cmd_demux_002:src17_valid -> cmd_mux_019:sink2_valid
	wire  [119:0] cmd_demux_002_src17_data;                                                           // cmd_demux_002:src17_data -> cmd_mux_019:sink2_data
	wire          cmd_demux_002_src17_ready;                                                          // cmd_mux_019:sink2_ready -> cmd_demux_002:src17_ready
	wire   [23:0] cmd_demux_002_src17_channel;                                                        // cmd_demux_002:src17_channel -> cmd_mux_019:sink2_channel
	wire          cmd_demux_002_src17_startofpacket;                                                  // cmd_demux_002:src17_startofpacket -> cmd_mux_019:sink2_startofpacket
	wire          cmd_demux_002_src17_endofpacket;                                                    // cmd_demux_002:src17_endofpacket -> cmd_mux_019:sink2_endofpacket
	wire          cmd_demux_002_src18_valid;                                                          // cmd_demux_002:src18_valid -> cmd_mux_020:sink2_valid
	wire  [119:0] cmd_demux_002_src18_data;                                                           // cmd_demux_002:src18_data -> cmd_mux_020:sink2_data
	wire          cmd_demux_002_src18_ready;                                                          // cmd_mux_020:sink2_ready -> cmd_demux_002:src18_ready
	wire   [23:0] cmd_demux_002_src18_channel;                                                        // cmd_demux_002:src18_channel -> cmd_mux_020:sink2_channel
	wire          cmd_demux_002_src18_startofpacket;                                                  // cmd_demux_002:src18_startofpacket -> cmd_mux_020:sink2_startofpacket
	wire          cmd_demux_002_src18_endofpacket;                                                    // cmd_demux_002:src18_endofpacket -> cmd_mux_020:sink2_endofpacket
	wire          cmd_demux_002_src19_valid;                                                          // cmd_demux_002:src19_valid -> cmd_mux_021:sink2_valid
	wire  [119:0] cmd_demux_002_src19_data;                                                           // cmd_demux_002:src19_data -> cmd_mux_021:sink2_data
	wire          cmd_demux_002_src19_ready;                                                          // cmd_mux_021:sink2_ready -> cmd_demux_002:src19_ready
	wire   [23:0] cmd_demux_002_src19_channel;                                                        // cmd_demux_002:src19_channel -> cmd_mux_021:sink2_channel
	wire          cmd_demux_002_src19_startofpacket;                                                  // cmd_demux_002:src19_startofpacket -> cmd_mux_021:sink2_startofpacket
	wire          cmd_demux_002_src19_endofpacket;                                                    // cmd_demux_002:src19_endofpacket -> cmd_mux_021:sink2_endofpacket
	wire          cmd_demux_002_src20_valid;                                                          // cmd_demux_002:src20_valid -> cmd_mux_022:sink2_valid
	wire  [119:0] cmd_demux_002_src20_data;                                                           // cmd_demux_002:src20_data -> cmd_mux_022:sink2_data
	wire          cmd_demux_002_src20_ready;                                                          // cmd_mux_022:sink2_ready -> cmd_demux_002:src20_ready
	wire   [23:0] cmd_demux_002_src20_channel;                                                        // cmd_demux_002:src20_channel -> cmd_mux_022:sink2_channel
	wire          cmd_demux_002_src20_startofpacket;                                                  // cmd_demux_002:src20_startofpacket -> cmd_mux_022:sink2_startofpacket
	wire          cmd_demux_002_src20_endofpacket;                                                    // cmd_demux_002:src20_endofpacket -> cmd_mux_022:sink2_endofpacket
	wire          cmd_demux_002_src21_valid;                                                          // cmd_demux_002:src21_valid -> cmd_mux_023:sink2_valid
	wire  [119:0] cmd_demux_002_src21_data;                                                           // cmd_demux_002:src21_data -> cmd_mux_023:sink2_data
	wire          cmd_demux_002_src21_ready;                                                          // cmd_mux_023:sink2_ready -> cmd_demux_002:src21_ready
	wire   [23:0] cmd_demux_002_src21_channel;                                                        // cmd_demux_002:src21_channel -> cmd_mux_023:sink2_channel
	wire          cmd_demux_002_src21_startofpacket;                                                  // cmd_demux_002:src21_startofpacket -> cmd_mux_023:sink2_startofpacket
	wire          cmd_demux_002_src21_endofpacket;                                                    // cmd_demux_002:src21_endofpacket -> cmd_mux_023:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                           // cmd_demux_003:src0_valid -> cmd_mux_001:sink1_valid
	wire  [119:0] cmd_demux_003_src0_data;                                                            // cmd_demux_003:src0_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_003_src0_ready;                                                           // cmd_mux_001:sink1_ready -> cmd_demux_003:src0_ready
	wire   [23:0] cmd_demux_003_src0_channel;                                                         // cmd_demux_003:src0_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_003_src0_startofpacket;                                                   // cmd_demux_003:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                     // cmd_demux_003:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                           // cmd_demux_003:src1_valid -> cmd_mux_013:sink3_valid
	wire  [119:0] cmd_demux_003_src1_data;                                                            // cmd_demux_003:src1_data -> cmd_mux_013:sink3_data
	wire          cmd_demux_003_src1_ready;                                                           // cmd_mux_013:sink3_ready -> cmd_demux_003:src1_ready
	wire   [23:0] cmd_demux_003_src1_channel;                                                         // cmd_demux_003:src1_channel -> cmd_mux_013:sink3_channel
	wire          cmd_demux_003_src1_startofpacket;                                                   // cmd_demux_003:src1_startofpacket -> cmd_mux_013:sink3_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                     // cmd_demux_003:src1_endofpacket -> cmd_mux_013:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [119:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [23:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [119:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [23:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                           // rsp_demux_001:src1_valid -> rsp_mux_003:sink0_valid
	wire  [119:0] rsp_demux_001_src1_data;                                                            // rsp_demux_001:src1_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_001_src1_ready;                                                           // rsp_mux_003:sink0_ready -> rsp_demux_001:src1_ready
	wire   [23:0] rsp_demux_001_src1_channel;                                                         // rsp_demux_001:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_001_src1_startofpacket;                                                   // rsp_demux_001:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                     // rsp_demux_001:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [119:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [23:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                           // rsp_demux_002:src1_valid -> rsp_mux_001:sink0_valid
	wire  [119:0] rsp_demux_002_src1_data;                                                            // rsp_demux_002:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_002_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux_002:src1_ready
	wire   [23:0] rsp_demux_002_src1_channel;                                                         // rsp_demux_002:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_002_src1_startofpacket;                                                   // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                     // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_002_src2_valid;                                                           // rsp_demux_002:src2_valid -> rsp_mux_002:sink0_valid
	wire  [119:0] rsp_demux_002_src2_data;                                                            // rsp_demux_002:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_002_src2_ready;                                                           // rsp_mux_002:sink0_ready -> rsp_demux_002:src2_ready
	wire   [23:0] rsp_demux_002_src2_channel;                                                         // rsp_demux_002:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_002_src2_startofpacket;                                                   // rsp_demux_002:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                                     // rsp_demux_002:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [119:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                           // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [23:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                           // rsp_demux_009:src1_valid -> rsp_mux_001:sink7_valid
	wire  [119:0] rsp_demux_009_src1_data;                                                            // rsp_demux_009:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_009_src1_ready;                                                           // rsp_mux_001:sink7_ready -> rsp_demux_009:src1_ready
	wire   [23:0] rsp_demux_009_src1_channel;                                                         // rsp_demux_009:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_009_src1_startofpacket;                                                   // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                     // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_009_src2_valid;                                                           // rsp_demux_009:src2_valid -> rsp_mux_002:sink7_valid
	wire  [119:0] rsp_demux_009_src2_data;                                                            // rsp_demux_009:src2_data -> rsp_mux_002:sink7_data
	wire          rsp_demux_009_src2_ready;                                                           // rsp_mux_002:sink7_ready -> rsp_demux_009:src2_ready
	wire   [23:0] rsp_demux_009_src2_channel;                                                         // rsp_demux_009:src2_channel -> rsp_mux_002:sink7_channel
	wire          rsp_demux_009_src2_startofpacket;                                                   // rsp_demux_009:src2_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire          rsp_demux_009_src2_endofpacket;                                                     // rsp_demux_009:src2_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [119:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                           // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [23:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                           // rsp_demux_010:src1_valid -> rsp_mux_001:sink8_valid
	wire  [119:0] rsp_demux_010_src1_data;                                                            // rsp_demux_010:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_010_src1_ready;                                                           // rsp_mux_001:sink8_ready -> rsp_demux_010:src1_ready
	wire   [23:0] rsp_demux_010_src1_channel;                                                         // rsp_demux_010:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_010_src1_startofpacket;                                                   // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                     // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_010_src2_valid;                                                           // rsp_demux_010:src2_valid -> rsp_mux_002:sink8_valid
	wire  [119:0] rsp_demux_010_src2_data;                                                            // rsp_demux_010:src2_data -> rsp_mux_002:sink8_data
	wire          rsp_demux_010_src2_ready;                                                           // rsp_mux_002:sink8_ready -> rsp_demux_010:src2_ready
	wire   [23:0] rsp_demux_010_src2_channel;                                                         // rsp_demux_010:src2_channel -> rsp_mux_002:sink8_channel
	wire          rsp_demux_010_src2_startofpacket;                                                   // rsp_demux_010:src2_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire          rsp_demux_010_src2_endofpacket;                                                     // rsp_demux_010:src2_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire          rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [119:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                           // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [23:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                           // rsp_demux_011:src1_valid -> rsp_mux_001:sink9_valid
	wire  [119:0] rsp_demux_011_src1_data;                                                            // rsp_demux_011:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_011_src1_ready;                                                           // rsp_mux_001:sink9_ready -> rsp_demux_011:src1_ready
	wire   [23:0] rsp_demux_011_src1_channel;                                                         // rsp_demux_011:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_011_src1_startofpacket;                                                   // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                     // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_011_src2_valid;                                                           // rsp_demux_011:src2_valid -> rsp_mux_002:sink9_valid
	wire  [119:0] rsp_demux_011_src2_data;                                                            // rsp_demux_011:src2_data -> rsp_mux_002:sink9_data
	wire          rsp_demux_011_src2_ready;                                                           // rsp_mux_002:sink9_ready -> rsp_demux_011:src2_ready
	wire   [23:0] rsp_demux_011_src2_channel;                                                         // rsp_demux_011:src2_channel -> rsp_mux_002:sink9_channel
	wire          rsp_demux_011_src2_startofpacket;                                                   // rsp_demux_011:src2_startofpacket -> rsp_mux_002:sink9_startofpacket
	wire          rsp_demux_011_src2_endofpacket;                                                     // rsp_demux_011:src2_endofpacket -> rsp_mux_002:sink9_endofpacket
	wire          rsp_demux_012_src0_valid;                                                           // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [119:0] rsp_demux_012_src0_data;                                                            // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                           // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [23:0] rsp_demux_012_src0_channel;                                                         // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                   // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                     // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                           // rsp_demux_012:src1_valid -> rsp_mux_001:sink10_valid
	wire  [119:0] rsp_demux_012_src1_data;                                                            // rsp_demux_012:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_012_src1_ready;                                                           // rsp_mux_001:sink10_ready -> rsp_demux_012:src1_ready
	wire   [23:0] rsp_demux_012_src1_channel;                                                         // rsp_demux_012:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_012_src1_startofpacket;                                                   // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                     // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_012_src2_valid;                                                           // rsp_demux_012:src2_valid -> rsp_mux_002:sink10_valid
	wire  [119:0] rsp_demux_012_src2_data;                                                            // rsp_demux_012:src2_data -> rsp_mux_002:sink10_data
	wire          rsp_demux_012_src2_ready;                                                           // rsp_mux_002:sink10_ready -> rsp_demux_012:src2_ready
	wire   [23:0] rsp_demux_012_src2_channel;                                                         // rsp_demux_012:src2_channel -> rsp_mux_002:sink10_channel
	wire          rsp_demux_012_src2_startofpacket;                                                   // rsp_demux_012:src2_startofpacket -> rsp_mux_002:sink10_startofpacket
	wire          rsp_demux_012_src2_endofpacket;                                                     // rsp_demux_012:src2_endofpacket -> rsp_mux_002:sink10_endofpacket
	wire          rsp_demux_013_src0_valid;                                                           // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [119:0] rsp_demux_013_src0_data;                                                            // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                           // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [23:0] rsp_demux_013_src0_channel;                                                         // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                   // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                     // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                                           // rsp_demux_013:src1_valid -> rsp_mux_001:sink11_valid
	wire  [119:0] rsp_demux_013_src1_data;                                                            // rsp_demux_013:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_013_src1_ready;                                                           // rsp_mux_001:sink11_ready -> rsp_demux_013:src1_ready
	wire   [23:0] rsp_demux_013_src1_channel;                                                         // rsp_demux_013:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_013_src1_startofpacket;                                                   // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                                     // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_013_src2_valid;                                                           // rsp_demux_013:src2_valid -> rsp_mux_002:sink11_valid
	wire  [119:0] rsp_demux_013_src2_data;                                                            // rsp_demux_013:src2_data -> rsp_mux_002:sink11_data
	wire          rsp_demux_013_src2_ready;                                                           // rsp_mux_002:sink11_ready -> rsp_demux_013:src2_ready
	wire   [23:0] rsp_demux_013_src2_channel;                                                         // rsp_demux_013:src2_channel -> rsp_mux_002:sink11_channel
	wire          rsp_demux_013_src2_startofpacket;                                                   // rsp_demux_013:src2_startofpacket -> rsp_mux_002:sink11_startofpacket
	wire          rsp_demux_013_src2_endofpacket;                                                     // rsp_demux_013:src2_endofpacket -> rsp_mux_002:sink11_endofpacket
	wire          rsp_demux_013_src3_valid;                                                           // rsp_demux_013:src3_valid -> rsp_mux_003:sink1_valid
	wire  [119:0] rsp_demux_013_src3_data;                                                            // rsp_demux_013:src3_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_013_src3_ready;                                                           // rsp_mux_003:sink1_ready -> rsp_demux_013:src3_ready
	wire   [23:0] rsp_demux_013_src3_channel;                                                         // rsp_demux_013:src3_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_013_src3_startofpacket;                                                   // rsp_demux_013:src3_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_013_src3_endofpacket;                                                     // rsp_demux_013:src3_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_014_src0_valid;                                                           // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [119:0] rsp_demux_014_src0_data;                                                            // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                           // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [23:0] rsp_demux_014_src0_channel;                                                         // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                   // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                     // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                                           // rsp_demux_014:src1_valid -> rsp_mux_001:sink12_valid
	wire  [119:0] rsp_demux_014_src1_data;                                                            // rsp_demux_014:src1_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_014_src1_ready;                                                           // rsp_mux_001:sink12_ready -> rsp_demux_014:src1_ready
	wire   [23:0] rsp_demux_014_src1_channel;                                                         // rsp_demux_014:src1_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_014_src1_startofpacket;                                                   // rsp_demux_014:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                     // rsp_demux_014:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_014_src2_valid;                                                           // rsp_demux_014:src2_valid -> rsp_mux_002:sink12_valid
	wire  [119:0] rsp_demux_014_src2_data;                                                            // rsp_demux_014:src2_data -> rsp_mux_002:sink12_data
	wire          rsp_demux_014_src2_ready;                                                           // rsp_mux_002:sink12_ready -> rsp_demux_014:src2_ready
	wire   [23:0] rsp_demux_014_src2_channel;                                                         // rsp_demux_014:src2_channel -> rsp_mux_002:sink12_channel
	wire          rsp_demux_014_src2_startofpacket;                                                   // rsp_demux_014:src2_startofpacket -> rsp_mux_002:sink12_startofpacket
	wire          rsp_demux_014_src2_endofpacket;                                                     // rsp_demux_014:src2_endofpacket -> rsp_mux_002:sink12_endofpacket
	wire          rsp_demux_016_src0_valid;                                                           // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [119:0] rsp_demux_016_src0_data;                                                            // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                           // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [23:0] rsp_demux_016_src0_channel;                                                         // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                   // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                     // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_016_src1_valid;                                                           // rsp_demux_016:src1_valid -> rsp_mux_001:sink14_valid
	wire  [119:0] rsp_demux_016_src1_data;                                                            // rsp_demux_016:src1_data -> rsp_mux_001:sink14_data
	wire          rsp_demux_016_src1_ready;                                                           // rsp_mux_001:sink14_ready -> rsp_demux_016:src1_ready
	wire   [23:0] rsp_demux_016_src1_channel;                                                         // rsp_demux_016:src1_channel -> rsp_mux_001:sink14_channel
	wire          rsp_demux_016_src1_startofpacket;                                                   // rsp_demux_016:src1_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                                     // rsp_demux_016:src1_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_016_src2_valid;                                                           // rsp_demux_016:src2_valid -> rsp_mux_002:sink14_valid
	wire  [119:0] rsp_demux_016_src2_data;                                                            // rsp_demux_016:src2_data -> rsp_mux_002:sink14_data
	wire          rsp_demux_016_src2_ready;                                                           // rsp_mux_002:sink14_ready -> rsp_demux_016:src2_ready
	wire   [23:0] rsp_demux_016_src2_channel;                                                         // rsp_demux_016:src2_channel -> rsp_mux_002:sink14_channel
	wire          rsp_demux_016_src2_startofpacket;                                                   // rsp_demux_016:src2_startofpacket -> rsp_mux_002:sink14_startofpacket
	wire          rsp_demux_016_src2_endofpacket;                                                     // rsp_demux_016:src2_endofpacket -> rsp_mux_002:sink14_endofpacket
	wire          rsp_demux_017_src0_valid;                                                           // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [119:0] rsp_demux_017_src0_data;                                                            // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                           // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [23:0] rsp_demux_017_src0_channel;                                                         // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                   // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                     // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_017_src1_valid;                                                           // rsp_demux_017:src1_valid -> rsp_mux_001:sink15_valid
	wire  [119:0] rsp_demux_017_src1_data;                                                            // rsp_demux_017:src1_data -> rsp_mux_001:sink15_data
	wire          rsp_demux_017_src1_ready;                                                           // rsp_mux_001:sink15_ready -> rsp_demux_017:src1_ready
	wire   [23:0] rsp_demux_017_src1_channel;                                                         // rsp_demux_017:src1_channel -> rsp_mux_001:sink15_channel
	wire          rsp_demux_017_src1_startofpacket;                                                   // rsp_demux_017:src1_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                                     // rsp_demux_017:src1_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_017_src2_valid;                                                           // rsp_demux_017:src2_valid -> rsp_mux_002:sink15_valid
	wire  [119:0] rsp_demux_017_src2_data;                                                            // rsp_demux_017:src2_data -> rsp_mux_002:sink15_data
	wire          rsp_demux_017_src2_ready;                                                           // rsp_mux_002:sink15_ready -> rsp_demux_017:src2_ready
	wire   [23:0] rsp_demux_017_src2_channel;                                                         // rsp_demux_017:src2_channel -> rsp_mux_002:sink15_channel
	wire          rsp_demux_017_src2_startofpacket;                                                   // rsp_demux_017:src2_startofpacket -> rsp_mux_002:sink15_startofpacket
	wire          rsp_demux_017_src2_endofpacket;                                                     // rsp_demux_017:src2_endofpacket -> rsp_mux_002:sink15_endofpacket
	wire          rsp_demux_018_src0_valid;                                                           // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [119:0] rsp_demux_018_src0_data;                                                            // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                           // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [23:0] rsp_demux_018_src0_channel;                                                         // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                   // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                     // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_018_src1_valid;                                                           // rsp_demux_018:src1_valid -> rsp_mux_001:sink16_valid
	wire  [119:0] rsp_demux_018_src1_data;                                                            // rsp_demux_018:src1_data -> rsp_mux_001:sink16_data
	wire          rsp_demux_018_src1_ready;                                                           // rsp_mux_001:sink16_ready -> rsp_demux_018:src1_ready
	wire   [23:0] rsp_demux_018_src1_channel;                                                         // rsp_demux_018:src1_channel -> rsp_mux_001:sink16_channel
	wire          rsp_demux_018_src1_startofpacket;                                                   // rsp_demux_018:src1_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                                     // rsp_demux_018:src1_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_018_src2_valid;                                                           // rsp_demux_018:src2_valid -> rsp_mux_002:sink16_valid
	wire  [119:0] rsp_demux_018_src2_data;                                                            // rsp_demux_018:src2_data -> rsp_mux_002:sink16_data
	wire          rsp_demux_018_src2_ready;                                                           // rsp_mux_002:sink16_ready -> rsp_demux_018:src2_ready
	wire   [23:0] rsp_demux_018_src2_channel;                                                         // rsp_demux_018:src2_channel -> rsp_mux_002:sink16_channel
	wire          rsp_demux_018_src2_startofpacket;                                                   // rsp_demux_018:src2_startofpacket -> rsp_mux_002:sink16_startofpacket
	wire          rsp_demux_018_src2_endofpacket;                                                     // rsp_demux_018:src2_endofpacket -> rsp_mux_002:sink16_endofpacket
	wire          rsp_demux_019_src0_valid;                                                           // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [119:0] rsp_demux_019_src0_data;                                                            // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                           // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [23:0] rsp_demux_019_src0_channel;                                                         // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                   // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                     // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                                           // rsp_demux_019:src1_valid -> rsp_mux_001:sink17_valid
	wire  [119:0] rsp_demux_019_src1_data;                                                            // rsp_demux_019:src1_data -> rsp_mux_001:sink17_data
	wire          rsp_demux_019_src1_ready;                                                           // rsp_mux_001:sink17_ready -> rsp_demux_019:src1_ready
	wire   [23:0] rsp_demux_019_src1_channel;                                                         // rsp_demux_019:src1_channel -> rsp_mux_001:sink17_channel
	wire          rsp_demux_019_src1_startofpacket;                                                   // rsp_demux_019:src1_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                                     // rsp_demux_019:src1_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_019_src2_valid;                                                           // rsp_demux_019:src2_valid -> rsp_mux_002:sink17_valid
	wire  [119:0] rsp_demux_019_src2_data;                                                            // rsp_demux_019:src2_data -> rsp_mux_002:sink17_data
	wire          rsp_demux_019_src2_ready;                                                           // rsp_mux_002:sink17_ready -> rsp_demux_019:src2_ready
	wire   [23:0] rsp_demux_019_src2_channel;                                                         // rsp_demux_019:src2_channel -> rsp_mux_002:sink17_channel
	wire          rsp_demux_019_src2_startofpacket;                                                   // rsp_demux_019:src2_startofpacket -> rsp_mux_002:sink17_startofpacket
	wire          rsp_demux_019_src2_endofpacket;                                                     // rsp_demux_019:src2_endofpacket -> rsp_mux_002:sink17_endofpacket
	wire          rsp_demux_020_src0_valid;                                                           // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [119:0] rsp_demux_020_src0_data;                                                            // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                           // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [23:0] rsp_demux_020_src0_channel;                                                         // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                   // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                     // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_020_src1_valid;                                                           // rsp_demux_020:src1_valid -> rsp_mux_001:sink18_valid
	wire  [119:0] rsp_demux_020_src1_data;                                                            // rsp_demux_020:src1_data -> rsp_mux_001:sink18_data
	wire          rsp_demux_020_src1_ready;                                                           // rsp_mux_001:sink18_ready -> rsp_demux_020:src1_ready
	wire   [23:0] rsp_demux_020_src1_channel;                                                         // rsp_demux_020:src1_channel -> rsp_mux_001:sink18_channel
	wire          rsp_demux_020_src1_startofpacket;                                                   // rsp_demux_020:src1_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                                                     // rsp_demux_020:src1_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_020_src2_valid;                                                           // rsp_demux_020:src2_valid -> rsp_mux_002:sink18_valid
	wire  [119:0] rsp_demux_020_src2_data;                                                            // rsp_demux_020:src2_data -> rsp_mux_002:sink18_data
	wire          rsp_demux_020_src2_ready;                                                           // rsp_mux_002:sink18_ready -> rsp_demux_020:src2_ready
	wire   [23:0] rsp_demux_020_src2_channel;                                                         // rsp_demux_020:src2_channel -> rsp_mux_002:sink18_channel
	wire          rsp_demux_020_src2_startofpacket;                                                   // rsp_demux_020:src2_startofpacket -> rsp_mux_002:sink18_startofpacket
	wire          rsp_demux_020_src2_endofpacket;                                                     // rsp_demux_020:src2_endofpacket -> rsp_mux_002:sink18_endofpacket
	wire          rsp_demux_021_src0_valid;                                                           // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [119:0] rsp_demux_021_src0_data;                                                            // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                           // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [23:0] rsp_demux_021_src0_channel;                                                         // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                   // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                     // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_021_src1_valid;                                                           // rsp_demux_021:src1_valid -> rsp_mux_001:sink19_valid
	wire  [119:0] rsp_demux_021_src1_data;                                                            // rsp_demux_021:src1_data -> rsp_mux_001:sink19_data
	wire          rsp_demux_021_src1_ready;                                                           // rsp_mux_001:sink19_ready -> rsp_demux_021:src1_ready
	wire   [23:0] rsp_demux_021_src1_channel;                                                         // rsp_demux_021:src1_channel -> rsp_mux_001:sink19_channel
	wire          rsp_demux_021_src1_startofpacket;                                                   // rsp_demux_021:src1_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                                                     // rsp_demux_021:src1_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_021_src2_valid;                                                           // rsp_demux_021:src2_valid -> rsp_mux_002:sink19_valid
	wire  [119:0] rsp_demux_021_src2_data;                                                            // rsp_demux_021:src2_data -> rsp_mux_002:sink19_data
	wire          rsp_demux_021_src2_ready;                                                           // rsp_mux_002:sink19_ready -> rsp_demux_021:src2_ready
	wire   [23:0] rsp_demux_021_src2_channel;                                                         // rsp_demux_021:src2_channel -> rsp_mux_002:sink19_channel
	wire          rsp_demux_021_src2_startofpacket;                                                   // rsp_demux_021:src2_startofpacket -> rsp_mux_002:sink19_startofpacket
	wire          rsp_demux_021_src2_endofpacket;                                                     // rsp_demux_021:src2_endofpacket -> rsp_mux_002:sink19_endofpacket
	wire          rsp_demux_022_src0_valid;                                                           // rsp_demux_022:src0_valid -> rsp_mux:sink22_valid
	wire  [119:0] rsp_demux_022_src0_data;                                                            // rsp_demux_022:src0_data -> rsp_mux:sink22_data
	wire          rsp_demux_022_src0_ready;                                                           // rsp_mux:sink22_ready -> rsp_demux_022:src0_ready
	wire   [23:0] rsp_demux_022_src0_channel;                                                         // rsp_demux_022:src0_channel -> rsp_mux:sink22_channel
	wire          rsp_demux_022_src0_startofpacket;                                                   // rsp_demux_022:src0_startofpacket -> rsp_mux:sink22_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                     // rsp_demux_022:src0_endofpacket -> rsp_mux:sink22_endofpacket
	wire          rsp_demux_022_src1_valid;                                                           // rsp_demux_022:src1_valid -> rsp_mux_001:sink20_valid
	wire  [119:0] rsp_demux_022_src1_data;                                                            // rsp_demux_022:src1_data -> rsp_mux_001:sink20_data
	wire          rsp_demux_022_src1_ready;                                                           // rsp_mux_001:sink20_ready -> rsp_demux_022:src1_ready
	wire   [23:0] rsp_demux_022_src1_channel;                                                         // rsp_demux_022:src1_channel -> rsp_mux_001:sink20_channel
	wire          rsp_demux_022_src1_startofpacket;                                                   // rsp_demux_022:src1_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          rsp_demux_022_src1_endofpacket;                                                     // rsp_demux_022:src1_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          rsp_demux_022_src2_valid;                                                           // rsp_demux_022:src2_valid -> rsp_mux_002:sink20_valid
	wire  [119:0] rsp_demux_022_src2_data;                                                            // rsp_demux_022:src2_data -> rsp_mux_002:sink20_data
	wire          rsp_demux_022_src2_ready;                                                           // rsp_mux_002:sink20_ready -> rsp_demux_022:src2_ready
	wire   [23:0] rsp_demux_022_src2_channel;                                                         // rsp_demux_022:src2_channel -> rsp_mux_002:sink20_channel
	wire          rsp_demux_022_src2_startofpacket;                                                   // rsp_demux_022:src2_startofpacket -> rsp_mux_002:sink20_startofpacket
	wire          rsp_demux_022_src2_endofpacket;                                                     // rsp_demux_022:src2_endofpacket -> rsp_mux_002:sink20_endofpacket
	wire          rsp_demux_023_src0_valid;                                                           // rsp_demux_023:src0_valid -> rsp_mux:sink23_valid
	wire  [119:0] rsp_demux_023_src0_data;                                                            // rsp_demux_023:src0_data -> rsp_mux:sink23_data
	wire          rsp_demux_023_src0_ready;                                                           // rsp_mux:sink23_ready -> rsp_demux_023:src0_ready
	wire   [23:0] rsp_demux_023_src0_channel;                                                         // rsp_demux_023:src0_channel -> rsp_mux:sink23_channel
	wire          rsp_demux_023_src0_startofpacket;                                                   // rsp_demux_023:src0_startofpacket -> rsp_mux:sink23_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                     // rsp_demux_023:src0_endofpacket -> rsp_mux:sink23_endofpacket
	wire          rsp_demux_023_src1_valid;                                                           // rsp_demux_023:src1_valid -> rsp_mux_001:sink21_valid
	wire  [119:0] rsp_demux_023_src1_data;                                                            // rsp_demux_023:src1_data -> rsp_mux_001:sink21_data
	wire          rsp_demux_023_src1_ready;                                                           // rsp_mux_001:sink21_ready -> rsp_demux_023:src1_ready
	wire   [23:0] rsp_demux_023_src1_channel;                                                         // rsp_demux_023:src1_channel -> rsp_mux_001:sink21_channel
	wire          rsp_demux_023_src1_startofpacket;                                                   // rsp_demux_023:src1_startofpacket -> rsp_mux_001:sink21_startofpacket
	wire          rsp_demux_023_src1_endofpacket;                                                     // rsp_demux_023:src1_endofpacket -> rsp_mux_001:sink21_endofpacket
	wire          rsp_demux_023_src2_valid;                                                           // rsp_demux_023:src2_valid -> rsp_mux_002:sink21_valid
	wire  [119:0] rsp_demux_023_src2_data;                                                            // rsp_demux_023:src2_data -> rsp_mux_002:sink21_data
	wire          rsp_demux_023_src2_ready;                                                           // rsp_mux_002:sink21_ready -> rsp_demux_023:src2_ready
	wire   [23:0] rsp_demux_023_src2_channel;                                                         // rsp_demux_023:src2_channel -> rsp_mux_002:sink21_channel
	wire          rsp_demux_023_src2_startofpacket;                                                   // rsp_demux_023:src2_startofpacket -> rsp_mux_002:sink21_startofpacket
	wire          rsp_demux_023_src2_endofpacket;                                                     // rsp_demux_023:src2_endofpacket -> rsp_mux_002:sink21_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> crosser:in_valid
	wire  [119:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> crosser:in_data
	wire          cmd_demux_src3_ready;                                                               // crosser:in_ready -> cmd_demux:src3_ready
	wire   [23:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> crosser:in_channel
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                  // crosser:out_valid -> cmd_mux_003:sink0_valid
	wire  [119:0] crosser_out_data;                                                                   // crosser:out_data -> cmd_mux_003:sink0_data
	wire          crosser_out_ready;                                                                  // cmd_mux_003:sink0_ready -> crosser:out_ready
	wire   [23:0] crosser_out_channel;                                                                // crosser:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_out_startofpacket;                                                          // crosser:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                            // crosser:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> crosser_001:in_valid
	wire  [119:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> crosser_001:in_data
	wire          cmd_demux_src4_ready;                                                               // crosser_001:in_ready -> cmd_demux:src4_ready
	wire   [23:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> crosser_001:in_channel
	wire          cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                              // crosser_001:out_valid -> cmd_mux_004:sink0_valid
	wire  [119:0] crosser_001_out_data;                                                               // crosser_001:out_data -> cmd_mux_004:sink0_data
	wire          crosser_001_out_ready;                                                              // cmd_mux_004:sink0_ready -> crosser_001:out_ready
	wire   [23:0] crosser_001_out_channel;                                                            // crosser_001:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_001_out_startofpacket;                                                      // crosser_001:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                        // crosser_001:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> crosser_002:in_valid
	wire  [119:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> crosser_002:in_data
	wire          cmd_demux_src5_ready;                                                               // crosser_002:in_ready -> cmd_demux:src5_ready
	wire   [23:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> crosser_002:in_channel
	wire          cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                              // crosser_002:out_valid -> cmd_mux_005:sink0_valid
	wire  [119:0] crosser_002_out_data;                                                               // crosser_002:out_data -> cmd_mux_005:sink0_data
	wire          crosser_002_out_ready;                                                              // cmd_mux_005:sink0_ready -> crosser_002:out_ready
	wire   [23:0] crosser_002_out_channel;                                                            // crosser_002:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_002_out_startofpacket;                                                      // crosser_002:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                        // crosser_002:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> crosser_003:in_valid
	wire  [119:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> crosser_003:in_data
	wire          cmd_demux_src6_ready;                                                               // crosser_003:in_ready -> cmd_demux:src6_ready
	wire   [23:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> crosser_003:in_channel
	wire          cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                              // crosser_003:out_valid -> cmd_mux_006:sink0_valid
	wire  [119:0] crosser_003_out_data;                                                               // crosser_003:out_data -> cmd_mux_006:sink0_data
	wire          crosser_003_out_ready;                                                              // cmd_mux_006:sink0_ready -> crosser_003:out_ready
	wire   [23:0] crosser_003_out_channel;                                                            // crosser_003:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_003_out_startofpacket;                                                      // crosser_003:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                        // crosser_003:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> crosser_004:in_valid
	wire  [119:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> crosser_004:in_data
	wire          cmd_demux_src7_ready;                                                               // crosser_004:in_ready -> cmd_demux:src7_ready
	wire   [23:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> crosser_004:in_channel
	wire          cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                              // crosser_004:out_valid -> cmd_mux_007:sink0_valid
	wire  [119:0] crosser_004_out_data;                                                               // crosser_004:out_data -> cmd_mux_007:sink0_data
	wire          crosser_004_out_ready;                                                              // cmd_mux_007:sink0_ready -> crosser_004:out_ready
	wire   [23:0] crosser_004_out_channel;                                                            // crosser_004:out_channel -> cmd_mux_007:sink0_channel
	wire          crosser_004_out_startofpacket;                                                      // crosser_004:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                        // crosser_004:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> crosser_005:in_valid
	wire  [119:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> crosser_005:in_data
	wire          cmd_demux_src8_ready;                                                               // crosser_005:in_ready -> cmd_demux:src8_ready
	wire   [23:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> crosser_005:in_channel
	wire          cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                              // crosser_005:out_valid -> cmd_mux_008:sink0_valid
	wire  [119:0] crosser_005_out_data;                                                               // crosser_005:out_data -> cmd_mux_008:sink0_data
	wire          crosser_005_out_ready;                                                              // cmd_mux_008:sink0_ready -> crosser_005:out_ready
	wire   [23:0] crosser_005_out_channel;                                                            // crosser_005:out_channel -> cmd_mux_008:sink0_channel
	wire          crosser_005_out_startofpacket;                                                      // crosser_005:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                        // crosser_005:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                              // cmd_demux:src15_valid -> crosser_006:in_valid
	wire  [119:0] cmd_demux_src15_data;                                                               // cmd_demux:src15_data -> crosser_006:in_data
	wire          cmd_demux_src15_ready;                                                              // crosser_006:in_ready -> cmd_demux:src15_ready
	wire   [23:0] cmd_demux_src15_channel;                                                            // cmd_demux:src15_channel -> crosser_006:in_channel
	wire          cmd_demux_src15_startofpacket;                                                      // cmd_demux:src15_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                        // cmd_demux:src15_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                              // crosser_006:out_valid -> cmd_mux_015:sink0_valid
	wire  [119:0] crosser_006_out_data;                                                               // crosser_006:out_data -> cmd_mux_015:sink0_data
	wire          crosser_006_out_ready;                                                              // cmd_mux_015:sink0_ready -> crosser_006:out_ready
	wire   [23:0] crosser_006_out_channel;                                                            // crosser_006:out_channel -> cmd_mux_015:sink0_channel
	wire          crosser_006_out_startofpacket;                                                      // crosser_006:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                                        // crosser_006:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> crosser_007:in_valid
	wire  [119:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> crosser_007:in_data
	wire          cmd_demux_001_src1_ready;                                                           // crosser_007:in_ready -> cmd_demux_001:src1_ready
	wire   [23:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> crosser_007:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                              // crosser_007:out_valid -> cmd_mux_003:sink1_valid
	wire  [119:0] crosser_007_out_data;                                                               // crosser_007:out_data -> cmd_mux_003:sink1_data
	wire          crosser_007_out_ready;                                                              // cmd_mux_003:sink1_ready -> crosser_007:out_ready
	wire   [23:0] crosser_007_out_channel;                                                            // crosser_007:out_channel -> cmd_mux_003:sink1_channel
	wire          crosser_007_out_startofpacket;                                                      // crosser_007:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          crosser_007_out_endofpacket;                                                        // crosser_007:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                           // cmd_demux_001:src2_valid -> crosser_008:in_valid
	wire  [119:0] cmd_demux_001_src2_data;                                                            // cmd_demux_001:src2_data -> crosser_008:in_data
	wire          cmd_demux_001_src2_ready;                                                           // crosser_008:in_ready -> cmd_demux_001:src2_ready
	wire   [23:0] cmd_demux_001_src2_channel;                                                         // cmd_demux_001:src2_channel -> crosser_008:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                                   // cmd_demux_001:src2_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                     // cmd_demux_001:src2_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                              // crosser_008:out_valid -> cmd_mux_004:sink1_valid
	wire  [119:0] crosser_008_out_data;                                                               // crosser_008:out_data -> cmd_mux_004:sink1_data
	wire          crosser_008_out_ready;                                                              // cmd_mux_004:sink1_ready -> crosser_008:out_ready
	wire   [23:0] crosser_008_out_channel;                                                            // crosser_008:out_channel -> cmd_mux_004:sink1_channel
	wire          crosser_008_out_startofpacket;                                                      // crosser_008:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          crosser_008_out_endofpacket;                                                        // crosser_008:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                           // cmd_demux_001:src3_valid -> crosser_009:in_valid
	wire  [119:0] cmd_demux_001_src3_data;                                                            // cmd_demux_001:src3_data -> crosser_009:in_data
	wire          cmd_demux_001_src3_ready;                                                           // crosser_009:in_ready -> cmd_demux_001:src3_ready
	wire   [23:0] cmd_demux_001_src3_channel;                                                         // cmd_demux_001:src3_channel -> crosser_009:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                                   // cmd_demux_001:src3_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                     // cmd_demux_001:src3_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                              // crosser_009:out_valid -> cmd_mux_005:sink1_valid
	wire  [119:0] crosser_009_out_data;                                                               // crosser_009:out_data -> cmd_mux_005:sink1_data
	wire          crosser_009_out_ready;                                                              // cmd_mux_005:sink1_ready -> crosser_009:out_ready
	wire   [23:0] crosser_009_out_channel;                                                            // crosser_009:out_channel -> cmd_mux_005:sink1_channel
	wire          crosser_009_out_startofpacket;                                                      // crosser_009:out_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          crosser_009_out_endofpacket;                                                        // crosser_009:out_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                           // cmd_demux_001:src4_valid -> crosser_010:in_valid
	wire  [119:0] cmd_demux_001_src4_data;                                                            // cmd_demux_001:src4_data -> crosser_010:in_data
	wire          cmd_demux_001_src4_ready;                                                           // crosser_010:in_ready -> cmd_demux_001:src4_ready
	wire   [23:0] cmd_demux_001_src4_channel;                                                         // cmd_demux_001:src4_channel -> crosser_010:in_channel
	wire          cmd_demux_001_src4_startofpacket;                                                   // cmd_demux_001:src4_startofpacket -> crosser_010:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                     // cmd_demux_001:src4_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                              // crosser_010:out_valid -> cmd_mux_006:sink1_valid
	wire  [119:0] crosser_010_out_data;                                                               // crosser_010:out_data -> cmd_mux_006:sink1_data
	wire          crosser_010_out_ready;                                                              // cmd_mux_006:sink1_ready -> crosser_010:out_ready
	wire   [23:0] crosser_010_out_channel;                                                            // crosser_010:out_channel -> cmd_mux_006:sink1_channel
	wire          crosser_010_out_startofpacket;                                                      // crosser_010:out_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          crosser_010_out_endofpacket;                                                        // crosser_010:out_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                           // cmd_demux_001:src5_valid -> crosser_011:in_valid
	wire  [119:0] cmd_demux_001_src5_data;                                                            // cmd_demux_001:src5_data -> crosser_011:in_data
	wire          cmd_demux_001_src5_ready;                                                           // crosser_011:in_ready -> cmd_demux_001:src5_ready
	wire   [23:0] cmd_demux_001_src5_channel;                                                         // cmd_demux_001:src5_channel -> crosser_011:in_channel
	wire          cmd_demux_001_src5_startofpacket;                                                   // cmd_demux_001:src5_startofpacket -> crosser_011:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                     // cmd_demux_001:src5_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                              // crosser_011:out_valid -> cmd_mux_007:sink1_valid
	wire  [119:0] crosser_011_out_data;                                                               // crosser_011:out_data -> cmd_mux_007:sink1_data
	wire          crosser_011_out_ready;                                                              // cmd_mux_007:sink1_ready -> crosser_011:out_ready
	wire   [23:0] crosser_011_out_channel;                                                            // crosser_011:out_channel -> cmd_mux_007:sink1_channel
	wire          crosser_011_out_startofpacket;                                                      // crosser_011:out_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          crosser_011_out_endofpacket;                                                        // crosser_011:out_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                           // cmd_demux_001:src6_valid -> crosser_012:in_valid
	wire  [119:0] cmd_demux_001_src6_data;                                                            // cmd_demux_001:src6_data -> crosser_012:in_data
	wire          cmd_demux_001_src6_ready;                                                           // crosser_012:in_ready -> cmd_demux_001:src6_ready
	wire   [23:0] cmd_demux_001_src6_channel;                                                         // cmd_demux_001:src6_channel -> crosser_012:in_channel
	wire          cmd_demux_001_src6_startofpacket;                                                   // cmd_demux_001:src6_startofpacket -> crosser_012:in_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                     // cmd_demux_001:src6_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                              // crosser_012:out_valid -> cmd_mux_008:sink1_valid
	wire  [119:0] crosser_012_out_data;                                                               // crosser_012:out_data -> cmd_mux_008:sink1_data
	wire          crosser_012_out_ready;                                                              // cmd_mux_008:sink1_ready -> crosser_012:out_ready
	wire   [23:0] crosser_012_out_channel;                                                            // crosser_012:out_channel -> cmd_mux_008:sink1_channel
	wire          crosser_012_out_startofpacket;                                                      // crosser_012:out_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          crosser_012_out_endofpacket;                                                        // crosser_012:out_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src13_valid;                                                          // cmd_demux_001:src13_valid -> crosser_013:in_valid
	wire  [119:0] cmd_demux_001_src13_data;                                                           // cmd_demux_001:src13_data -> crosser_013:in_data
	wire          cmd_demux_001_src13_ready;                                                          // crosser_013:in_ready -> cmd_demux_001:src13_ready
	wire   [23:0] cmd_demux_001_src13_channel;                                                        // cmd_demux_001:src13_channel -> crosser_013:in_channel
	wire          cmd_demux_001_src13_startofpacket;                                                  // cmd_demux_001:src13_startofpacket -> crosser_013:in_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                                    // cmd_demux_001:src13_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                              // crosser_013:out_valid -> cmd_mux_015:sink1_valid
	wire  [119:0] crosser_013_out_data;                                                               // crosser_013:out_data -> cmd_mux_015:sink1_data
	wire          crosser_013_out_ready;                                                              // cmd_mux_015:sink1_ready -> crosser_013:out_ready
	wire   [23:0] crosser_013_out_channel;                                                            // crosser_013:out_channel -> cmd_mux_015:sink1_channel
	wire          crosser_013_out_startofpacket;                                                      // crosser_013:out_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          crosser_013_out_endofpacket;                                                        // crosser_013:out_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                           // cmd_demux_002:src1_valid -> crosser_014:in_valid
	wire  [119:0] cmd_demux_002_src1_data;                                                            // cmd_demux_002:src1_data -> crosser_014:in_data
	wire          cmd_demux_002_src1_ready;                                                           // crosser_014:in_ready -> cmd_demux_002:src1_ready
	wire   [23:0] cmd_demux_002_src1_channel;                                                         // cmd_demux_002:src1_channel -> crosser_014:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                                   // cmd_demux_002:src1_startofpacket -> crosser_014:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                     // cmd_demux_002:src1_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                              // crosser_014:out_valid -> cmd_mux_003:sink2_valid
	wire  [119:0] crosser_014_out_data;                                                               // crosser_014:out_data -> cmd_mux_003:sink2_data
	wire          crosser_014_out_ready;                                                              // cmd_mux_003:sink2_ready -> crosser_014:out_ready
	wire   [23:0] crosser_014_out_channel;                                                            // crosser_014:out_channel -> cmd_mux_003:sink2_channel
	wire          crosser_014_out_startofpacket;                                                      // crosser_014:out_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          crosser_014_out_endofpacket;                                                        // crosser_014:out_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                           // cmd_demux_002:src2_valid -> crosser_015:in_valid
	wire  [119:0] cmd_demux_002_src2_data;                                                            // cmd_demux_002:src2_data -> crosser_015:in_data
	wire          cmd_demux_002_src2_ready;                                                           // crosser_015:in_ready -> cmd_demux_002:src2_ready
	wire   [23:0] cmd_demux_002_src2_channel;                                                         // cmd_demux_002:src2_channel -> crosser_015:in_channel
	wire          cmd_demux_002_src2_startofpacket;                                                   // cmd_demux_002:src2_startofpacket -> crosser_015:in_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                     // cmd_demux_002:src2_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                              // crosser_015:out_valid -> cmd_mux_004:sink2_valid
	wire  [119:0] crosser_015_out_data;                                                               // crosser_015:out_data -> cmd_mux_004:sink2_data
	wire          crosser_015_out_ready;                                                              // cmd_mux_004:sink2_ready -> crosser_015:out_ready
	wire   [23:0] crosser_015_out_channel;                                                            // crosser_015:out_channel -> cmd_mux_004:sink2_channel
	wire          crosser_015_out_startofpacket;                                                      // crosser_015:out_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          crosser_015_out_endofpacket;                                                        // crosser_015:out_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_002_src3_valid;                                                           // cmd_demux_002:src3_valid -> crosser_016:in_valid
	wire  [119:0] cmd_demux_002_src3_data;                                                            // cmd_demux_002:src3_data -> crosser_016:in_data
	wire          cmd_demux_002_src3_ready;                                                           // crosser_016:in_ready -> cmd_demux_002:src3_ready
	wire   [23:0] cmd_demux_002_src3_channel;                                                         // cmd_demux_002:src3_channel -> crosser_016:in_channel
	wire          cmd_demux_002_src3_startofpacket;                                                   // cmd_demux_002:src3_startofpacket -> crosser_016:in_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                     // cmd_demux_002:src3_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                              // crosser_016:out_valid -> cmd_mux_005:sink2_valid
	wire  [119:0] crosser_016_out_data;                                                               // crosser_016:out_data -> cmd_mux_005:sink2_data
	wire          crosser_016_out_ready;                                                              // cmd_mux_005:sink2_ready -> crosser_016:out_ready
	wire   [23:0] crosser_016_out_channel;                                                            // crosser_016:out_channel -> cmd_mux_005:sink2_channel
	wire          crosser_016_out_startofpacket;                                                      // crosser_016:out_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          crosser_016_out_endofpacket;                                                        // crosser_016:out_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_002_src4_valid;                                                           // cmd_demux_002:src4_valid -> crosser_017:in_valid
	wire  [119:0] cmd_demux_002_src4_data;                                                            // cmd_demux_002:src4_data -> crosser_017:in_data
	wire          cmd_demux_002_src4_ready;                                                           // crosser_017:in_ready -> cmd_demux_002:src4_ready
	wire   [23:0] cmd_demux_002_src4_channel;                                                         // cmd_demux_002:src4_channel -> crosser_017:in_channel
	wire          cmd_demux_002_src4_startofpacket;                                                   // cmd_demux_002:src4_startofpacket -> crosser_017:in_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                     // cmd_demux_002:src4_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                              // crosser_017:out_valid -> cmd_mux_006:sink2_valid
	wire  [119:0] crosser_017_out_data;                                                               // crosser_017:out_data -> cmd_mux_006:sink2_data
	wire          crosser_017_out_ready;                                                              // cmd_mux_006:sink2_ready -> crosser_017:out_ready
	wire   [23:0] crosser_017_out_channel;                                                            // crosser_017:out_channel -> cmd_mux_006:sink2_channel
	wire          crosser_017_out_startofpacket;                                                      // crosser_017:out_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          crosser_017_out_endofpacket;                                                        // crosser_017:out_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_002_src5_valid;                                                           // cmd_demux_002:src5_valid -> crosser_018:in_valid
	wire  [119:0] cmd_demux_002_src5_data;                                                            // cmd_demux_002:src5_data -> crosser_018:in_data
	wire          cmd_demux_002_src5_ready;                                                           // crosser_018:in_ready -> cmd_demux_002:src5_ready
	wire   [23:0] cmd_demux_002_src5_channel;                                                         // cmd_demux_002:src5_channel -> crosser_018:in_channel
	wire          cmd_demux_002_src5_startofpacket;                                                   // cmd_demux_002:src5_startofpacket -> crosser_018:in_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                     // cmd_demux_002:src5_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                                              // crosser_018:out_valid -> cmd_mux_007:sink2_valid
	wire  [119:0] crosser_018_out_data;                                                               // crosser_018:out_data -> cmd_mux_007:sink2_data
	wire          crosser_018_out_ready;                                                              // cmd_mux_007:sink2_ready -> crosser_018:out_ready
	wire   [23:0] crosser_018_out_channel;                                                            // crosser_018:out_channel -> cmd_mux_007:sink2_channel
	wire          crosser_018_out_startofpacket;                                                      // crosser_018:out_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          crosser_018_out_endofpacket;                                                        // crosser_018:out_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_002_src6_valid;                                                           // cmd_demux_002:src6_valid -> crosser_019:in_valid
	wire  [119:0] cmd_demux_002_src6_data;                                                            // cmd_demux_002:src6_data -> crosser_019:in_data
	wire          cmd_demux_002_src6_ready;                                                           // crosser_019:in_ready -> cmd_demux_002:src6_ready
	wire   [23:0] cmd_demux_002_src6_channel;                                                         // cmd_demux_002:src6_channel -> crosser_019:in_channel
	wire          cmd_demux_002_src6_startofpacket;                                                   // cmd_demux_002:src6_startofpacket -> crosser_019:in_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                                     // cmd_demux_002:src6_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                                              // crosser_019:out_valid -> cmd_mux_008:sink2_valid
	wire  [119:0] crosser_019_out_data;                                                               // crosser_019:out_data -> cmd_mux_008:sink2_data
	wire          crosser_019_out_ready;                                                              // cmd_mux_008:sink2_ready -> crosser_019:out_ready
	wire   [23:0] crosser_019_out_channel;                                                            // crosser_019:out_channel -> cmd_mux_008:sink2_channel
	wire          crosser_019_out_startofpacket;                                                      // crosser_019:out_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire          crosser_019_out_endofpacket;                                                        // crosser_019:out_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          cmd_demux_002_src13_valid;                                                          // cmd_demux_002:src13_valid -> crosser_020:in_valid
	wire  [119:0] cmd_demux_002_src13_data;                                                           // cmd_demux_002:src13_data -> crosser_020:in_data
	wire          cmd_demux_002_src13_ready;                                                          // crosser_020:in_ready -> cmd_demux_002:src13_ready
	wire   [23:0] cmd_demux_002_src13_channel;                                                        // cmd_demux_002:src13_channel -> crosser_020:in_channel
	wire          cmd_demux_002_src13_startofpacket;                                                  // cmd_demux_002:src13_startofpacket -> crosser_020:in_startofpacket
	wire          cmd_demux_002_src13_endofpacket;                                                    // cmd_demux_002:src13_endofpacket -> crosser_020:in_endofpacket
	wire          crosser_020_out_valid;                                                              // crosser_020:out_valid -> cmd_mux_015:sink2_valid
	wire  [119:0] crosser_020_out_data;                                                               // crosser_020:out_data -> cmd_mux_015:sink2_data
	wire          crosser_020_out_ready;                                                              // cmd_mux_015:sink2_ready -> crosser_020:out_ready
	wire   [23:0] crosser_020_out_channel;                                                            // crosser_020:out_channel -> cmd_mux_015:sink2_channel
	wire          crosser_020_out_startofpacket;                                                      // crosser_020:out_startofpacket -> cmd_mux_015:sink2_startofpacket
	wire          crosser_020_out_endofpacket;                                                        // crosser_020:out_endofpacket -> cmd_mux_015:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> crosser_021:in_valid
	wire  [119:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> crosser_021:in_data
	wire          rsp_demux_003_src0_ready;                                                           // crosser_021:in_ready -> rsp_demux_003:src0_ready
	wire   [23:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> crosser_021:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> crosser_021:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> crosser_021:in_endofpacket
	wire          crosser_021_out_valid;                                                              // crosser_021:out_valid -> rsp_mux:sink3_valid
	wire  [119:0] crosser_021_out_data;                                                               // crosser_021:out_data -> rsp_mux:sink3_data
	wire          crosser_021_out_ready;                                                              // rsp_mux:sink3_ready -> crosser_021:out_ready
	wire   [23:0] crosser_021_out_channel;                                                            // crosser_021:out_channel -> rsp_mux:sink3_channel
	wire          crosser_021_out_startofpacket;                                                      // crosser_021:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_021_out_endofpacket;                                                        // crosser_021:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                           // rsp_demux_003:src1_valid -> crosser_022:in_valid
	wire  [119:0] rsp_demux_003_src1_data;                                                            // rsp_demux_003:src1_data -> crosser_022:in_data
	wire          rsp_demux_003_src1_ready;                                                           // crosser_022:in_ready -> rsp_demux_003:src1_ready
	wire   [23:0] rsp_demux_003_src1_channel;                                                         // rsp_demux_003:src1_channel -> crosser_022:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                                   // rsp_demux_003:src1_startofpacket -> crosser_022:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                     // rsp_demux_003:src1_endofpacket -> crosser_022:in_endofpacket
	wire          crosser_022_out_valid;                                                              // crosser_022:out_valid -> rsp_mux_001:sink1_valid
	wire  [119:0] crosser_022_out_data;                                                               // crosser_022:out_data -> rsp_mux_001:sink1_data
	wire          crosser_022_out_ready;                                                              // rsp_mux_001:sink1_ready -> crosser_022:out_ready
	wire   [23:0] crosser_022_out_channel;                                                            // crosser_022:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_022_out_startofpacket;                                                      // crosser_022:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_022_out_endofpacket;                                                        // crosser_022:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_003_src2_valid;                                                           // rsp_demux_003:src2_valid -> crosser_023:in_valid
	wire  [119:0] rsp_demux_003_src2_data;                                                            // rsp_demux_003:src2_data -> crosser_023:in_data
	wire          rsp_demux_003_src2_ready;                                                           // crosser_023:in_ready -> rsp_demux_003:src2_ready
	wire   [23:0] rsp_demux_003_src2_channel;                                                         // rsp_demux_003:src2_channel -> crosser_023:in_channel
	wire          rsp_demux_003_src2_startofpacket;                                                   // rsp_demux_003:src2_startofpacket -> crosser_023:in_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                                     // rsp_demux_003:src2_endofpacket -> crosser_023:in_endofpacket
	wire          crosser_023_out_valid;                                                              // crosser_023:out_valid -> rsp_mux_002:sink1_valid
	wire  [119:0] crosser_023_out_data;                                                               // crosser_023:out_data -> rsp_mux_002:sink1_data
	wire          crosser_023_out_ready;                                                              // rsp_mux_002:sink1_ready -> crosser_023:out_ready
	wire   [23:0] crosser_023_out_channel;                                                            // crosser_023:out_channel -> rsp_mux_002:sink1_channel
	wire          crosser_023_out_startofpacket;                                                      // crosser_023:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          crosser_023_out_endofpacket;                                                        // crosser_023:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> crosser_024:in_valid
	wire  [119:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> crosser_024:in_data
	wire          rsp_demux_004_src0_ready;                                                           // crosser_024:in_ready -> rsp_demux_004:src0_ready
	wire   [23:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> crosser_024:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> crosser_024:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> crosser_024:in_endofpacket
	wire          crosser_024_out_valid;                                                              // crosser_024:out_valid -> rsp_mux:sink4_valid
	wire  [119:0] crosser_024_out_data;                                                               // crosser_024:out_data -> rsp_mux:sink4_data
	wire          crosser_024_out_ready;                                                              // rsp_mux:sink4_ready -> crosser_024:out_ready
	wire   [23:0] crosser_024_out_channel;                                                            // crosser_024:out_channel -> rsp_mux:sink4_channel
	wire          crosser_024_out_startofpacket;                                                      // crosser_024:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          crosser_024_out_endofpacket;                                                        // crosser_024:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                           // rsp_demux_004:src1_valid -> crosser_025:in_valid
	wire  [119:0] rsp_demux_004_src1_data;                                                            // rsp_demux_004:src1_data -> crosser_025:in_data
	wire          rsp_demux_004_src1_ready;                                                           // crosser_025:in_ready -> rsp_demux_004:src1_ready
	wire   [23:0] rsp_demux_004_src1_channel;                                                         // rsp_demux_004:src1_channel -> crosser_025:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                                   // rsp_demux_004:src1_startofpacket -> crosser_025:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                     // rsp_demux_004:src1_endofpacket -> crosser_025:in_endofpacket
	wire          crosser_025_out_valid;                                                              // crosser_025:out_valid -> rsp_mux_001:sink2_valid
	wire  [119:0] crosser_025_out_data;                                                               // crosser_025:out_data -> rsp_mux_001:sink2_data
	wire          crosser_025_out_ready;                                                              // rsp_mux_001:sink2_ready -> crosser_025:out_ready
	wire   [23:0] crosser_025_out_channel;                                                            // crosser_025:out_channel -> rsp_mux_001:sink2_channel
	wire          crosser_025_out_startofpacket;                                                      // crosser_025:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          crosser_025_out_endofpacket;                                                        // crosser_025:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_004_src2_valid;                                                           // rsp_demux_004:src2_valid -> crosser_026:in_valid
	wire  [119:0] rsp_demux_004_src2_data;                                                            // rsp_demux_004:src2_data -> crosser_026:in_data
	wire          rsp_demux_004_src2_ready;                                                           // crosser_026:in_ready -> rsp_demux_004:src2_ready
	wire   [23:0] rsp_demux_004_src2_channel;                                                         // rsp_demux_004:src2_channel -> crosser_026:in_channel
	wire          rsp_demux_004_src2_startofpacket;                                                   // rsp_demux_004:src2_startofpacket -> crosser_026:in_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                     // rsp_demux_004:src2_endofpacket -> crosser_026:in_endofpacket
	wire          crosser_026_out_valid;                                                              // crosser_026:out_valid -> rsp_mux_002:sink2_valid
	wire  [119:0] crosser_026_out_data;                                                               // crosser_026:out_data -> rsp_mux_002:sink2_data
	wire          crosser_026_out_ready;                                                              // rsp_mux_002:sink2_ready -> crosser_026:out_ready
	wire   [23:0] crosser_026_out_channel;                                                            // crosser_026:out_channel -> rsp_mux_002:sink2_channel
	wire          crosser_026_out_startofpacket;                                                      // crosser_026:out_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          crosser_026_out_endofpacket;                                                        // crosser_026:out_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> crosser_027:in_valid
	wire  [119:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> crosser_027:in_data
	wire          rsp_demux_005_src0_ready;                                                           // crosser_027:in_ready -> rsp_demux_005:src0_ready
	wire   [23:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> crosser_027:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> crosser_027:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> crosser_027:in_endofpacket
	wire          crosser_027_out_valid;                                                              // crosser_027:out_valid -> rsp_mux:sink5_valid
	wire  [119:0] crosser_027_out_data;                                                               // crosser_027:out_data -> rsp_mux:sink5_data
	wire          crosser_027_out_ready;                                                              // rsp_mux:sink5_ready -> crosser_027:out_ready
	wire   [23:0] crosser_027_out_channel;                                                            // crosser_027:out_channel -> rsp_mux:sink5_channel
	wire          crosser_027_out_startofpacket;                                                      // crosser_027:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          crosser_027_out_endofpacket;                                                        // crosser_027:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                           // rsp_demux_005:src1_valid -> crosser_028:in_valid
	wire  [119:0] rsp_demux_005_src1_data;                                                            // rsp_demux_005:src1_data -> crosser_028:in_data
	wire          rsp_demux_005_src1_ready;                                                           // crosser_028:in_ready -> rsp_demux_005:src1_ready
	wire   [23:0] rsp_demux_005_src1_channel;                                                         // rsp_demux_005:src1_channel -> crosser_028:in_channel
	wire          rsp_demux_005_src1_startofpacket;                                                   // rsp_demux_005:src1_startofpacket -> crosser_028:in_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                     // rsp_demux_005:src1_endofpacket -> crosser_028:in_endofpacket
	wire          crosser_028_out_valid;                                                              // crosser_028:out_valid -> rsp_mux_001:sink3_valid
	wire  [119:0] crosser_028_out_data;                                                               // crosser_028:out_data -> rsp_mux_001:sink3_data
	wire          crosser_028_out_ready;                                                              // rsp_mux_001:sink3_ready -> crosser_028:out_ready
	wire   [23:0] crosser_028_out_channel;                                                            // crosser_028:out_channel -> rsp_mux_001:sink3_channel
	wire          crosser_028_out_startofpacket;                                                      // crosser_028:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          crosser_028_out_endofpacket;                                                        // crosser_028:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_005_src2_valid;                                                           // rsp_demux_005:src2_valid -> crosser_029:in_valid
	wire  [119:0] rsp_demux_005_src2_data;                                                            // rsp_demux_005:src2_data -> crosser_029:in_data
	wire          rsp_demux_005_src2_ready;                                                           // crosser_029:in_ready -> rsp_demux_005:src2_ready
	wire   [23:0] rsp_demux_005_src2_channel;                                                         // rsp_demux_005:src2_channel -> crosser_029:in_channel
	wire          rsp_demux_005_src2_startofpacket;                                                   // rsp_demux_005:src2_startofpacket -> crosser_029:in_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                     // rsp_demux_005:src2_endofpacket -> crosser_029:in_endofpacket
	wire          crosser_029_out_valid;                                                              // crosser_029:out_valid -> rsp_mux_002:sink3_valid
	wire  [119:0] crosser_029_out_data;                                                               // crosser_029:out_data -> rsp_mux_002:sink3_data
	wire          crosser_029_out_ready;                                                              // rsp_mux_002:sink3_ready -> crosser_029:out_ready
	wire   [23:0] crosser_029_out_channel;                                                            // crosser_029:out_channel -> rsp_mux_002:sink3_channel
	wire          crosser_029_out_startofpacket;                                                      // crosser_029:out_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          crosser_029_out_endofpacket;                                                        // crosser_029:out_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> crosser_030:in_valid
	wire  [119:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> crosser_030:in_data
	wire          rsp_demux_006_src0_ready;                                                           // crosser_030:in_ready -> rsp_demux_006:src0_ready
	wire   [23:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> crosser_030:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> crosser_030:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> crosser_030:in_endofpacket
	wire          crosser_030_out_valid;                                                              // crosser_030:out_valid -> rsp_mux:sink6_valid
	wire  [119:0] crosser_030_out_data;                                                               // crosser_030:out_data -> rsp_mux:sink6_data
	wire          crosser_030_out_ready;                                                              // rsp_mux:sink6_ready -> crosser_030:out_ready
	wire   [23:0] crosser_030_out_channel;                                                            // crosser_030:out_channel -> rsp_mux:sink6_channel
	wire          crosser_030_out_startofpacket;                                                      // crosser_030:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          crosser_030_out_endofpacket;                                                        // crosser_030:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                           // rsp_demux_006:src1_valid -> crosser_031:in_valid
	wire  [119:0] rsp_demux_006_src1_data;                                                            // rsp_demux_006:src1_data -> crosser_031:in_data
	wire          rsp_demux_006_src1_ready;                                                           // crosser_031:in_ready -> rsp_demux_006:src1_ready
	wire   [23:0] rsp_demux_006_src1_channel;                                                         // rsp_demux_006:src1_channel -> crosser_031:in_channel
	wire          rsp_demux_006_src1_startofpacket;                                                   // rsp_demux_006:src1_startofpacket -> crosser_031:in_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                     // rsp_demux_006:src1_endofpacket -> crosser_031:in_endofpacket
	wire          crosser_031_out_valid;                                                              // crosser_031:out_valid -> rsp_mux_001:sink4_valid
	wire  [119:0] crosser_031_out_data;                                                               // crosser_031:out_data -> rsp_mux_001:sink4_data
	wire          crosser_031_out_ready;                                                              // rsp_mux_001:sink4_ready -> crosser_031:out_ready
	wire   [23:0] crosser_031_out_channel;                                                            // crosser_031:out_channel -> rsp_mux_001:sink4_channel
	wire          crosser_031_out_startofpacket;                                                      // crosser_031:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          crosser_031_out_endofpacket;                                                        // crosser_031:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_006_src2_valid;                                                           // rsp_demux_006:src2_valid -> crosser_032:in_valid
	wire  [119:0] rsp_demux_006_src2_data;                                                            // rsp_demux_006:src2_data -> crosser_032:in_data
	wire          rsp_demux_006_src2_ready;                                                           // crosser_032:in_ready -> rsp_demux_006:src2_ready
	wire   [23:0] rsp_demux_006_src2_channel;                                                         // rsp_demux_006:src2_channel -> crosser_032:in_channel
	wire          rsp_demux_006_src2_startofpacket;                                                   // rsp_demux_006:src2_startofpacket -> crosser_032:in_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                                     // rsp_demux_006:src2_endofpacket -> crosser_032:in_endofpacket
	wire          crosser_032_out_valid;                                                              // crosser_032:out_valid -> rsp_mux_002:sink4_valid
	wire  [119:0] crosser_032_out_data;                                                               // crosser_032:out_data -> rsp_mux_002:sink4_data
	wire          crosser_032_out_ready;                                                              // rsp_mux_002:sink4_ready -> crosser_032:out_ready
	wire   [23:0] crosser_032_out_channel;                                                            // crosser_032:out_channel -> rsp_mux_002:sink4_channel
	wire          crosser_032_out_startofpacket;                                                      // crosser_032:out_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          crosser_032_out_endofpacket;                                                        // crosser_032:out_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> crosser_033:in_valid
	wire  [119:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> crosser_033:in_data
	wire          rsp_demux_007_src0_ready;                                                           // crosser_033:in_ready -> rsp_demux_007:src0_ready
	wire   [23:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> crosser_033:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> crosser_033:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> crosser_033:in_endofpacket
	wire          crosser_033_out_valid;                                                              // crosser_033:out_valid -> rsp_mux:sink7_valid
	wire  [119:0] crosser_033_out_data;                                                               // crosser_033:out_data -> rsp_mux:sink7_data
	wire          crosser_033_out_ready;                                                              // rsp_mux:sink7_ready -> crosser_033:out_ready
	wire   [23:0] crosser_033_out_channel;                                                            // crosser_033:out_channel -> rsp_mux:sink7_channel
	wire          crosser_033_out_startofpacket;                                                      // crosser_033:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          crosser_033_out_endofpacket;                                                        // crosser_033:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                           // rsp_demux_007:src1_valid -> crosser_034:in_valid
	wire  [119:0] rsp_demux_007_src1_data;                                                            // rsp_demux_007:src1_data -> crosser_034:in_data
	wire          rsp_demux_007_src1_ready;                                                           // crosser_034:in_ready -> rsp_demux_007:src1_ready
	wire   [23:0] rsp_demux_007_src1_channel;                                                         // rsp_demux_007:src1_channel -> crosser_034:in_channel
	wire          rsp_demux_007_src1_startofpacket;                                                   // rsp_demux_007:src1_startofpacket -> crosser_034:in_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                     // rsp_demux_007:src1_endofpacket -> crosser_034:in_endofpacket
	wire          crosser_034_out_valid;                                                              // crosser_034:out_valid -> rsp_mux_001:sink5_valid
	wire  [119:0] crosser_034_out_data;                                                               // crosser_034:out_data -> rsp_mux_001:sink5_data
	wire          crosser_034_out_ready;                                                              // rsp_mux_001:sink5_ready -> crosser_034:out_ready
	wire   [23:0] crosser_034_out_channel;                                                            // crosser_034:out_channel -> rsp_mux_001:sink5_channel
	wire          crosser_034_out_startofpacket;                                                      // crosser_034:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          crosser_034_out_endofpacket;                                                        // crosser_034:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_007_src2_valid;                                                           // rsp_demux_007:src2_valid -> crosser_035:in_valid
	wire  [119:0] rsp_demux_007_src2_data;                                                            // rsp_demux_007:src2_data -> crosser_035:in_data
	wire          rsp_demux_007_src2_ready;                                                           // crosser_035:in_ready -> rsp_demux_007:src2_ready
	wire   [23:0] rsp_demux_007_src2_channel;                                                         // rsp_demux_007:src2_channel -> crosser_035:in_channel
	wire          rsp_demux_007_src2_startofpacket;                                                   // rsp_demux_007:src2_startofpacket -> crosser_035:in_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                                     // rsp_demux_007:src2_endofpacket -> crosser_035:in_endofpacket
	wire          crosser_035_out_valid;                                                              // crosser_035:out_valid -> rsp_mux_002:sink5_valid
	wire  [119:0] crosser_035_out_data;                                                               // crosser_035:out_data -> rsp_mux_002:sink5_data
	wire          crosser_035_out_ready;                                                              // rsp_mux_002:sink5_ready -> crosser_035:out_ready
	wire   [23:0] crosser_035_out_channel;                                                            // crosser_035:out_channel -> rsp_mux_002:sink5_channel
	wire          crosser_035_out_startofpacket;                                                      // crosser_035:out_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          crosser_035_out_endofpacket;                                                        // crosser_035:out_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> crosser_036:in_valid
	wire  [119:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> crosser_036:in_data
	wire          rsp_demux_008_src0_ready;                                                           // crosser_036:in_ready -> rsp_demux_008:src0_ready
	wire   [23:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> crosser_036:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> crosser_036:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> crosser_036:in_endofpacket
	wire          crosser_036_out_valid;                                                              // crosser_036:out_valid -> rsp_mux:sink8_valid
	wire  [119:0] crosser_036_out_data;                                                               // crosser_036:out_data -> rsp_mux:sink8_data
	wire          crosser_036_out_ready;                                                              // rsp_mux:sink8_ready -> crosser_036:out_ready
	wire   [23:0] crosser_036_out_channel;                                                            // crosser_036:out_channel -> rsp_mux:sink8_channel
	wire          crosser_036_out_startofpacket;                                                      // crosser_036:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          crosser_036_out_endofpacket;                                                        // crosser_036:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                           // rsp_demux_008:src1_valid -> crosser_037:in_valid
	wire  [119:0] rsp_demux_008_src1_data;                                                            // rsp_demux_008:src1_data -> crosser_037:in_data
	wire          rsp_demux_008_src1_ready;                                                           // crosser_037:in_ready -> rsp_demux_008:src1_ready
	wire   [23:0] rsp_demux_008_src1_channel;                                                         // rsp_demux_008:src1_channel -> crosser_037:in_channel
	wire          rsp_demux_008_src1_startofpacket;                                                   // rsp_demux_008:src1_startofpacket -> crosser_037:in_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                     // rsp_demux_008:src1_endofpacket -> crosser_037:in_endofpacket
	wire          crosser_037_out_valid;                                                              // crosser_037:out_valid -> rsp_mux_001:sink6_valid
	wire  [119:0] crosser_037_out_data;                                                               // crosser_037:out_data -> rsp_mux_001:sink6_data
	wire          crosser_037_out_ready;                                                              // rsp_mux_001:sink6_ready -> crosser_037:out_ready
	wire   [23:0] crosser_037_out_channel;                                                            // crosser_037:out_channel -> rsp_mux_001:sink6_channel
	wire          crosser_037_out_startofpacket;                                                      // crosser_037:out_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          crosser_037_out_endofpacket;                                                        // crosser_037:out_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_008_src2_valid;                                                           // rsp_demux_008:src2_valid -> crosser_038:in_valid
	wire  [119:0] rsp_demux_008_src2_data;                                                            // rsp_demux_008:src2_data -> crosser_038:in_data
	wire          rsp_demux_008_src2_ready;                                                           // crosser_038:in_ready -> rsp_demux_008:src2_ready
	wire   [23:0] rsp_demux_008_src2_channel;                                                         // rsp_demux_008:src2_channel -> crosser_038:in_channel
	wire          rsp_demux_008_src2_startofpacket;                                                   // rsp_demux_008:src2_startofpacket -> crosser_038:in_startofpacket
	wire          rsp_demux_008_src2_endofpacket;                                                     // rsp_demux_008:src2_endofpacket -> crosser_038:in_endofpacket
	wire          crosser_038_out_valid;                                                              // crosser_038:out_valid -> rsp_mux_002:sink6_valid
	wire  [119:0] crosser_038_out_data;                                                               // crosser_038:out_data -> rsp_mux_002:sink6_data
	wire          crosser_038_out_ready;                                                              // rsp_mux_002:sink6_ready -> crosser_038:out_ready
	wire   [23:0] crosser_038_out_channel;                                                            // crosser_038:out_channel -> rsp_mux_002:sink6_channel
	wire          crosser_038_out_startofpacket;                                                      // crosser_038:out_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          crosser_038_out_endofpacket;                                                        // crosser_038:out_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_015_src0_valid;                                                           // rsp_demux_015:src0_valid -> crosser_039:in_valid
	wire  [119:0] rsp_demux_015_src0_data;                                                            // rsp_demux_015:src0_data -> crosser_039:in_data
	wire          rsp_demux_015_src0_ready;                                                           // crosser_039:in_ready -> rsp_demux_015:src0_ready
	wire   [23:0] rsp_demux_015_src0_channel;                                                         // rsp_demux_015:src0_channel -> crosser_039:in_channel
	wire          rsp_demux_015_src0_startofpacket;                                                   // rsp_demux_015:src0_startofpacket -> crosser_039:in_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                     // rsp_demux_015:src0_endofpacket -> crosser_039:in_endofpacket
	wire          crosser_039_out_valid;                                                              // crosser_039:out_valid -> rsp_mux:sink15_valid
	wire  [119:0] crosser_039_out_data;                                                               // crosser_039:out_data -> rsp_mux:sink15_data
	wire          crosser_039_out_ready;                                                              // rsp_mux:sink15_ready -> crosser_039:out_ready
	wire   [23:0] crosser_039_out_channel;                                                            // crosser_039:out_channel -> rsp_mux:sink15_channel
	wire          crosser_039_out_startofpacket;                                                      // crosser_039:out_startofpacket -> rsp_mux:sink15_startofpacket
	wire          crosser_039_out_endofpacket;                                                        // crosser_039:out_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_015_src1_valid;                                                           // rsp_demux_015:src1_valid -> crosser_040:in_valid
	wire  [119:0] rsp_demux_015_src1_data;                                                            // rsp_demux_015:src1_data -> crosser_040:in_data
	wire          rsp_demux_015_src1_ready;                                                           // crosser_040:in_ready -> rsp_demux_015:src1_ready
	wire   [23:0] rsp_demux_015_src1_channel;                                                         // rsp_demux_015:src1_channel -> crosser_040:in_channel
	wire          rsp_demux_015_src1_startofpacket;                                                   // rsp_demux_015:src1_startofpacket -> crosser_040:in_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                     // rsp_demux_015:src1_endofpacket -> crosser_040:in_endofpacket
	wire          crosser_040_out_valid;                                                              // crosser_040:out_valid -> rsp_mux_001:sink13_valid
	wire  [119:0] crosser_040_out_data;                                                               // crosser_040:out_data -> rsp_mux_001:sink13_data
	wire          crosser_040_out_ready;                                                              // rsp_mux_001:sink13_ready -> crosser_040:out_ready
	wire   [23:0] crosser_040_out_channel;                                                            // crosser_040:out_channel -> rsp_mux_001:sink13_channel
	wire          crosser_040_out_startofpacket;                                                      // crosser_040:out_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          crosser_040_out_endofpacket;                                                        // crosser_040:out_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_015_src2_valid;                                                           // rsp_demux_015:src2_valid -> crosser_041:in_valid
	wire  [119:0] rsp_demux_015_src2_data;                                                            // rsp_demux_015:src2_data -> crosser_041:in_data
	wire          rsp_demux_015_src2_ready;                                                           // crosser_041:in_ready -> rsp_demux_015:src2_ready
	wire   [23:0] rsp_demux_015_src2_channel;                                                         // rsp_demux_015:src2_channel -> crosser_041:in_channel
	wire          rsp_demux_015_src2_startofpacket;                                                   // rsp_demux_015:src2_startofpacket -> crosser_041:in_startofpacket
	wire          rsp_demux_015_src2_endofpacket;                                                     // rsp_demux_015:src2_endofpacket -> crosser_041:in_endofpacket
	wire          crosser_041_out_valid;                                                              // crosser_041:out_valid -> rsp_mux_002:sink13_valid
	wire  [119:0] crosser_041_out_data;                                                               // crosser_041:out_data -> rsp_mux_002:sink13_data
	wire          crosser_041_out_ready;                                                              // rsp_mux_002:sink13_ready -> crosser_041:out_ready
	wire   [23:0] crosser_041_out_channel;                                                            // crosser_041:out_channel -> rsp_mux_002:sink13_channel
	wire          crosser_041_out_startofpacket;                                                      // crosser_041:out_startofpacket -> rsp_mux_002:sink13_startofpacket
	wire          crosser_041_out_endofpacket;                                                        // crosser_041:out_endofpacket -> rsp_mux_002:sink13_endofpacket
	wire   [23:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                                  // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [23:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                                  // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;                           // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data;                            // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;                           // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_out_valid;                            // nios2_gen2_0_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_out_data;                             // nios2_gen2_0_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_001:in_0_ready -> nios2_gen2_0_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_out_valid;                      // pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_out_data;                       // pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_002:in_0_ready -> pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> pll_reconfigurar_mgmt_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> pll_reconfigurar_mgmt_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // pll_reconfigurar_mgmt_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> pll_reconfigurar_mgmt_avalon_slave_agent:rdata_fifo_sink_error
	wire          fifo0_64_bit_up_out_agent_rdata_fifo_out_valid;                                     // fifo0_64_bit_up_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] fifo0_64_bit_up_out_agent_rdata_fifo_out_data;                                      // fifo0_64_bit_up_out_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          fifo0_64_bit_up_out_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_003:in_0_ready -> fifo0_64_bit_up_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> fifo0_64_bit_up_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> fifo0_64_bit_up_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // fifo0_64_bit_up_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> fifo0_64_bit_up_out_agent:rdata_fifo_sink_error
	wire          fifo0_64_bit_down_out_agent_rdata_fifo_out_valid;                                   // fifo0_64_bit_down_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] fifo0_64_bit_down_out_agent_rdata_fifo_out_data;                                    // fifo0_64_bit_down_out_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          fifo0_64_bit_down_out_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_004:in_0_ready -> fifo0_64_bit_down_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> fifo0_64_bit_down_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> fifo0_64_bit_down_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // fifo0_64_bit_down_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> fifo0_64_bit_down_out_agent:rdata_fifo_sink_error
	wire          fifo1_64_bit_up_out_agent_rdata_fifo_out_valid;                                     // fifo1_64_bit_up_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] fifo1_64_bit_up_out_agent_rdata_fifo_out_data;                                      // fifo1_64_bit_up_out_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          fifo1_64_bit_up_out_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_005:in_0_ready -> fifo1_64_bit_up_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> fifo1_64_bit_up_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> fifo1_64_bit_up_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // fifo1_64_bit_up_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> fifo1_64_bit_up_out_agent:rdata_fifo_sink_error
	wire          fifo1_64_bit_down_out_agent_rdata_fifo_out_valid;                                   // fifo1_64_bit_down_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] fifo1_64_bit_down_out_agent_rdata_fifo_out_data;                                    // fifo1_64_bit_down_out_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          fifo1_64_bit_down_out_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_006:in_0_ready -> fifo1_64_bit_down_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> fifo1_64_bit_down_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> fifo1_64_bit_down_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // fifo1_64_bit_down_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> fifo1_64_bit_down_out_agent:rdata_fifo_sink_error
	wire          fifo0_32_bit_out_agent_rdata_fifo_out_valid;                                        // fifo0_32_bit_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] fifo0_32_bit_out_agent_rdata_fifo_out_data;                                         // fifo0_32_bit_out_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          fifo0_32_bit_out_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_007:in_0_ready -> fifo0_32_bit_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> fifo0_32_bit_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> fifo0_32_bit_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // fifo0_32_bit_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> fifo0_32_bit_out_agent:rdata_fifo_sink_error
	wire          fifo1_32_bit_out_agent_rdata_fifo_out_valid;                                        // fifo1_32_bit_out_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] fifo1_32_bit_out_agent_rdata_fifo_out_data;                                         // fifo1_32_bit_out_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          fifo1_32_bit_out_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_008:in_0_ready -> fifo1_32_bit_out_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> fifo1_32_bit_out_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> fifo1_32_bit_out_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                  // fifo1_32_bit_out_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> fifo1_32_bit_out_agent:rdata_fifo_sink_error
	wire          parameters_s0_agent_rdata_fifo_out_valid;                                           // parameters_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] parameters_s0_agent_rdata_fifo_out_data;                                            // parameters_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          parameters_s0_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_009:in_0_ready -> parameters_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> parameters_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> parameters_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                  // parameters_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> parameters_s0_agent:rdata_fifo_sink_error
	wire          parameters_1_s0_agent_rdata_fifo_out_valid;                                         // parameters_1_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] parameters_1_s0_agent_rdata_fifo_out_data;                                          // parameters_1_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          parameters_1_s0_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_010:in_0_ready -> parameters_1_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> parameters_1_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> parameters_1_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                  // parameters_1_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> parameters_1_s0_agent:rdata_fifo_sink_error
	wire          parameters_2_s0_agent_rdata_fifo_out_valid;                                         // parameters_2_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] parameters_2_s0_agent_rdata_fifo_out_data;                                          // parameters_2_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          parameters_2_s0_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_011:in_0_ready -> parameters_2_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                  // avalon_st_adapter_011:out_0_valid -> parameters_2_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                   // avalon_st_adapter_011:out_0_data -> parameters_2_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                  // parameters_2_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                  // avalon_st_adapter_011:out_0_error -> parameters_2_s0_agent:rdata_fifo_sink_error
	wire          parameters_3_s0_agent_rdata_fifo_out_valid;                                         // parameters_3_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] parameters_3_s0_agent_rdata_fifo_out_data;                                          // parameters_3_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          parameters_3_s0_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_012:in_0_ready -> parameters_3_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                  // avalon_st_adapter_012:out_0_valid -> parameters_3_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                   // avalon_st_adapter_012:out_0_data -> parameters_3_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                  // parameters_3_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                  // avalon_st_adapter_012:out_0_error -> parameters_3_s0_agent:rdata_fifo_sink_error
	wire          program_memory_s1_agent_rdata_fifo_out_valid;                                       // program_memory_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] program_memory_s1_agent_rdata_fifo_out_data;                                        // program_memory_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          program_memory_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_013:in_0_ready -> program_memory_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                  // avalon_st_adapter_013:out_0_valid -> program_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                   // avalon_st_adapter_013:out_0_data -> program_memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                  // program_memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                  // avalon_st_adapter_013:out_0_error -> program_memory_s1_agent:rdata_fifo_sink_error
	wire          divisor_clock_s1_agent_rdata_fifo_out_valid;                                        // divisor_clock_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] divisor_clock_s1_agent_rdata_fifo_out_data;                                         // divisor_clock_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          divisor_clock_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_014:in_0_ready -> divisor_clock_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                  // avalon_st_adapter_014:out_0_valid -> divisor_clock_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                   // avalon_st_adapter_014:out_0_data -> divisor_clock_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                  // divisor_clock_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                  // avalon_st_adapter_014:out_0_error -> divisor_clock_s1_agent:rdata_fifo_sink_error
	wire          reset_s1_agent_rdata_fifo_out_valid;                                                // reset_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] reset_s1_agent_rdata_fifo_out_data;                                                 // reset_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          reset_s1_agent_rdata_fifo_out_ready;                                                // avalon_st_adapter_015:in_0_ready -> reset_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                  // avalon_st_adapter_015:out_0_valid -> reset_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                   // avalon_st_adapter_015:out_0_data -> reset_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                  // reset_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                  // avalon_st_adapter_015:out_0_error -> reset_s1_agent:rdata_fifo_sink_error
	wire          enable_s1_agent_rdata_fifo_out_valid;                                               // enable_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] enable_s1_agent_rdata_fifo_out_data;                                                // enable_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          enable_s1_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_016:in_0_ready -> enable_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                  // avalon_st_adapter_016:out_0_valid -> enable_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                   // avalon_st_adapter_016:out_0_data -> enable_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                  // enable_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                  // avalon_st_adapter_016:out_0_error -> enable_s1_agent:rdata_fifo_sink_error
	wire          finalizacion_s1_agent_rdata_fifo_out_valid;                                         // finalizacion_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] finalizacion_s1_agent_rdata_fifo_out_data;                                          // finalizacion_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          finalizacion_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_017:in_0_ready -> finalizacion_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                  // avalon_st_adapter_017:out_0_valid -> finalizacion_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                   // avalon_st_adapter_017:out_0_data -> finalizacion_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                  // finalizacion_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                  // avalon_st_adapter_017:out_0_error -> finalizacion_s1_agent:rdata_fifo_sink_error
	wire          result0_64_bit_up_s1_agent_rdata_fifo_out_valid;                                    // result0_64_bit_up_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] result0_64_bit_up_s1_agent_rdata_fifo_out_data;                                     // result0_64_bit_up_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          result0_64_bit_up_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_018:in_0_ready -> result0_64_bit_up_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                  // avalon_st_adapter_018:out_0_valid -> result0_64_bit_up_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                   // avalon_st_adapter_018:out_0_data -> result0_64_bit_up_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                  // result0_64_bit_up_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                  // avalon_st_adapter_018:out_0_error -> result0_64_bit_up_s1_agent:rdata_fifo_sink_error
	wire          result0_64_bit_down_s1_agent_rdata_fifo_out_valid;                                  // result0_64_bit_down_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] result0_64_bit_down_s1_agent_rdata_fifo_out_data;                                   // result0_64_bit_down_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_019:in_0_data
	wire          result0_64_bit_down_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_019:in_0_ready -> result0_64_bit_down_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                  // avalon_st_adapter_019:out_0_valid -> result0_64_bit_down_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                   // avalon_st_adapter_019:out_0_data -> result0_64_bit_down_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                  // result0_64_bit_down_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                  // avalon_st_adapter_019:out_0_error -> result0_64_bit_down_s1_agent:rdata_fifo_sink_error
	wire          result1_64_bit_up_s1_agent_rdata_fifo_out_valid;                                    // result1_64_bit_up_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] result1_64_bit_up_s1_agent_rdata_fifo_out_data;                                     // result1_64_bit_up_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_020:in_0_data
	wire          result1_64_bit_up_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_020:in_0_ready -> result1_64_bit_up_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                  // avalon_st_adapter_020:out_0_valid -> result1_64_bit_up_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                   // avalon_st_adapter_020:out_0_data -> result1_64_bit_up_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                  // result1_64_bit_up_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                  // avalon_st_adapter_020:out_0_error -> result1_64_bit_up_s1_agent:rdata_fifo_sink_error
	wire          result1_64_bit_down_s1_agent_rdata_fifo_out_valid;                                  // result1_64_bit_down_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] result1_64_bit_down_s1_agent_rdata_fifo_out_data;                                   // result1_64_bit_down_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_021:in_0_data
	wire          result1_64_bit_down_s1_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_021:in_0_ready -> result1_64_bit_down_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                  // avalon_st_adapter_021:out_0_valid -> result1_64_bit_down_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                   // avalon_st_adapter_021:out_0_data -> result1_64_bit_down_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                  // result1_64_bit_down_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                  // avalon_st_adapter_021:out_0_error -> result1_64_bit_down_s1_agent:rdata_fifo_sink_error
	wire          result0_32_bit_s1_agent_rdata_fifo_out_valid;                                       // result0_32_bit_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] result0_32_bit_s1_agent_rdata_fifo_out_data;                                        // result0_32_bit_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_022:in_0_data
	wire          result0_32_bit_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_022:in_0_ready -> result0_32_bit_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                  // avalon_st_adapter_022:out_0_valid -> result0_32_bit_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                   // avalon_st_adapter_022:out_0_data -> result0_32_bit_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                  // result0_32_bit_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                  // avalon_st_adapter_022:out_0_error -> result0_32_bit_s1_agent:rdata_fifo_sink_error
	wire          result1_32_bit_s1_agent_rdata_fifo_out_valid;                                       // result1_32_bit_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_023:in_0_valid
	wire   [33:0] result1_32_bit_s1_agent_rdata_fifo_out_data;                                        // result1_32_bit_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_023:in_0_data
	wire          result1_32_bit_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_023:in_0_ready -> result1_32_bit_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                  // avalon_st_adapter_023:out_0_valid -> result1_32_bit_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_023_out_0_data;                                                   // avalon_st_adapter_023:out_0_data -> result1_32_bit_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                  // result1_32_bit_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                  // avalon_st_adapter_023:out_0_error -> result1_32_bit_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (21),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_gen2_0_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                               //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_gen2_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (21),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                      //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_0_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_0_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pll_reconfigurar_mgmt_avalon_slave_translator (
		.clk                    (clk_0_clk_clk),                                             //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (pll_reconfigurar_mgmt_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pll_reconfigurar_mgmt_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pll_reconfigurar_mgmt_avalon_slave_agent_m0_read),          //                         .read
		.uav_write              (pll_reconfigurar_mgmt_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pll_reconfigurar_mgmt_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pll_reconfigurar_mgmt_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pll_reconfigurar_mgmt_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pll_reconfigurar_mgmt_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pll_reconfigurar_mgmt_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pll_reconfigurar_mgmt_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pll_reconfigurar_mgmt_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (pll_reconfigurar_mgmt_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (pll_reconfigurar_mgmt_avalon_slave_write),                  //                         .write
		.av_read                (pll_reconfigurar_mgmt_avalon_slave_read),                   //                         .read
		.av_readdata            (pll_reconfigurar_mgmt_avalon_slave_readdata),               //                         .readdata
		.av_writedata           (pll_reconfigurar_mgmt_avalon_slave_writedata),              //                         .writedata
		.av_waitrequest         (pll_reconfigurar_mgmt_avalon_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo0_64_bit_up_out_translator (
		.clk                    (clock_bridge_0_out_clk_clk),                           //                      clk.clk
		.reset                  (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo0_64_bit_up_out_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (fifo0_64_bit_up_out_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (fifo0_64_bit_up_out_agent_m0_read),                    //                         .read
		.uav_write              (fifo0_64_bit_up_out_agent_m0_write),                   //                         .write
		.uav_waitrequest        (fifo0_64_bit_up_out_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (fifo0_64_bit_up_out_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (fifo0_64_bit_up_out_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (fifo0_64_bit_up_out_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (fifo0_64_bit_up_out_agent_m0_writedata),               //                         .writedata
		.uav_lock               (fifo0_64_bit_up_out_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (fifo0_64_bit_up_out_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (fifo0_64_bit_up_out_address),                          //      avalon_anti_slave_0.address
		.av_read                (fifo0_64_bit_up_out_read),                             //                         .read
		.av_readdata            (fifo0_64_bit_up_out_readdata),                         //                         .readdata
		.av_waitrequest         (fifo0_64_bit_up_out_waitrequest),                      //                         .waitrequest
		.av_write               (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo0_64_bit_down_out_translator (
		.clk                    (clock_bridge_0_out_clk_clk),                           //                      clk.clk
		.reset                  (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo0_64_bit_down_out_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (fifo0_64_bit_down_out_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (fifo0_64_bit_down_out_agent_m0_read),                  //                         .read
		.uav_write              (fifo0_64_bit_down_out_agent_m0_write),                 //                         .write
		.uav_waitrequest        (fifo0_64_bit_down_out_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (fifo0_64_bit_down_out_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (fifo0_64_bit_down_out_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (fifo0_64_bit_down_out_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (fifo0_64_bit_down_out_agent_m0_writedata),             //                         .writedata
		.uav_lock               (fifo0_64_bit_down_out_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (fifo0_64_bit_down_out_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (fifo0_64_bit_down_out_address),                        //      avalon_anti_slave_0.address
		.av_read                (fifo0_64_bit_down_out_read),                           //                         .read
		.av_readdata            (fifo0_64_bit_down_out_readdata),                       //                         .readdata
		.av_waitrequest         (fifo0_64_bit_down_out_waitrequest),                    //                         .waitrequest
		.av_write               (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo1_64_bit_up_out_translator (
		.clk                    (clock_bridge_0_out_clk_clk),                           //                      clk.clk
		.reset                  (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo1_64_bit_up_out_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (fifo1_64_bit_up_out_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (fifo1_64_bit_up_out_agent_m0_read),                    //                         .read
		.uav_write              (fifo1_64_bit_up_out_agent_m0_write),                   //                         .write
		.uav_waitrequest        (fifo1_64_bit_up_out_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (fifo1_64_bit_up_out_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (fifo1_64_bit_up_out_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (fifo1_64_bit_up_out_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (fifo1_64_bit_up_out_agent_m0_writedata),               //                         .writedata
		.uav_lock               (fifo1_64_bit_up_out_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (fifo1_64_bit_up_out_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (fifo1_64_bit_up_out_address),                          //      avalon_anti_slave_0.address
		.av_read                (fifo1_64_bit_up_out_read),                             //                         .read
		.av_readdata            (fifo1_64_bit_up_out_readdata),                         //                         .readdata
		.av_waitrequest         (fifo1_64_bit_up_out_waitrequest),                      //                         .waitrequest
		.av_write               (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo1_64_bit_down_out_translator (
		.clk                    (clock_bridge_0_out_clk_clk),                           //                      clk.clk
		.reset                  (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo1_64_bit_down_out_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (fifo1_64_bit_down_out_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (fifo1_64_bit_down_out_agent_m0_read),                  //                         .read
		.uav_write              (fifo1_64_bit_down_out_agent_m0_write),                 //                         .write
		.uav_waitrequest        (fifo1_64_bit_down_out_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (fifo1_64_bit_down_out_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (fifo1_64_bit_down_out_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (fifo1_64_bit_down_out_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (fifo1_64_bit_down_out_agent_m0_writedata),             //                         .writedata
		.uav_lock               (fifo1_64_bit_down_out_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (fifo1_64_bit_down_out_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (fifo1_64_bit_down_out_address),                        //      avalon_anti_slave_0.address
		.av_read                (fifo1_64_bit_down_out_read),                           //                         .read
		.av_readdata            (fifo1_64_bit_down_out_readdata),                       //                         .readdata
		.av_waitrequest         (fifo1_64_bit_down_out_waitrequest),                    //                         .waitrequest
		.av_write               (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo0_32_bit_out_translator (
		.clk                    (clock_bridge_0_out_clk_clk),                           //                      clk.clk
		.reset                  (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo0_32_bit_out_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (fifo0_32_bit_out_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (fifo0_32_bit_out_agent_m0_read),                       //                         .read
		.uav_write              (fifo0_32_bit_out_agent_m0_write),                      //                         .write
		.uav_waitrequest        (fifo0_32_bit_out_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (fifo0_32_bit_out_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (fifo0_32_bit_out_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (fifo0_32_bit_out_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (fifo0_32_bit_out_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (fifo0_32_bit_out_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (fifo0_32_bit_out_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (fifo0_32_bit_out_address),                             //      avalon_anti_slave_0.address
		.av_read                (fifo0_32_bit_out_read),                                //                         .read
		.av_readdata            (fifo0_32_bit_out_readdata),                            //                         .readdata
		.av_waitrequest         (fifo0_32_bit_out_waitrequest),                         //                         .waitrequest
		.av_write               (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo1_32_bit_out_translator (
		.clk                    (clock_bridge_0_out_clk_clk),                           //                      clk.clk
		.reset                  (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fifo1_32_bit_out_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (fifo1_32_bit_out_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (fifo1_32_bit_out_agent_m0_read),                       //                         .read
		.uav_write              (fifo1_32_bit_out_agent_m0_write),                      //                         .write
		.uav_waitrequest        (fifo1_32_bit_out_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (fifo1_32_bit_out_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (fifo1_32_bit_out_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (fifo1_32_bit_out_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (fifo1_32_bit_out_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (fifo1_32_bit_out_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (fifo1_32_bit_out_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (fifo1_32_bit_out_address),                             //      avalon_anti_slave_0.address
		.av_read                (fifo1_32_bit_out_read),                                //                         .read
		.av_readdata            (fifo1_32_bit_out_readdata),                            //                         .readdata
		.av_waitrequest         (fifo1_32_bit_out_waitrequest),                         //                         .waitrequest
		.av_write               (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (3),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameters_s0_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (parameters_s0_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (parameters_s0_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (parameters_s0_agent_m0_read),                   //                         .read
		.uav_write              (parameters_s0_agent_m0_write),                  //                         .write
		.uav_waitrequest        (parameters_s0_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (parameters_s0_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (parameters_s0_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (parameters_s0_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (parameters_s0_agent_m0_writedata),              //                         .writedata
		.uav_lock               (parameters_s0_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (parameters_s0_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (parameters_s0_address),                         //      avalon_anti_slave_0.address
		.av_write               (parameters_s0_write),                           //                         .write
		.av_read                (parameters_s0_read),                            //                         .read
		.av_readdata            (parameters_s0_readdata),                        //                         .readdata
		.av_writedata           (parameters_s0_writedata),                       //                         .writedata
		.av_byteenable          (parameters_s0_byteenable),                      //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (3),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameters_1_s0_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (parameters_1_s0_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (parameters_1_s0_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (parameters_1_s0_agent_m0_read),                 //                         .read
		.uav_write              (parameters_1_s0_agent_m0_write),                //                         .write
		.uav_waitrequest        (parameters_1_s0_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (parameters_1_s0_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (parameters_1_s0_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (parameters_1_s0_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (parameters_1_s0_agent_m0_writedata),            //                         .writedata
		.uav_lock               (parameters_1_s0_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (parameters_1_s0_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (parameters_1_s0_address),                       //      avalon_anti_slave_0.address
		.av_write               (parameters_1_s0_write),                         //                         .write
		.av_read                (parameters_1_s0_read),                          //                         .read
		.av_readdata            (parameters_1_s0_readdata),                      //                         .readdata
		.av_writedata           (parameters_1_s0_writedata),                     //                         .writedata
		.av_byteenable          (parameters_1_s0_byteenable),                    //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (3),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameters_2_s0_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (parameters_2_s0_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (parameters_2_s0_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (parameters_2_s0_agent_m0_read),                 //                         .read
		.uav_write              (parameters_2_s0_agent_m0_write),                //                         .write
		.uav_waitrequest        (parameters_2_s0_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (parameters_2_s0_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (parameters_2_s0_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (parameters_2_s0_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (parameters_2_s0_agent_m0_writedata),            //                         .writedata
		.uav_lock               (parameters_2_s0_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (parameters_2_s0_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (parameters_2_s0_address),                       //      avalon_anti_slave_0.address
		.av_write               (parameters_2_s0_write),                         //                         .write
		.av_read                (parameters_2_s0_read),                          //                         .read
		.av_readdata            (parameters_2_s0_readdata),                      //                         .readdata
		.av_writedata           (parameters_2_s0_writedata),                     //                         .writedata
		.av_byteenable          (parameters_2_s0_byteenable),                    //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (3),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) parameters_3_s0_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (parameters_3_s0_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (parameters_3_s0_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (parameters_3_s0_agent_m0_read),                 //                         .read
		.uav_write              (parameters_3_s0_agent_m0_write),                //                         .write
		.uav_waitrequest        (parameters_3_s0_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (parameters_3_s0_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (parameters_3_s0_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (parameters_3_s0_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (parameters_3_s0_agent_m0_writedata),            //                         .writedata
		.uav_lock               (parameters_3_s0_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (parameters_3_s0_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (parameters_3_s0_address),                       //      avalon_anti_slave_0.address
		.av_write               (parameters_3_s0_write),                         //                         .write
		.av_read                (parameters_3_s0_read),                          //                         .read
		.av_readdata            (parameters_3_s0_readdata),                      //                         .readdata
		.av_writedata           (parameters_3_s0_writedata),                     //                         .writedata
		.av_byteenable          (parameters_3_s0_byteenable),                    //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) program_memory_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (program_memory_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (program_memory_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (program_memory_s1_agent_m0_read),               //                         .read
		.uav_write              (program_memory_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (program_memory_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (program_memory_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (program_memory_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (program_memory_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (program_memory_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (program_memory_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (program_memory_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (program_memory_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (program_memory_s1_write),                       //                         .write
		.av_readdata            (program_memory_s1_readdata),                    //                         .readdata
		.av_writedata           (program_memory_s1_writedata),                   //                         .writedata
		.av_byteenable          (program_memory_s1_byteenable),                  //                         .byteenable
		.av_chipselect          (program_memory_s1_chipselect),                  //                         .chipselect
		.av_clken               (program_memory_s1_clken),                       //                         .clken
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) divisor_clock_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (divisor_clock_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (divisor_clock_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (divisor_clock_s1_agent_m0_read),                //                         .read
		.uav_write              (divisor_clock_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (divisor_clock_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (divisor_clock_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (divisor_clock_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (divisor_clock_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (divisor_clock_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (divisor_clock_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (divisor_clock_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (divisor_clock_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (divisor_clock_s1_write),                        //                         .write
		.av_readdata            (divisor_clock_s1_readdata),                     //                         .readdata
		.av_writedata           (divisor_clock_s1_writedata),                    //                         .writedata
		.av_chipselect          (divisor_clock_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) reset_s1_translator (
		.clk                    (clock_bridge_0_out_clk_clk),              //                      clk.clk
		.reset                  (reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (reset_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (reset_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (reset_s1_agent_m0_read),                  //                         .read
		.uav_write              (reset_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (reset_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (reset_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (reset_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (reset_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (reset_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (reset_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (reset_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (reset_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (reset_s1_write),                          //                         .write
		.av_readdata            (reset_s1_readdata),                       //                         .readdata
		.av_writedata           (reset_s1_writedata),                      //                         .writedata
		.av_chipselect          (reset_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_byteenable          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) enable_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (enable_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (enable_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (enable_s1_agent_m0_read),                       //                         .read
		.uav_write              (enable_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (enable_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (enable_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (enable_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (enable_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (enable_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (enable_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (enable_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (enable_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (enable_s1_write),                               //                         .write
		.av_readdata            (enable_s1_readdata),                            //                         .readdata
		.av_writedata           (enable_s1_writedata),                           //                         .writedata
		.av_chipselect          (enable_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) finalizacion_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (finalizacion_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (finalizacion_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (finalizacion_s1_agent_m0_read),                 //                         .read
		.uav_write              (finalizacion_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (finalizacion_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (finalizacion_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (finalizacion_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (finalizacion_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (finalizacion_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (finalizacion_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (finalizacion_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (finalizacion_s1_address),                       //      avalon_anti_slave_0.address
		.av_readdata            (finalizacion_s1_readdata),                      //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) result0_64_bit_up_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (result0_64_bit_up_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (result0_64_bit_up_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (result0_64_bit_up_s1_agent_m0_read),            //                         .read
		.uav_write              (result0_64_bit_up_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (result0_64_bit_up_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (result0_64_bit_up_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (result0_64_bit_up_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (result0_64_bit_up_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (result0_64_bit_up_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (result0_64_bit_up_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (result0_64_bit_up_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (result0_64_bit_up_s1_address),                  //      avalon_anti_slave_0.address
		.av_readdata            (result0_64_bit_up_s1_readdata),                 //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) result0_64_bit_down_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (result0_64_bit_down_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (result0_64_bit_down_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (result0_64_bit_down_s1_agent_m0_read),          //                         .read
		.uav_write              (result0_64_bit_down_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (result0_64_bit_down_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (result0_64_bit_down_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (result0_64_bit_down_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (result0_64_bit_down_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (result0_64_bit_down_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (result0_64_bit_down_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (result0_64_bit_down_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (result0_64_bit_down_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (result0_64_bit_down_s1_readdata),               //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) result1_64_bit_up_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (result1_64_bit_up_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (result1_64_bit_up_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (result1_64_bit_up_s1_agent_m0_read),            //                         .read
		.uav_write              (result1_64_bit_up_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (result1_64_bit_up_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (result1_64_bit_up_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (result1_64_bit_up_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (result1_64_bit_up_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (result1_64_bit_up_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (result1_64_bit_up_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (result1_64_bit_up_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (result1_64_bit_up_s1_address),                  //      avalon_anti_slave_0.address
		.av_readdata            (result1_64_bit_up_s1_readdata),                 //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) result1_64_bit_down_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (result1_64_bit_down_s1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (result1_64_bit_down_s1_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (result1_64_bit_down_s1_agent_m0_read),          //                         .read
		.uav_write              (result1_64_bit_down_s1_agent_m0_write),         //                         .write
		.uav_waitrequest        (result1_64_bit_down_s1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (result1_64_bit_down_s1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (result1_64_bit_down_s1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (result1_64_bit_down_s1_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (result1_64_bit_down_s1_agent_m0_writedata),     //                         .writedata
		.uav_lock               (result1_64_bit_down_s1_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (result1_64_bit_down_s1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (result1_64_bit_down_s1_address),                //      avalon_anti_slave_0.address
		.av_readdata            (result1_64_bit_down_s1_readdata),               //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) result0_32_bit_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (result0_32_bit_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (result0_32_bit_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (result0_32_bit_s1_agent_m0_read),               //                         .read
		.uav_write              (result0_32_bit_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (result0_32_bit_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (result0_32_bit_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (result0_32_bit_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (result0_32_bit_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (result0_32_bit_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (result0_32_bit_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (result0_32_bit_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (result0_32_bit_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (result0_32_bit_s1_readdata),                    //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) result1_32_bit_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (result1_32_bit_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (result1_32_bit_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (result1_32_bit_s1_agent_m0_read),               //                         .read
		.uav_write              (result1_32_bit_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (result1_32_bit_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (result1_32_bit_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (result1_32_bit_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (result1_32_bit_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (result1_32_bit_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (result1_32_bit_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (result1_32_bit_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (result1_32_bit_s1_address),                     //      avalon_anti_slave_0.address
		.av_readdata            (result1_32_bit_s1_readdata),                    //                         .readdata
		.av_write               (),                                              //              (terminated)
		.av_read                (),                                              //              (terminated)
		.av_writedata           (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (96),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                               //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (96),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                        //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_CACHE_H               (114),
		.PKT_CACHE_L               (111),
		.PKT_THREAD_ID_H           (107),
		.PKT_THREAD_ID_L           (96),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                            //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_0_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_gen2_0_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_0_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_0_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_0_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_0_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_0_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_0_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                       //                .channel
		.rf_sink_ready           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_0_debug_mem_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pll_reconfigurar_mgmt_avalon_slave_agent (
		.clk                     (clk_0_clk_clk),                                                          //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (pll_reconfigurar_mgmt_avalon_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pll_reconfigurar_mgmt_avalon_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pll_reconfigurar_mgmt_avalon_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pll_reconfigurar_mgmt_avalon_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pll_reconfigurar_mgmt_avalon_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (pll_reconfigurar_mgmt_avalon_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pll_reconfigurar_mgmt_avalon_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pll_reconfigurar_mgmt_avalon_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (pll_reconfigurar_mgmt_avalon_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pll_reconfigurar_mgmt_avalon_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (pll_reconfigurar_mgmt_avalon_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (pll_reconfigurar_mgmt_avalon_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pll_reconfigurar_mgmt_avalon_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (pll_reconfigurar_mgmt_avalon_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (pll_reconfigurar_mgmt_avalon_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (pll_reconfigurar_mgmt_avalon_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                       //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pll_reconfigurar_mgmt_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pll_reconfigurar_mgmt_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                          // (terminated)
		.out_startofpacket (),                                                              // (terminated)
		.out_endofpacket   (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo0_64_bit_up_out_agent (
		.clk                     (clock_bridge_0_out_clk_clk),                              //             clk.clk
		.reset                   (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (fifo0_64_bit_up_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo0_64_bit_up_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo0_64_bit_up_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo0_64_bit_up_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo0_64_bit_up_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo0_64_bit_up_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo0_64_bit_up_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo0_64_bit_up_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo0_64_bit_up_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo0_64_bit_up_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo0_64_bit_up_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo0_64_bit_up_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo0_64_bit_up_out_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo0_64_bit_up_out_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo0_64_bit_up_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo0_64_bit_up_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo0_64_bit_up_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo0_64_bit_up_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo0_64_bit_up_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo0_64_bit_up_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo0_64_bit_up_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo0_64_bit_up_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo0_64_bit_up_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo0_64_bit_up_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo0_64_bit_up_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo0_64_bit_up_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo0_64_bit_up_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo0_64_bit_up_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo0_64_bit_up_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo0_64_bit_up_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo0_64_bit_up_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo0_64_bit_up_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (fifo0_64_bit_up_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo0_64_bit_up_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo0_64_bit_up_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo0_64_bit_up_out_agent_rsp_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset             (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo0_64_bit_up_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo0_64_bit_up_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo0_64_bit_up_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo0_64_bit_up_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo0_64_bit_up_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo0_64_bit_up_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo0_64_bit_up_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo0_64_bit_up_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo0_64_bit_up_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo0_64_bit_up_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo0_64_bit_up_out_agent_rdata_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset             (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo0_64_bit_up_out_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (fifo0_64_bit_up_out_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (fifo0_64_bit_up_out_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (fifo0_64_bit_up_out_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (fifo0_64_bit_up_out_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (fifo0_64_bit_up_out_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo0_64_bit_down_out_agent (
		.clk                     (clock_bridge_0_out_clk_clk),                                //             clk.clk
		.reset                   (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (fifo0_64_bit_down_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo0_64_bit_down_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo0_64_bit_down_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo0_64_bit_down_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo0_64_bit_down_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo0_64_bit_down_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo0_64_bit_down_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo0_64_bit_down_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo0_64_bit_down_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo0_64_bit_down_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo0_64_bit_down_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo0_64_bit_down_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo0_64_bit_down_out_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo0_64_bit_down_out_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo0_64_bit_down_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo0_64_bit_down_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo0_64_bit_down_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo0_64_bit_down_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo0_64_bit_down_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo0_64_bit_down_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo0_64_bit_down_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo0_64_bit_down_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo0_64_bit_down_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo0_64_bit_down_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo0_64_bit_down_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo0_64_bit_down_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo0_64_bit_down_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo0_64_bit_down_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo0_64_bit_down_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo0_64_bit_down_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo0_64_bit_down_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo0_64_bit_down_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (fifo0_64_bit_down_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo0_64_bit_down_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo0_64_bit_down_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo0_64_bit_down_out_agent_rsp_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                             //       clk.clk
		.reset             (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (fifo0_64_bit_down_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo0_64_bit_down_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo0_64_bit_down_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo0_64_bit_down_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo0_64_bit_down_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo0_64_bit_down_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo0_64_bit_down_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo0_64_bit_down_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo0_64_bit_down_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo0_64_bit_down_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo0_64_bit_down_out_agent_rdata_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset             (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo0_64_bit_down_out_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (fifo0_64_bit_down_out_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (fifo0_64_bit_down_out_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (fifo0_64_bit_down_out_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (fifo0_64_bit_down_out_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (fifo0_64_bit_down_out_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo1_64_bit_up_out_agent (
		.clk                     (clock_bridge_0_out_clk_clk),                              //             clk.clk
		.reset                   (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (fifo1_64_bit_up_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo1_64_bit_up_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo1_64_bit_up_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo1_64_bit_up_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo1_64_bit_up_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo1_64_bit_up_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo1_64_bit_up_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo1_64_bit_up_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo1_64_bit_up_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo1_64_bit_up_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo1_64_bit_up_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo1_64_bit_up_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo1_64_bit_up_out_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo1_64_bit_up_out_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo1_64_bit_up_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo1_64_bit_up_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo1_64_bit_up_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo1_64_bit_up_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo1_64_bit_up_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo1_64_bit_up_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo1_64_bit_up_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo1_64_bit_up_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo1_64_bit_up_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo1_64_bit_up_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo1_64_bit_up_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo1_64_bit_up_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo1_64_bit_up_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo1_64_bit_up_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo1_64_bit_up_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo1_64_bit_up_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo1_64_bit_up_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo1_64_bit_up_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (fifo1_64_bit_up_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo1_64_bit_up_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo1_64_bit_up_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo1_64_bit_up_out_agent_rsp_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset             (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo1_64_bit_up_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo1_64_bit_up_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo1_64_bit_up_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo1_64_bit_up_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo1_64_bit_up_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo1_64_bit_up_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo1_64_bit_up_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo1_64_bit_up_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo1_64_bit_up_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo1_64_bit_up_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo1_64_bit_up_out_agent_rdata_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset             (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo1_64_bit_up_out_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (fifo1_64_bit_up_out_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (fifo1_64_bit_up_out_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (fifo1_64_bit_up_out_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (fifo1_64_bit_up_out_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (fifo1_64_bit_up_out_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo1_64_bit_down_out_agent (
		.clk                     (clock_bridge_0_out_clk_clk),                                //             clk.clk
		.reset                   (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (fifo1_64_bit_down_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo1_64_bit_down_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo1_64_bit_down_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo1_64_bit_down_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo1_64_bit_down_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo1_64_bit_down_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo1_64_bit_down_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo1_64_bit_down_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo1_64_bit_down_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo1_64_bit_down_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo1_64_bit_down_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo1_64_bit_down_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo1_64_bit_down_out_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo1_64_bit_down_out_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo1_64_bit_down_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo1_64_bit_down_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo1_64_bit_down_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo1_64_bit_down_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo1_64_bit_down_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo1_64_bit_down_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo1_64_bit_down_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo1_64_bit_down_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo1_64_bit_down_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo1_64_bit_down_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo1_64_bit_down_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo1_64_bit_down_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo1_64_bit_down_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo1_64_bit_down_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo1_64_bit_down_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo1_64_bit_down_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo1_64_bit_down_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo1_64_bit_down_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (fifo1_64_bit_down_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo1_64_bit_down_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo1_64_bit_down_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo1_64_bit_down_out_agent_rsp_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                             //       clk.clk
		.reset             (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (fifo1_64_bit_down_out_agent_rf_source_data),             //        in.data
		.in_valid          (fifo1_64_bit_down_out_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo1_64_bit_down_out_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo1_64_bit_down_out_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo1_64_bit_down_out_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo1_64_bit_down_out_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo1_64_bit_down_out_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo1_64_bit_down_out_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo1_64_bit_down_out_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo1_64_bit_down_out_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo1_64_bit_down_out_agent_rdata_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset             (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo1_64_bit_down_out_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (fifo1_64_bit_down_out_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (fifo1_64_bit_down_out_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (fifo1_64_bit_down_out_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (fifo1_64_bit_down_out_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (fifo1_64_bit_down_out_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo0_32_bit_out_agent (
		.clk                     (clock_bridge_0_out_clk_clk),                           //             clk.clk
		.reset                   (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (fifo0_32_bit_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo0_32_bit_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo0_32_bit_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo0_32_bit_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo0_32_bit_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo0_32_bit_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo0_32_bit_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo0_32_bit_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo0_32_bit_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo0_32_bit_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo0_32_bit_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo0_32_bit_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo0_32_bit_out_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo0_32_bit_out_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo0_32_bit_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo0_32_bit_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo0_32_bit_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo0_32_bit_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo0_32_bit_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo0_32_bit_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo0_32_bit_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo0_32_bit_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo0_32_bit_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo0_32_bit_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo0_32_bit_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo0_32_bit_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo0_32_bit_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo0_32_bit_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo0_32_bit_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo0_32_bit_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo0_32_bit_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo0_32_bit_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (fifo0_32_bit_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo0_32_bit_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo0_32_bit_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo0_32_bit_out_agent_rsp_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset             (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo0_32_bit_out_agent_rf_source_data),                //        in.data
		.in_valid          (fifo0_32_bit_out_agent_rf_source_valid),               //          .valid
		.in_ready          (fifo0_32_bit_out_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (fifo0_32_bit_out_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (fifo0_32_bit_out_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (fifo0_32_bit_out_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (fifo0_32_bit_out_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (fifo0_32_bit_out_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (fifo0_32_bit_out_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (fifo0_32_bit_out_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo0_32_bit_out_agent_rdata_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset             (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo0_32_bit_out_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (fifo0_32_bit_out_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (fifo0_32_bit_out_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (fifo0_32_bit_out_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (fifo0_32_bit_out_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (fifo0_32_bit_out_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo1_32_bit_out_agent (
		.clk                     (clock_bridge_0_out_clk_clk),                           //             clk.clk
		.reset                   (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (fifo1_32_bit_out_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo1_32_bit_out_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo1_32_bit_out_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo1_32_bit_out_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo1_32_bit_out_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo1_32_bit_out_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo1_32_bit_out_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo1_32_bit_out_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo1_32_bit_out_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo1_32_bit_out_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo1_32_bit_out_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo1_32_bit_out_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo1_32_bit_out_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo1_32_bit_out_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo1_32_bit_out_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo1_32_bit_out_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo1_32_bit_out_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo1_32_bit_out_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo1_32_bit_out_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo1_32_bit_out_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo1_32_bit_out_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo1_32_bit_out_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo1_32_bit_out_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo1_32_bit_out_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo1_32_bit_out_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo1_32_bit_out_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo1_32_bit_out_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo1_32_bit_out_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo1_32_bit_out_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo1_32_bit_out_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo1_32_bit_out_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo1_32_bit_out_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (fifo1_32_bit_out_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo1_32_bit_out_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo1_32_bit_out_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo1_32_bit_out_agent_rsp_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset             (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo1_32_bit_out_agent_rf_source_data),                //        in.data
		.in_valid          (fifo1_32_bit_out_agent_rf_source_valid),               //          .valid
		.in_ready          (fifo1_32_bit_out_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (fifo1_32_bit_out_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (fifo1_32_bit_out_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (fifo1_32_bit_out_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (fifo1_32_bit_out_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (fifo1_32_bit_out_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (fifo1_32_bit_out_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (fifo1_32_bit_out_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo1_32_bit_out_agent_rdata_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset             (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fifo1_32_bit_out_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (fifo1_32_bit_out_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (fifo1_32_bit_out_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (fifo1_32_bit_out_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (fifo1_32_bit_out_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (fifo1_32_bit_out_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameters_s0_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (parameters_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (parameters_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (parameters_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (parameters_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (parameters_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (parameters_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (parameters_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (parameters_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (parameters_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (parameters_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (parameters_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (parameters_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (parameters_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (parameters_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (parameters_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (parameters_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (parameters_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (parameters_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (parameters_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (parameters_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (parameters_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (parameters_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (parameters_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (parameters_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (parameters_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (parameters_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (parameters_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (parameters_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (parameters_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (parameters_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (parameters_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (parameters_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (parameters_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameters_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (parameters_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameters_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (parameters_s0_agent_rf_source_data),             //        in.data
		.in_valid          (parameters_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (parameters_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (parameters_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (parameters_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (parameters_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (parameters_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (parameters_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (parameters_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (parameters_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameters_s0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (parameters_s0_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (parameters_s0_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (parameters_s0_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (parameters_s0_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (parameters_s0_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (parameters_s0_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameters_1_s0_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (parameters_1_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (parameters_1_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (parameters_1_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (parameters_1_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (parameters_1_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (parameters_1_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (parameters_1_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (parameters_1_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (parameters_1_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (parameters_1_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (parameters_1_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (parameters_1_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (parameters_1_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (parameters_1_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (parameters_1_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (parameters_1_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (parameters_1_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (parameters_1_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (parameters_1_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (parameters_1_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (parameters_1_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (parameters_1_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (parameters_1_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (parameters_1_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (parameters_1_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (parameters_1_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (parameters_1_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (parameters_1_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (parameters_1_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (parameters_1_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (parameters_1_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (parameters_1_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (parameters_1_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameters_1_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (parameters_1_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameters_1_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (parameters_1_s0_agent_rf_source_data),             //        in.data
		.in_valid          (parameters_1_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (parameters_1_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (parameters_1_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (parameters_1_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (parameters_1_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (parameters_1_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (parameters_1_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (parameters_1_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (parameters_1_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameters_1_s0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (parameters_1_s0_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (parameters_1_s0_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (parameters_1_s0_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (parameters_1_s0_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (parameters_1_s0_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (parameters_1_s0_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameters_2_s0_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (parameters_2_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (parameters_2_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (parameters_2_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (parameters_2_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (parameters_2_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (parameters_2_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (parameters_2_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (parameters_2_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (parameters_2_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (parameters_2_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (parameters_2_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (parameters_2_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (parameters_2_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (parameters_2_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (parameters_2_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (parameters_2_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (parameters_2_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (parameters_2_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (parameters_2_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (parameters_2_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (parameters_2_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (parameters_2_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (parameters_2_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (parameters_2_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (parameters_2_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (parameters_2_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (parameters_2_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (parameters_2_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (parameters_2_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (parameters_2_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (parameters_2_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (parameters_2_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (parameters_2_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameters_2_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (parameters_2_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameters_2_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (parameters_2_s0_agent_rf_source_data),             //        in.data
		.in_valid          (parameters_2_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (parameters_2_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (parameters_2_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (parameters_2_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (parameters_2_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (parameters_2_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (parameters_2_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (parameters_2_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (parameters_2_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameters_2_s0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (parameters_2_s0_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (parameters_2_s0_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (parameters_2_s0_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (parameters_2_s0_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (parameters_2_s0_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (parameters_2_s0_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) parameters_3_s0_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (parameters_3_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (parameters_3_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (parameters_3_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (parameters_3_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (parameters_3_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (parameters_3_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (parameters_3_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (parameters_3_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (parameters_3_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (parameters_3_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (parameters_3_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (parameters_3_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (parameters_3_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (parameters_3_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (parameters_3_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (parameters_3_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (parameters_3_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (parameters_3_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (parameters_3_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (parameters_3_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (parameters_3_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (parameters_3_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (parameters_3_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (parameters_3_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (parameters_3_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (parameters_3_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (parameters_3_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (parameters_3_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (parameters_3_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (parameters_3_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (parameters_3_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (parameters_3_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (parameters_3_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (parameters_3_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (parameters_3_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameters_3_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (parameters_3_s0_agent_rf_source_data),             //        in.data
		.in_valid          (parameters_3_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (parameters_3_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (parameters_3_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (parameters_3_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (parameters_3_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (parameters_3_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (parameters_3_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (parameters_3_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (parameters_3_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) parameters_3_s0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (parameters_3_s0_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (parameters_3_s0_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (parameters_3_s0_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (parameters_3_s0_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (parameters_3_s0_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (parameters_3_s0_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) program_memory_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (program_memory_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (program_memory_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (program_memory_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (program_memory_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (program_memory_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (program_memory_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (program_memory_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (program_memory_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (program_memory_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (program_memory_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (program_memory_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (program_memory_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (program_memory_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (program_memory_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (program_memory_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (program_memory_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (program_memory_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (program_memory_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (program_memory_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (program_memory_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (program_memory_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (program_memory_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (program_memory_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (program_memory_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (program_memory_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (program_memory_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (program_memory_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (program_memory_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (program_memory_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (program_memory_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (program_memory_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (program_memory_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (program_memory_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (program_memory_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (program_memory_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) program_memory_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (program_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (program_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (program_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (program_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (program_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (program_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (program_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (program_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (program_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (program_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) program_memory_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (program_memory_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (program_memory_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (program_memory_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (program_memory_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (program_memory_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (program_memory_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) divisor_clock_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (divisor_clock_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (divisor_clock_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (divisor_clock_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (divisor_clock_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (divisor_clock_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (divisor_clock_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (divisor_clock_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (divisor_clock_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (divisor_clock_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (divisor_clock_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (divisor_clock_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (divisor_clock_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (divisor_clock_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (divisor_clock_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (divisor_clock_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (divisor_clock_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (divisor_clock_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (divisor_clock_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (divisor_clock_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (divisor_clock_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (divisor_clock_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (divisor_clock_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (divisor_clock_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (divisor_clock_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (divisor_clock_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (divisor_clock_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (divisor_clock_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (divisor_clock_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (divisor_clock_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (divisor_clock_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (divisor_clock_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (divisor_clock_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (divisor_clock_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (divisor_clock_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (divisor_clock_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) divisor_clock_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (divisor_clock_s1_agent_rf_source_data),             //        in.data
		.in_valid          (divisor_clock_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (divisor_clock_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (divisor_clock_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (divisor_clock_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (divisor_clock_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (divisor_clock_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (divisor_clock_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (divisor_clock_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (divisor_clock_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) divisor_clock_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (divisor_clock_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (divisor_clock_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (divisor_clock_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (divisor_clock_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (divisor_clock_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (divisor_clock_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) reset_s1_agent (
		.clk                     (clock_bridge_0_out_clk_clk),                   //             clk.clk
		.reset                   (reset_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (reset_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (reset_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (reset_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (reset_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (reset_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (reset_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (reset_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (reset_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (reset_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (reset_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (reset_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (reset_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (reset_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (reset_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (reset_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (reset_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (reset_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (reset_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (reset_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (reset_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (reset_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (reset_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (reset_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (reset_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (reset_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (reset_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (reset_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (reset_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (reset_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (reset_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (reset_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (reset_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),            //                .error
		.rdata_fifo_src_ready    (reset_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (reset_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (reset_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reset_s1_agent_rsp_fifo (
		.clk               (clock_bridge_0_out_clk_clk),                //       clk.clk
		.reset             (reset_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (reset_s1_agent_rf_source_data),             //        in.data
		.in_valid          (reset_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (reset_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (reset_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (reset_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (reset_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (reset_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (reset_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (reset_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (reset_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reset_s1_agent_rdata_fifo (
		.clk               (clock_bridge_0_out_clk_clk),              //       clk.clk
		.reset             (reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (reset_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (reset_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (reset_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (reset_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (reset_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (reset_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) enable_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (enable_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (enable_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (enable_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (enable_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (enable_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (enable_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (enable_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (enable_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (enable_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (enable_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (enable_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (enable_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (enable_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (enable_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (enable_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (enable_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (enable_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (enable_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (enable_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (enable_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (enable_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (enable_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (enable_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (enable_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (enable_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (enable_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (enable_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (enable_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (enable_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (enable_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (enable_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (enable_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),             //                .error
		.rdata_fifo_src_ready    (enable_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (enable_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (enable_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) enable_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (enable_s1_agent_rf_source_data),                //        in.data
		.in_valid          (enable_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (enable_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (enable_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (enable_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (enable_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (enable_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (enable_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (enable_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (enable_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) enable_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (enable_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (enable_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (enable_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (enable_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (enable_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (enable_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) finalizacion_s1_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (finalizacion_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (finalizacion_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (finalizacion_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (finalizacion_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (finalizacion_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (finalizacion_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (finalizacion_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (finalizacion_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (finalizacion_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (finalizacion_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (finalizacion_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (finalizacion_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (finalizacion_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (finalizacion_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (finalizacion_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (finalizacion_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (finalizacion_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (finalizacion_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (finalizacion_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (finalizacion_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (finalizacion_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (finalizacion_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (finalizacion_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (finalizacion_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (finalizacion_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (finalizacion_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (finalizacion_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (finalizacion_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (finalizacion_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (finalizacion_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (finalizacion_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (finalizacion_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (finalizacion_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (finalizacion_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (finalizacion_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) finalizacion_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (finalizacion_s1_agent_rf_source_data),             //        in.data
		.in_valid          (finalizacion_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (finalizacion_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (finalizacion_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (finalizacion_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (finalizacion_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (finalizacion_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (finalizacion_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (finalizacion_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (finalizacion_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) finalizacion_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (finalizacion_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (finalizacion_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (finalizacion_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (finalizacion_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (finalizacion_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (finalizacion_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) result0_64_bit_up_s1_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (result0_64_bit_up_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (result0_64_bit_up_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (result0_64_bit_up_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (result0_64_bit_up_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (result0_64_bit_up_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (result0_64_bit_up_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (result0_64_bit_up_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (result0_64_bit_up_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (result0_64_bit_up_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (result0_64_bit_up_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (result0_64_bit_up_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (result0_64_bit_up_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (result0_64_bit_up_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (result0_64_bit_up_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (result0_64_bit_up_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (result0_64_bit_up_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (result0_64_bit_up_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (result0_64_bit_up_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (result0_64_bit_up_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (result0_64_bit_up_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (result0_64_bit_up_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (result0_64_bit_up_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (result0_64_bit_up_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (result0_64_bit_up_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (result0_64_bit_up_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (result0_64_bit_up_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (result0_64_bit_up_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (result0_64_bit_up_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (result0_64_bit_up_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (result0_64_bit_up_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (result0_64_bit_up_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (result0_64_bit_up_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (result0_64_bit_up_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (result0_64_bit_up_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (result0_64_bit_up_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result0_64_bit_up_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (result0_64_bit_up_s1_agent_rf_source_data),             //        in.data
		.in_valid          (result0_64_bit_up_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (result0_64_bit_up_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (result0_64_bit_up_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (result0_64_bit_up_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (result0_64_bit_up_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (result0_64_bit_up_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (result0_64_bit_up_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (result0_64_bit_up_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (result0_64_bit_up_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result0_64_bit_up_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (result0_64_bit_up_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (result0_64_bit_up_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (result0_64_bit_up_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (result0_64_bit_up_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (result0_64_bit_up_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (result0_64_bit_up_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) result0_64_bit_down_s1_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (result0_64_bit_down_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (result0_64_bit_down_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (result0_64_bit_down_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (result0_64_bit_down_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (result0_64_bit_down_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (result0_64_bit_down_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (result0_64_bit_down_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (result0_64_bit_down_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (result0_64_bit_down_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (result0_64_bit_down_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (result0_64_bit_down_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (result0_64_bit_down_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (result0_64_bit_down_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (result0_64_bit_down_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (result0_64_bit_down_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (result0_64_bit_down_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (result0_64_bit_down_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (result0_64_bit_down_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (result0_64_bit_down_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (result0_64_bit_down_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (result0_64_bit_down_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (result0_64_bit_down_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (result0_64_bit_down_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (result0_64_bit_down_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (result0_64_bit_down_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (result0_64_bit_down_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (result0_64_bit_down_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (result0_64_bit_down_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (result0_64_bit_down_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (result0_64_bit_down_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (result0_64_bit_down_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (result0_64_bit_down_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (result0_64_bit_down_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (result0_64_bit_down_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (result0_64_bit_down_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result0_64_bit_down_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (result0_64_bit_down_s1_agent_rf_source_data),             //        in.data
		.in_valid          (result0_64_bit_down_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (result0_64_bit_down_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (result0_64_bit_down_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (result0_64_bit_down_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (result0_64_bit_down_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (result0_64_bit_down_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (result0_64_bit_down_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (result0_64_bit_down_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (result0_64_bit_down_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result0_64_bit_down_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (result0_64_bit_down_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (result0_64_bit_down_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (result0_64_bit_down_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (result0_64_bit_down_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (result0_64_bit_down_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (result0_64_bit_down_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) result1_64_bit_up_s1_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (result1_64_bit_up_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (result1_64_bit_up_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (result1_64_bit_up_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (result1_64_bit_up_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (result1_64_bit_up_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (result1_64_bit_up_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (result1_64_bit_up_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (result1_64_bit_up_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (result1_64_bit_up_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (result1_64_bit_up_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (result1_64_bit_up_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (result1_64_bit_up_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (result1_64_bit_up_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (result1_64_bit_up_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (result1_64_bit_up_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (result1_64_bit_up_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (result1_64_bit_up_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (result1_64_bit_up_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (result1_64_bit_up_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (result1_64_bit_up_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (result1_64_bit_up_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (result1_64_bit_up_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (result1_64_bit_up_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (result1_64_bit_up_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (result1_64_bit_up_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (result1_64_bit_up_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (result1_64_bit_up_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (result1_64_bit_up_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (result1_64_bit_up_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (result1_64_bit_up_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (result1_64_bit_up_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (result1_64_bit_up_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                        //                .error
		.rdata_fifo_src_ready    (result1_64_bit_up_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (result1_64_bit_up_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (result1_64_bit_up_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result1_64_bit_up_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                         //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (result1_64_bit_up_s1_agent_rf_source_data),             //        in.data
		.in_valid          (result1_64_bit_up_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (result1_64_bit_up_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (result1_64_bit_up_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (result1_64_bit_up_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (result1_64_bit_up_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (result1_64_bit_up_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (result1_64_bit_up_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (result1_64_bit_up_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (result1_64_bit_up_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result1_64_bit_up_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (result1_64_bit_up_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (result1_64_bit_up_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (result1_64_bit_up_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (result1_64_bit_up_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (result1_64_bit_up_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (result1_64_bit_up_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) result1_64_bit_down_s1_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (result1_64_bit_down_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (result1_64_bit_down_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (result1_64_bit_down_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (result1_64_bit_down_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (result1_64_bit_down_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (result1_64_bit_down_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (result1_64_bit_down_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (result1_64_bit_down_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (result1_64_bit_down_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (result1_64_bit_down_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (result1_64_bit_down_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (result1_64_bit_down_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (result1_64_bit_down_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (result1_64_bit_down_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (result1_64_bit_down_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (result1_64_bit_down_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (result1_64_bit_down_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (result1_64_bit_down_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (result1_64_bit_down_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (result1_64_bit_down_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (result1_64_bit_down_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (result1_64_bit_down_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (result1_64_bit_down_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (result1_64_bit_down_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (result1_64_bit_down_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (result1_64_bit_down_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (result1_64_bit_down_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (result1_64_bit_down_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (result1_64_bit_down_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (result1_64_bit_down_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (result1_64_bit_down_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (result1_64_bit_down_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (result1_64_bit_down_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (result1_64_bit_down_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (result1_64_bit_down_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result1_64_bit_down_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (result1_64_bit_down_s1_agent_rf_source_data),             //        in.data
		.in_valid          (result1_64_bit_down_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (result1_64_bit_down_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (result1_64_bit_down_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (result1_64_bit_down_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (result1_64_bit_down_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (result1_64_bit_down_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (result1_64_bit_down_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (result1_64_bit_down_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (result1_64_bit_down_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result1_64_bit_down_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (result1_64_bit_down_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (result1_64_bit_down_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (result1_64_bit_down_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (result1_64_bit_down_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (result1_64_bit_down_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (result1_64_bit_down_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) result0_32_bit_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (result0_32_bit_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (result0_32_bit_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (result0_32_bit_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (result0_32_bit_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (result0_32_bit_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (result0_32_bit_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (result0_32_bit_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (result0_32_bit_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (result0_32_bit_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (result0_32_bit_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (result0_32_bit_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (result0_32_bit_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (result0_32_bit_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (result0_32_bit_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (result0_32_bit_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (result0_32_bit_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (result0_32_bit_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (result0_32_bit_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (result0_32_bit_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (result0_32_bit_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (result0_32_bit_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (result0_32_bit_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (result0_32_bit_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (result0_32_bit_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (result0_32_bit_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (result0_32_bit_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (result0_32_bit_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (result0_32_bit_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (result0_32_bit_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (result0_32_bit_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (result0_32_bit_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (result0_32_bit_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (result0_32_bit_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (result0_32_bit_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (result0_32_bit_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result0_32_bit_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (result0_32_bit_s1_agent_rf_source_data),             //        in.data
		.in_valid          (result0_32_bit_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (result0_32_bit_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (result0_32_bit_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (result0_32_bit_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (result0_32_bit_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (result0_32_bit_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (result0_32_bit_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (result0_32_bit_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (result0_32_bit_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result0_32_bit_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (result0_32_bit_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (result0_32_bit_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (result0_32_bit_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (result0_32_bit_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (result0_32_bit_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (result0_32_bit_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (119),
		.PKT_ORI_BURST_SIZE_L      (117),
		.PKT_RESPONSE_STATUS_H     (116),
		.PKT_RESPONSE_STATUS_L     (115),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (110),
		.PKT_PROTECTION_L          (108),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (24),
		.ST_DATA_W                 (120),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) result1_32_bit_s1_agent (
		.clk                     (clk_0_clk_clk),                                         //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (result1_32_bit_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (result1_32_bit_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (result1_32_bit_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (result1_32_bit_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (result1_32_bit_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (result1_32_bit_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (result1_32_bit_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (result1_32_bit_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (result1_32_bit_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (result1_32_bit_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (result1_32_bit_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (result1_32_bit_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (result1_32_bit_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (result1_32_bit_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (result1_32_bit_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (result1_32_bit_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (result1_32_bit_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (result1_32_bit_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (result1_32_bit_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (result1_32_bit_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (result1_32_bit_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (result1_32_bit_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (result1_32_bit_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (result1_32_bit_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (result1_32_bit_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (result1_32_bit_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (result1_32_bit_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (result1_32_bit_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (result1_32_bit_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (result1_32_bit_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (result1_32_bit_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (result1_32_bit_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (result1_32_bit_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (result1_32_bit_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (result1_32_bit_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (121),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result1_32_bit_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (result1_32_bit_s1_agent_rf_source_data),             //        in.data
		.in_valid          (result1_32_bit_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (result1_32_bit_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (result1_32_bit_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (result1_32_bit_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (result1_32_bit_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (result1_32_bit_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (result1_32_bit_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (result1_32_bit_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (result1_32_bit_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) result1_32_bit_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (result1_32_bit_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (result1_32_bit_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (result1_32_bit_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (result1_32_bit_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (result1_32_bit_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (result1_32_bit_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	procesador_mm_interconnect_0_router router (
		.sink_ready         (nios2_gen2_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	procesador_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	procesador_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                                //       src.ready
		.src_valid          (router_002_src_valid),                                                //          .valid
		.src_data           (router_002_src_data),                                                 //          .data
		.src_channel        (router_002_src_channel),                                              //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                           //          .endofpacket
	);

	procesador_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (nios2_gen2_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_003_src_ready),                                   //       src.ready
		.src_valid          (router_003_src_valid),                                   //          .valid
		.src_data           (router_003_src_data),                                    //          .data
		.src_channel        (router_003_src_channel),                                 //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                              //          .endofpacket
	);

	procesador_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_004_src_ready),                                 //       src.ready
		.src_valid          (router_004_src_valid),                                 //          .valid
		.src_data           (router_004_src_data),                                  //          .data
		.src_channel        (router_004_src_channel),                               //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                            //          .endofpacket
	);

	procesador_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (nios2_gen2_0_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_005_src_ready),                                //       src.ready
		.src_valid          (router_005_src_valid),                                //          .valid
		.src_data           (router_005_src_data),                                 //          .data
		.src_channel        (router_005_src_channel),                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (pll_reconfigurar_mgmt_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pll_reconfigurar_mgmt_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (pll_reconfigurar_mgmt_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pll_reconfigurar_mgmt_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pll_reconfigurar_mgmt_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_006_src_ready),                                      //       src.ready
		.src_valid          (router_006_src_valid),                                      //          .valid
		.src_data           (router_006_src_data),                                       //          .data
		.src_channel        (router_006_src_channel),                                    //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                 //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (fifo0_64_bit_up_out_agent_rp_ready),                   //      sink.ready
		.sink_valid         (fifo0_64_bit_up_out_agent_rp_valid),                   //          .valid
		.sink_data          (fifo0_64_bit_up_out_agent_rp_data),                    //          .data
		.sink_startofpacket (fifo0_64_bit_up_out_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (fifo0_64_bit_up_out_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset              (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                 //       src.ready
		.src_valid          (router_007_src_valid),                                 //          .valid
		.src_data           (router_007_src_data),                                  //          .data
		.src_channel        (router_007_src_channel),                               //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                            //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_008 (
		.sink_ready         (fifo0_64_bit_down_out_agent_rp_ready),                 //      sink.ready
		.sink_valid         (fifo0_64_bit_down_out_agent_rp_valid),                 //          .valid
		.sink_data          (fifo0_64_bit_down_out_agent_rp_data),                  //          .data
		.sink_startofpacket (fifo0_64_bit_down_out_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (fifo0_64_bit_down_out_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset              (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                 //       src.ready
		.src_valid          (router_008_src_valid),                                 //          .valid
		.src_data           (router_008_src_data),                                  //          .data
		.src_channel        (router_008_src_channel),                               //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                            //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_009 (
		.sink_ready         (fifo1_64_bit_up_out_agent_rp_ready),                   //      sink.ready
		.sink_valid         (fifo1_64_bit_up_out_agent_rp_valid),                   //          .valid
		.sink_data          (fifo1_64_bit_up_out_agent_rp_data),                    //          .data
		.sink_startofpacket (fifo1_64_bit_up_out_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (fifo1_64_bit_up_out_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset              (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                 //       src.ready
		.src_valid          (router_009_src_valid),                                 //          .valid
		.src_data           (router_009_src_data),                                  //          .data
		.src_channel        (router_009_src_channel),                               //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                            //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_010 (
		.sink_ready         (fifo1_64_bit_down_out_agent_rp_ready),                 //      sink.ready
		.sink_valid         (fifo1_64_bit_down_out_agent_rp_valid),                 //          .valid
		.sink_data          (fifo1_64_bit_down_out_agent_rp_data),                  //          .data
		.sink_startofpacket (fifo1_64_bit_down_out_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (fifo1_64_bit_down_out_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset              (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                 //       src.ready
		.src_valid          (router_010_src_valid),                                 //          .valid
		.src_data           (router_010_src_data),                                  //          .data
		.src_channel        (router_010_src_channel),                               //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                            //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_011 (
		.sink_ready         (fifo0_32_bit_out_agent_rp_ready),                      //      sink.ready
		.sink_valid         (fifo0_32_bit_out_agent_rp_valid),                      //          .valid
		.sink_data          (fifo0_32_bit_out_agent_rp_data),                       //          .data
		.sink_startofpacket (fifo0_32_bit_out_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (fifo0_32_bit_out_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset              (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                 //       src.ready
		.src_valid          (router_011_src_valid),                                 //          .valid
		.src_data           (router_011_src_data),                                  //          .data
		.src_channel        (router_011_src_channel),                               //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                            //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_012 (
		.sink_ready         (fifo1_32_bit_out_agent_rp_ready),                      //      sink.ready
		.sink_valid         (fifo1_32_bit_out_agent_rp_valid),                      //          .valid
		.sink_data          (fifo1_32_bit_out_agent_rp_data),                       //          .data
		.sink_startofpacket (fifo1_32_bit_out_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (fifo1_32_bit_out_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset              (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                 //       src.ready
		.src_valid          (router_012_src_valid),                                 //          .valid
		.src_data           (router_012_src_data),                                  //          .data
		.src_channel        (router_012_src_channel),                               //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                            //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_013 (
		.sink_ready         (parameters_s0_agent_rp_ready),                  //      sink.ready
		.sink_valid         (parameters_s0_agent_rp_valid),                  //          .valid
		.sink_data          (parameters_s0_agent_rp_data),                   //          .data
		.sink_startofpacket (parameters_s0_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (parameters_s0_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                          //       src.ready
		.src_valid          (router_013_src_valid),                          //          .valid
		.src_data           (router_013_src_data),                           //          .data
		.src_channel        (router_013_src_channel),                        //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_014 (
		.sink_ready         (parameters_1_s0_agent_rp_ready),                //      sink.ready
		.sink_valid         (parameters_1_s0_agent_rp_valid),                //          .valid
		.sink_data          (parameters_1_s0_agent_rp_data),                 //          .data
		.sink_startofpacket (parameters_1_s0_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (parameters_1_s0_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                          //       src.ready
		.src_valid          (router_014_src_valid),                          //          .valid
		.src_data           (router_014_src_data),                           //          .data
		.src_channel        (router_014_src_channel),                        //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_015 (
		.sink_ready         (parameters_2_s0_agent_rp_ready),                //      sink.ready
		.sink_valid         (parameters_2_s0_agent_rp_valid),                //          .valid
		.sink_data          (parameters_2_s0_agent_rp_data),                 //          .data
		.sink_startofpacket (parameters_2_s0_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (parameters_2_s0_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                          //       src.ready
		.src_valid          (router_015_src_valid),                          //          .valid
		.src_data           (router_015_src_data),                           //          .data
		.src_channel        (router_015_src_channel),                        //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_016 (
		.sink_ready         (parameters_3_s0_agent_rp_ready),                //      sink.ready
		.sink_valid         (parameters_3_s0_agent_rp_valid),                //          .valid
		.sink_data          (parameters_3_s0_agent_rp_data),                 //          .data
		.sink_startofpacket (parameters_3_s0_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (parameters_3_s0_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                          //       src.ready
		.src_valid          (router_016_src_valid),                          //          .valid
		.src_data           (router_016_src_data),                           //          .data
		.src_channel        (router_016_src_channel),                        //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_017 router_017 (
		.sink_ready         (program_memory_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (program_memory_s1_agent_rp_valid),              //          .valid
		.sink_data          (program_memory_s1_agent_rp_data),               //          .data
		.sink_startofpacket (program_memory_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (program_memory_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                          //       src.ready
		.src_valid          (router_017_src_valid),                          //          .valid
		.src_data           (router_017_src_data),                           //          .data
		.src_channel        (router_017_src_channel),                        //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_018 (
		.sink_ready         (divisor_clock_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (divisor_clock_s1_agent_rp_valid),               //          .valid
		.sink_data          (divisor_clock_s1_agent_rp_data),                //          .data
		.sink_startofpacket (divisor_clock_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (divisor_clock_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                          //       src.ready
		.src_valid          (router_018_src_valid),                          //          .valid
		.src_data           (router_018_src_data),                           //          .data
		.src_channel        (router_018_src_channel),                        //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_019 (
		.sink_ready         (reset_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (reset_s1_agent_rp_valid),                 //          .valid
		.sink_data          (reset_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (reset_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (reset_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clock_bridge_0_out_clk_clk),              //       clk.clk
		.reset              (reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                    //       src.ready
		.src_valid          (router_019_src_valid),                    //          .valid
		.src_data           (router_019_src_data),                     //          .data
		.src_channel        (router_019_src_channel),                  //          .channel
		.src_startofpacket  (router_019_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)               //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_020 (
		.sink_ready         (enable_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (enable_s1_agent_rp_valid),                      //          .valid
		.sink_data          (enable_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (enable_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (enable_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                          //       src.ready
		.src_valid          (router_020_src_valid),                          //          .valid
		.src_data           (router_020_src_data),                           //          .data
		.src_channel        (router_020_src_channel),                        //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_021 (
		.sink_ready         (finalizacion_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (finalizacion_s1_agent_rp_valid),                //          .valid
		.sink_data          (finalizacion_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (finalizacion_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (finalizacion_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                          //       src.ready
		.src_valid          (router_021_src_valid),                          //          .valid
		.src_data           (router_021_src_data),                           //          .data
		.src_channel        (router_021_src_channel),                        //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_022 (
		.sink_ready         (result0_64_bit_up_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (result0_64_bit_up_s1_agent_rp_valid),           //          .valid
		.sink_data          (result0_64_bit_up_s1_agent_rp_data),            //          .data
		.sink_startofpacket (result0_64_bit_up_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (result0_64_bit_up_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                          //       src.ready
		.src_valid          (router_022_src_valid),                          //          .valid
		.src_data           (router_022_src_data),                           //          .data
		.src_channel        (router_022_src_channel),                        //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_023 (
		.sink_ready         (result0_64_bit_down_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (result0_64_bit_down_s1_agent_rp_valid),         //          .valid
		.sink_data          (result0_64_bit_down_s1_agent_rp_data),          //          .data
		.sink_startofpacket (result0_64_bit_down_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (result0_64_bit_down_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                          //       src.ready
		.src_valid          (router_023_src_valid),                          //          .valid
		.src_data           (router_023_src_data),                           //          .data
		.src_channel        (router_023_src_channel),                        //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_024 (
		.sink_ready         (result1_64_bit_up_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (result1_64_bit_up_s1_agent_rp_valid),           //          .valid
		.sink_data          (result1_64_bit_up_s1_agent_rp_data),            //          .data
		.sink_startofpacket (result1_64_bit_up_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (result1_64_bit_up_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                          //       src.ready
		.src_valid          (router_024_src_valid),                          //          .valid
		.src_data           (router_024_src_data),                           //          .data
		.src_channel        (router_024_src_channel),                        //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_025 (
		.sink_ready         (result1_64_bit_down_s1_agent_rp_ready),         //      sink.ready
		.sink_valid         (result1_64_bit_down_s1_agent_rp_valid),         //          .valid
		.sink_data          (result1_64_bit_down_s1_agent_rp_data),          //          .data
		.sink_startofpacket (result1_64_bit_down_s1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (result1_64_bit_down_s1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                          //       src.ready
		.src_valid          (router_025_src_valid),                          //          .valid
		.src_data           (router_025_src_data),                           //          .data
		.src_channel        (router_025_src_channel),                        //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_026 (
		.sink_ready         (result0_32_bit_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (result0_32_bit_s1_agent_rp_valid),              //          .valid
		.sink_data          (result0_32_bit_s1_agent_rp_data),               //          .data
		.sink_startofpacket (result0_32_bit_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (result0_32_bit_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                          //       src.ready
		.src_valid          (router_026_src_valid),                          //          .valid
		.src_data           (router_026_src_data),                           //          .data
		.src_channel        (router_026_src_channel),                        //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_router_006 router_027 (
		.sink_ready         (result1_32_bit_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (result1_32_bit_s1_agent_rp_valid),              //          .valid
		.sink_data          (result1_32_bit_s1_agent_rp_data),               //          .data
		.sink_startofpacket (result1_32_bit_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (result1_32_bit_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                          //       src.ready
		.src_valid          (router_027_src_valid),                          //          .valid
		.src_data           (router_027_src_data),                           //          .data
		.src_channel        (router_027_src_channel),                        //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                     //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.VALID_WIDTH               (24),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (91),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.VALID_WIDTH               (24),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                                //          .valid
		.cmd_sink_data          (router_002_src_data),                                                 //          .data
		.cmd_sink_channel       (router_002_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pll_reconfigurar_mgmt_avalon_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                          //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),                          // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                                  //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                                   //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                                //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                            //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                                  //          .ready
		.source0_valid         (pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pll_reconfigurar_mgmt_avalon_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo0_64_bit_up_out_burst_adapter (
		.clk                   (clock_bridge_0_out_clk_clk),                              //       cr0.clk
		.reset                 (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                   //          .ready
		.source0_valid         (fifo0_64_bit_up_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo0_64_bit_up_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo0_64_bit_up_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo0_64_bit_up_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo0_64_bit_up_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo0_64_bit_up_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo0_64_bit_down_out_burst_adapter (
		.clk                   (clock_bridge_0_out_clk_clk),                                //       cr0.clk
		.reset                 (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                     //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                      //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                   //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                               //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                     //          .ready
		.source0_valid         (fifo0_64_bit_down_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo0_64_bit_down_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo0_64_bit_down_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo0_64_bit_down_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo0_64_bit_down_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo0_64_bit_down_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo1_64_bit_up_out_burst_adapter (
		.clk                   (clock_bridge_0_out_clk_clk),                              //       cr0.clk
		.reset                 (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                   //          .ready
		.source0_valid         (fifo1_64_bit_up_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo1_64_bit_up_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo1_64_bit_up_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo1_64_bit_up_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo1_64_bit_up_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo1_64_bit_up_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo1_64_bit_down_out_burst_adapter (
		.clk                   (clock_bridge_0_out_clk_clk),                                //       cr0.clk
		.reset                 (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                     //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                      //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                   //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                               //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                     //          .ready
		.source0_valid         (fifo1_64_bit_down_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo1_64_bit_down_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo1_64_bit_down_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo1_64_bit_down_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo1_64_bit_down_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo1_64_bit_down_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo0_32_bit_out_burst_adapter (
		.clk                   (clock_bridge_0_out_clk_clk),                           //       cr0.clk
		.reset                 (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                //          .ready
		.source0_valid         (fifo0_32_bit_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo0_32_bit_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo0_32_bit_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo0_32_bit_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo0_32_bit_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo0_32_bit_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo1_32_bit_out_burst_adapter (
		.clk                   (clock_bridge_0_out_clk_clk),                           //       cr0.clk
		.reset                 (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                //          .ready
		.source0_valid         (fifo1_32_bit_out_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo1_32_bit_out_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo1_32_bit_out_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo1_32_bit_out_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo1_32_bit_out_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo1_32_bit_out_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) parameters_s0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                              //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                             //          .ready
		.source0_valid         (parameters_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (parameters_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (parameters_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (parameters_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (parameters_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (parameters_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) parameters_1_s0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                               //          .ready
		.source0_valid         (parameters_1_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (parameters_1_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (parameters_1_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (parameters_1_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (parameters_1_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (parameters_1_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) parameters_2_s0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                               //          .ready
		.source0_valid         (parameters_2_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (parameters_2_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (parameters_2_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (parameters_2_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (parameters_2_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (parameters_2_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) parameters_3_s0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                               //          .ready
		.source0_valid         (parameters_3_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (parameters_3_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (parameters_3_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (parameters_3_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (parameters_3_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (parameters_3_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) program_memory_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                         //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                                 //          .ready
		.source0_valid         (program_memory_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (program_memory_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (program_memory_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (program_memory_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (program_memory_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (program_memory_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) divisor_clock_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                        //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_014_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                                //          .ready
		.source0_valid         (divisor_clock_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (divisor_clock_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (divisor_clock_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (divisor_clock_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (divisor_clock_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (divisor_clock_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) reset_s1_burst_adapter (
		.clk                   (clock_bridge_0_out_clk_clk),                   //       cr0.clk
		.reset                 (reset_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                         //          .data
		.sink0_channel         (cmd_mux_015_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                        //          .ready
		.source0_valid         (reset_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (reset_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (reset_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (reset_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (reset_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (reset_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) enable_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                 //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                          //          .data
		.sink0_channel         (cmd_mux_016_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                         //          .ready
		.source0_valid         (enable_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (enable_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (enable_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (enable_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (enable_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (enable_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) finalizacion_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                       //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_017_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_017_src_data),                                //          .data
		.sink0_channel         (cmd_mux_017_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_017_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_017_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_017_src_ready),                               //          .ready
		.source0_valid         (finalizacion_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (finalizacion_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (finalizacion_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (finalizacion_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (finalizacion_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (finalizacion_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) result0_64_bit_up_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                            //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_018_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_018_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_018_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_018_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_018_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_018_src_ready),                                    //          .ready
		.source0_valid         (result0_64_bit_up_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (result0_64_bit_up_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (result0_64_bit_up_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (result0_64_bit_up_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (result0_64_bit_up_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (result0_64_bit_up_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) result0_64_bit_down_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (cmd_mux_019_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_019_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_019_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_019_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_019_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_019_src_ready),                                      //          .ready
		.source0_valid         (result0_64_bit_down_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (result0_64_bit_down_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (result0_64_bit_down_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (result0_64_bit_down_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (result0_64_bit_down_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (result0_64_bit_down_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) result1_64_bit_up_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                            //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_020_src_valid),                                    //     sink0.valid
		.sink0_data            (cmd_mux_020_src_data),                                     //          .data
		.sink0_channel         (cmd_mux_020_src_channel),                                  //          .channel
		.sink0_startofpacket   (cmd_mux_020_src_startofpacket),                            //          .startofpacket
		.sink0_endofpacket     (cmd_mux_020_src_endofpacket),                              //          .endofpacket
		.sink0_ready           (cmd_mux_020_src_ready),                                    //          .ready
		.source0_valid         (result1_64_bit_up_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (result1_64_bit_up_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (result1_64_bit_up_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (result1_64_bit_up_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (result1_64_bit_up_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (result1_64_bit_up_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) result1_64_bit_down_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                              //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (cmd_mux_021_src_valid),                                      //     sink0.valid
		.sink0_data            (cmd_mux_021_src_data),                                       //          .data
		.sink0_channel         (cmd_mux_021_src_channel),                                    //          .channel
		.sink0_startofpacket   (cmd_mux_021_src_startofpacket),                              //          .startofpacket
		.sink0_endofpacket     (cmd_mux_021_src_endofpacket),                                //          .endofpacket
		.sink0_ready           (cmd_mux_021_src_ready),                                      //          .ready
		.source0_valid         (result1_64_bit_down_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (result1_64_bit_down_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (result1_64_bit_down_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (result1_64_bit_down_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (result1_64_bit_down_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (result1_64_bit_down_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) result0_32_bit_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                         //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_022_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_022_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_022_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_022_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_022_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_022_src_ready),                                 //          .ready
		.source0_valid         (result0_32_bit_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (result0_32_bit_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (result0_32_bit_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (result0_32_bit_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (result0_32_bit_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (result0_32_bit_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (120),
		.ST_CHANNEL_W              (24),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) result1_32_bit_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                         //       cr0.clk
		.reset                 (jtag_uart_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_023_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_023_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_023_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_023_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_023_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_023_src_ready),                                 //          .ready
		.source0_valid         (result1_32_bit_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (result1_32_bit_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (result1_32_bit_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (result1_32_bit_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (result1_32_bit_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (result1_32_bit_s1_burst_adapter_source0_ready)          //          .ready
	);

	procesador_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                               //      sink.ready
		.sink_channel        (router_src_channel),                             //          .channel
		.sink_data           (router_src_data),                                //          .data
		.sink_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                         //          .endofpacket
		.sink_valid          (router_src_valid),                               //          .valid
		.src0_ready          (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                           //          .valid
		.src0_data           (cmd_demux_src0_data),                            //          .data
		.src0_channel        (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                           //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                           //          .valid
		.src1_data           (cmd_demux_src1_data),                            //          .data
		.src1_channel        (cmd_demux_src1_channel),                         //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                           //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                           //          .valid
		.src2_data           (cmd_demux_src2_data),                            //          .data
		.src2_channel        (cmd_demux_src2_channel),                         //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                           //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                           //          .valid
		.src3_data           (cmd_demux_src3_data),                            //          .data
		.src3_channel        (cmd_demux_src3_channel),                         //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                           //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                           //          .valid
		.src4_data           (cmd_demux_src4_data),                            //          .data
		.src4_channel        (cmd_demux_src4_channel),                         //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                           //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                           //          .valid
		.src5_data           (cmd_demux_src5_data),                            //          .data
		.src5_channel        (cmd_demux_src5_channel),                         //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                           //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                           //          .valid
		.src6_data           (cmd_demux_src6_data),                            //          .data
		.src6_channel        (cmd_demux_src6_channel),                         //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                     //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                           //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                           //          .valid
		.src7_data           (cmd_demux_src7_data),                            //          .data
		.src7_channel        (cmd_demux_src7_channel),                         //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                     //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                           //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                           //          .valid
		.src8_data           (cmd_demux_src8_data),                            //          .data
		.src8_channel        (cmd_demux_src8_channel),                         //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                     //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                           //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                           //          .valid
		.src9_data           (cmd_demux_src9_data),                            //          .data
		.src9_channel        (cmd_demux_src9_channel),                         //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                     //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                          //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                          //          .valid
		.src10_data          (cmd_demux_src10_data),                           //          .data
		.src10_channel       (cmd_demux_src10_channel),                        //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                  //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                    //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                          //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                          //          .valid
		.src11_data          (cmd_demux_src11_data),                           //          .data
		.src11_channel       (cmd_demux_src11_channel),                        //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                  //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                    //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                          //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                          //          .valid
		.src12_data          (cmd_demux_src12_data),                           //          .data
		.src12_channel       (cmd_demux_src12_channel),                        //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                  //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                    //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                          //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                          //          .valid
		.src13_data          (cmd_demux_src13_data),                           //          .data
		.src13_channel       (cmd_demux_src13_channel),                        //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                  //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                    //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                          //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                          //          .valid
		.src14_data          (cmd_demux_src14_data),                           //          .data
		.src14_channel       (cmd_demux_src14_channel),                        //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                  //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                    //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                          //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                          //          .valid
		.src15_data          (cmd_demux_src15_data),                           //          .data
		.src15_channel       (cmd_demux_src15_channel),                        //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                  //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                    //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                          //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                          //          .valid
		.src16_data          (cmd_demux_src16_data),                           //          .data
		.src16_channel       (cmd_demux_src16_channel),                        //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                  //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                    //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                          //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                          //          .valid
		.src17_data          (cmd_demux_src17_data),                           //          .data
		.src17_channel       (cmd_demux_src17_channel),                        //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                  //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                    //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                          //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                          //          .valid
		.src18_data          (cmd_demux_src18_data),                           //          .data
		.src18_channel       (cmd_demux_src18_channel),                        //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                  //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                    //          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                          //     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                          //          .valid
		.src19_data          (cmd_demux_src19_data),                           //          .data
		.src19_channel       (cmd_demux_src19_channel),                        //          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                  //          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                    //          .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                          //     src20.ready
		.src20_valid         (cmd_demux_src20_valid),                          //          .valid
		.src20_data          (cmd_demux_src20_data),                           //          .data
		.src20_channel       (cmd_demux_src20_channel),                        //          .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                  //          .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                    //          .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                          //     src21.ready
		.src21_valid         (cmd_demux_src21_valid),                          //          .valid
		.src21_data          (cmd_demux_src21_data),                           //          .data
		.src21_channel       (cmd_demux_src21_channel),                        //          .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                  //          .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),                    //          .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                          //     src22.ready
		.src22_valid         (cmd_demux_src22_valid),                          //          .valid
		.src22_data          (cmd_demux_src22_data),                           //          .data
		.src22_channel       (cmd_demux_src22_channel),                        //          .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),                  //          .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),                    //          .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                          //     src23.ready
		.src23_valid         (cmd_demux_src23_valid),                          //          .valid
		.src23_data          (cmd_demux_src23_data),                           //          .data
		.src23_channel       (cmd_demux_src23_channel),                        //          .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),                  //          .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (clk_0_clk_clk),                                                       //        clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                            //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                             //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                            //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                             //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                            //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                             //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                            //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                             //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                      //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                            //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                            //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                             //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                          //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                      //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                            //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                            //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                             //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                          //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                      //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                            //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                            //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                             //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                          //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                      //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                            //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                            //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                             //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                          //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                    //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                      //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                            //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                            //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                             //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                          //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                    //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                      //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                            //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                            //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                             //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                          //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                    //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                      //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                           //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                           //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                            //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                         //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                   //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                                     //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                           //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                           //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                            //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                         //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                                   //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                                     //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                           //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                           //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                            //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                                         //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                                   //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                                     //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                                           //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                                           //           .valid
		.src13_data          (cmd_demux_001_src13_data),                                            //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                                         //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                                   //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                                     //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                                           //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                                           //           .valid
		.src14_data          (cmd_demux_001_src14_data),                                            //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                                         //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),                                   //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),                                     //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                                           //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                                           //           .valid
		.src15_data          (cmd_demux_001_src15_data),                                            //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                                         //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),                                   //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),                                     //           .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                                           //      src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                                           //           .valid
		.src16_data          (cmd_demux_001_src16_data),                                            //           .data
		.src16_channel       (cmd_demux_001_src16_channel),                                         //           .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),                                   //           .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),                                     //           .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                                           //      src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                                           //           .valid
		.src17_data          (cmd_demux_001_src17_data),                                            //           .data
		.src17_channel       (cmd_demux_001_src17_channel),                                         //           .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),                                   //           .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),                                     //           .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                                           //      src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                                           //           .valid
		.src18_data          (cmd_demux_001_src18_data),                                            //           .data
		.src18_channel       (cmd_demux_001_src18_channel),                                         //           .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),                                   //           .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),                                     //           .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                                           //      src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                                           //           .valid
		.src19_data          (cmd_demux_001_src19_data),                                            //           .data
		.src19_channel       (cmd_demux_001_src19_channel),                                         //           .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),                                   //           .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),                                     //           .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                                           //      src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                                           //           .valid
		.src20_data          (cmd_demux_001_src20_data),                                            //           .data
		.src20_channel       (cmd_demux_001_src20_channel),                                         //           .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),                                   //           .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket),                                     //           .endofpacket
		.src21_ready         (cmd_demux_001_src21_ready),                                           //      src21.ready
		.src21_valid         (cmd_demux_001_src21_valid),                                           //           .valid
		.src21_data          (cmd_demux_001_src21_data),                                            //           .data
		.src21_channel       (cmd_demux_001_src21_channel),                                         //           .channel
		.src21_startofpacket (cmd_demux_001_src21_startofpacket),                                   //           .startofpacket
		.src21_endofpacket   (cmd_demux_001_src21_endofpacket)                                      //           .endofpacket
	);

	procesador_mm_interconnect_0_cmd_demux_001 cmd_demux_002 (
		.clk                 (clk_0_clk_clk),                                                       //        clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_002_src0_ready),                                            //       src0.ready
		.src0_valid          (cmd_demux_002_src0_valid),                                            //           .valid
		.src0_data           (cmd_demux_002_src0_data),                                             //           .data
		.src0_channel        (cmd_demux_002_src0_channel),                                          //           .channel
		.src0_startofpacket  (cmd_demux_002_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket    (cmd_demux_002_src0_endofpacket),                                      //           .endofpacket
		.src1_ready          (cmd_demux_002_src1_ready),                                            //       src1.ready
		.src1_valid          (cmd_demux_002_src1_valid),                                            //           .valid
		.src1_data           (cmd_demux_002_src1_data),                                             //           .data
		.src1_channel        (cmd_demux_002_src1_channel),                                          //           .channel
		.src1_startofpacket  (cmd_demux_002_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket    (cmd_demux_002_src1_endofpacket),                                      //           .endofpacket
		.src2_ready          (cmd_demux_002_src2_ready),                                            //       src2.ready
		.src2_valid          (cmd_demux_002_src2_valid),                                            //           .valid
		.src2_data           (cmd_demux_002_src2_data),                                             //           .data
		.src2_channel        (cmd_demux_002_src2_channel),                                          //           .channel
		.src2_startofpacket  (cmd_demux_002_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket    (cmd_demux_002_src2_endofpacket),                                      //           .endofpacket
		.src3_ready          (cmd_demux_002_src3_ready),                                            //       src3.ready
		.src3_valid          (cmd_demux_002_src3_valid),                                            //           .valid
		.src3_data           (cmd_demux_002_src3_data),                                             //           .data
		.src3_channel        (cmd_demux_002_src3_channel),                                          //           .channel
		.src3_startofpacket  (cmd_demux_002_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket    (cmd_demux_002_src3_endofpacket),                                      //           .endofpacket
		.src4_ready          (cmd_demux_002_src4_ready),                                            //       src4.ready
		.src4_valid          (cmd_demux_002_src4_valid),                                            //           .valid
		.src4_data           (cmd_demux_002_src4_data),                                             //           .data
		.src4_channel        (cmd_demux_002_src4_channel),                                          //           .channel
		.src4_startofpacket  (cmd_demux_002_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket    (cmd_demux_002_src4_endofpacket),                                      //           .endofpacket
		.src5_ready          (cmd_demux_002_src5_ready),                                            //       src5.ready
		.src5_valid          (cmd_demux_002_src5_valid),                                            //           .valid
		.src5_data           (cmd_demux_002_src5_data),                                             //           .data
		.src5_channel        (cmd_demux_002_src5_channel),                                          //           .channel
		.src5_startofpacket  (cmd_demux_002_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket    (cmd_demux_002_src5_endofpacket),                                      //           .endofpacket
		.src6_ready          (cmd_demux_002_src6_ready),                                            //       src6.ready
		.src6_valid          (cmd_demux_002_src6_valid),                                            //           .valid
		.src6_data           (cmd_demux_002_src6_data),                                             //           .data
		.src6_channel        (cmd_demux_002_src6_channel),                                          //           .channel
		.src6_startofpacket  (cmd_demux_002_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket    (cmd_demux_002_src6_endofpacket),                                      //           .endofpacket
		.src7_ready          (cmd_demux_002_src7_ready),                                            //       src7.ready
		.src7_valid          (cmd_demux_002_src7_valid),                                            //           .valid
		.src7_data           (cmd_demux_002_src7_data),                                             //           .data
		.src7_channel        (cmd_demux_002_src7_channel),                                          //           .channel
		.src7_startofpacket  (cmd_demux_002_src7_startofpacket),                                    //           .startofpacket
		.src7_endofpacket    (cmd_demux_002_src7_endofpacket),                                      //           .endofpacket
		.src8_ready          (cmd_demux_002_src8_ready),                                            //       src8.ready
		.src8_valid          (cmd_demux_002_src8_valid),                                            //           .valid
		.src8_data           (cmd_demux_002_src8_data),                                             //           .data
		.src8_channel        (cmd_demux_002_src8_channel),                                          //           .channel
		.src8_startofpacket  (cmd_demux_002_src8_startofpacket),                                    //           .startofpacket
		.src8_endofpacket    (cmd_demux_002_src8_endofpacket),                                      //           .endofpacket
		.src9_ready          (cmd_demux_002_src9_ready),                                            //       src9.ready
		.src9_valid          (cmd_demux_002_src9_valid),                                            //           .valid
		.src9_data           (cmd_demux_002_src9_data),                                             //           .data
		.src9_channel        (cmd_demux_002_src9_channel),                                          //           .channel
		.src9_startofpacket  (cmd_demux_002_src9_startofpacket),                                    //           .startofpacket
		.src9_endofpacket    (cmd_demux_002_src9_endofpacket),                                      //           .endofpacket
		.src10_ready         (cmd_demux_002_src10_ready),                                           //      src10.ready
		.src10_valid         (cmd_demux_002_src10_valid),                                           //           .valid
		.src10_data          (cmd_demux_002_src10_data),                                            //           .data
		.src10_channel       (cmd_demux_002_src10_channel),                                         //           .channel
		.src10_startofpacket (cmd_demux_002_src10_startofpacket),                                   //           .startofpacket
		.src10_endofpacket   (cmd_demux_002_src10_endofpacket),                                     //           .endofpacket
		.src11_ready         (cmd_demux_002_src11_ready),                                           //      src11.ready
		.src11_valid         (cmd_demux_002_src11_valid),                                           //           .valid
		.src11_data          (cmd_demux_002_src11_data),                                            //           .data
		.src11_channel       (cmd_demux_002_src11_channel),                                         //           .channel
		.src11_startofpacket (cmd_demux_002_src11_startofpacket),                                   //           .startofpacket
		.src11_endofpacket   (cmd_demux_002_src11_endofpacket),                                     //           .endofpacket
		.src12_ready         (cmd_demux_002_src12_ready),                                           //      src12.ready
		.src12_valid         (cmd_demux_002_src12_valid),                                           //           .valid
		.src12_data          (cmd_demux_002_src12_data),                                            //           .data
		.src12_channel       (cmd_demux_002_src12_channel),                                         //           .channel
		.src12_startofpacket (cmd_demux_002_src12_startofpacket),                                   //           .startofpacket
		.src12_endofpacket   (cmd_demux_002_src12_endofpacket),                                     //           .endofpacket
		.src13_ready         (cmd_demux_002_src13_ready),                                           //      src13.ready
		.src13_valid         (cmd_demux_002_src13_valid),                                           //           .valid
		.src13_data          (cmd_demux_002_src13_data),                                            //           .data
		.src13_channel       (cmd_demux_002_src13_channel),                                         //           .channel
		.src13_startofpacket (cmd_demux_002_src13_startofpacket),                                   //           .startofpacket
		.src13_endofpacket   (cmd_demux_002_src13_endofpacket),                                     //           .endofpacket
		.src14_ready         (cmd_demux_002_src14_ready),                                           //      src14.ready
		.src14_valid         (cmd_demux_002_src14_valid),                                           //           .valid
		.src14_data          (cmd_demux_002_src14_data),                                            //           .data
		.src14_channel       (cmd_demux_002_src14_channel),                                         //           .channel
		.src14_startofpacket (cmd_demux_002_src14_startofpacket),                                   //           .startofpacket
		.src14_endofpacket   (cmd_demux_002_src14_endofpacket),                                     //           .endofpacket
		.src15_ready         (cmd_demux_002_src15_ready),                                           //      src15.ready
		.src15_valid         (cmd_demux_002_src15_valid),                                           //           .valid
		.src15_data          (cmd_demux_002_src15_data),                                            //           .data
		.src15_channel       (cmd_demux_002_src15_channel),                                         //           .channel
		.src15_startofpacket (cmd_demux_002_src15_startofpacket),                                   //           .startofpacket
		.src15_endofpacket   (cmd_demux_002_src15_endofpacket),                                     //           .endofpacket
		.src16_ready         (cmd_demux_002_src16_ready),                                           //      src16.ready
		.src16_valid         (cmd_demux_002_src16_valid),                                           //           .valid
		.src16_data          (cmd_demux_002_src16_data),                                            //           .data
		.src16_channel       (cmd_demux_002_src16_channel),                                         //           .channel
		.src16_startofpacket (cmd_demux_002_src16_startofpacket),                                   //           .startofpacket
		.src16_endofpacket   (cmd_demux_002_src16_endofpacket),                                     //           .endofpacket
		.src17_ready         (cmd_demux_002_src17_ready),                                           //      src17.ready
		.src17_valid         (cmd_demux_002_src17_valid),                                           //           .valid
		.src17_data          (cmd_demux_002_src17_data),                                            //           .data
		.src17_channel       (cmd_demux_002_src17_channel),                                         //           .channel
		.src17_startofpacket (cmd_demux_002_src17_startofpacket),                                   //           .startofpacket
		.src17_endofpacket   (cmd_demux_002_src17_endofpacket),                                     //           .endofpacket
		.src18_ready         (cmd_demux_002_src18_ready),                                           //      src18.ready
		.src18_valid         (cmd_demux_002_src18_valid),                                           //           .valid
		.src18_data          (cmd_demux_002_src18_data),                                            //           .data
		.src18_channel       (cmd_demux_002_src18_channel),                                         //           .channel
		.src18_startofpacket (cmd_demux_002_src18_startofpacket),                                   //           .startofpacket
		.src18_endofpacket   (cmd_demux_002_src18_endofpacket),                                     //           .endofpacket
		.src19_ready         (cmd_demux_002_src19_ready),                                           //      src19.ready
		.src19_valid         (cmd_demux_002_src19_valid),                                           //           .valid
		.src19_data          (cmd_demux_002_src19_data),                                            //           .data
		.src19_channel       (cmd_demux_002_src19_channel),                                         //           .channel
		.src19_startofpacket (cmd_demux_002_src19_startofpacket),                                   //           .startofpacket
		.src19_endofpacket   (cmd_demux_002_src19_endofpacket),                                     //           .endofpacket
		.src20_ready         (cmd_demux_002_src20_ready),                                           //      src20.ready
		.src20_valid         (cmd_demux_002_src20_valid),                                           //           .valid
		.src20_data          (cmd_demux_002_src20_data),                                            //           .data
		.src20_channel       (cmd_demux_002_src20_channel),                                         //           .channel
		.src20_startofpacket (cmd_demux_002_src20_startofpacket),                                   //           .startofpacket
		.src20_endofpacket   (cmd_demux_002_src20_endofpacket),                                     //           .endofpacket
		.src21_ready         (cmd_demux_002_src21_ready),                                           //      src21.ready
		.src21_valid         (cmd_demux_002_src21_valid),                                           //           .valid
		.src21_data          (cmd_demux_002_src21_data),                                            //           .data
		.src21_channel       (cmd_demux_002_src21_channel),                                         //           .channel
		.src21_startofpacket (cmd_demux_002_src21_startofpacket),                                   //           .startofpacket
		.src21_endofpacket   (cmd_demux_002_src21_endofpacket)                                      //           .endofpacket
	);

	procesador_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                           //      sink.ready
		.sink_channel       (router_003_src_channel),                         //          .channel
		.sink_data          (router_003_src_data),                            //          .data
		.sink_startofpacket (router_003_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_003_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_003_src0_data),                        //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                       //      src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                       //          .valid
		.src1_data          (cmd_demux_003_src1_data),                        //          .data
		.src1_channel       (cmd_demux_003_src1_channel),                     //          .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                  //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //          .valid
		.src_data            (cmd_mux_001_src_data),                           //          .data
		.src_channel         (cmd_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //          .channel
		.sink0_data          (cmd_demux_src1_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket)                  //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //          .valid
		.src_data            (cmd_mux_002_src_data),                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                        //          .channel
		.sink0_data          (cmd_demux_src2_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                      //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                      //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                    //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                       //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_003 (
		.clk                 (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset               (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                //          .valid
		.src_data            (cmd_mux_003_src_data),                                 //          .data
		.src_channel         (cmd_mux_003_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                    //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                    //          .valid
		.sink0_channel       (crosser_out_channel),                                  //          .channel
		.sink0_data          (crosser_out_data),                                     //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                              //          .endofpacket
		.sink1_ready         (crosser_007_out_ready),                                //     sink1.ready
		.sink1_valid         (crosser_007_out_valid),                                //          .valid
		.sink1_channel       (crosser_007_out_channel),                              //          .channel
		.sink1_data          (crosser_007_out_data),                                 //          .data
		.sink1_startofpacket (crosser_007_out_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (crosser_007_out_endofpacket),                          //          .endofpacket
		.sink2_ready         (crosser_014_out_ready),                                //     sink2.ready
		.sink2_valid         (crosser_014_out_valid),                                //          .valid
		.sink2_channel       (crosser_014_out_channel),                              //          .channel
		.sink2_data          (crosser_014_out_data),                                 //          .data
		.sink2_startofpacket (crosser_014_out_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (crosser_014_out_endofpacket)                           //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_004 (
		.clk                 (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset               (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                //          .valid
		.src_data            (cmd_mux_004_src_data),                                 //          .data
		.src_channel         (cmd_mux_004_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                //          .valid
		.sink0_channel       (crosser_001_out_channel),                              //          .channel
		.sink0_data          (crosser_001_out_data),                                 //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                          //          .endofpacket
		.sink1_ready         (crosser_008_out_ready),                                //     sink1.ready
		.sink1_valid         (crosser_008_out_valid),                                //          .valid
		.sink1_channel       (crosser_008_out_channel),                              //          .channel
		.sink1_data          (crosser_008_out_data),                                 //          .data
		.sink1_startofpacket (crosser_008_out_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (crosser_008_out_endofpacket),                          //          .endofpacket
		.sink2_ready         (crosser_015_out_ready),                                //     sink2.ready
		.sink2_valid         (crosser_015_out_valid),                                //          .valid
		.sink2_channel       (crosser_015_out_channel),                              //          .channel
		.sink2_data          (crosser_015_out_data),                                 //          .data
		.sink2_startofpacket (crosser_015_out_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (crosser_015_out_endofpacket)                           //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_005 (
		.clk                 (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset               (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                //          .valid
		.src_data            (cmd_mux_005_src_data),                                 //          .data
		.src_channel         (cmd_mux_005_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                //          .valid
		.sink0_channel       (crosser_002_out_channel),                              //          .channel
		.sink0_data          (crosser_002_out_data),                                 //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),                          //          .endofpacket
		.sink1_ready         (crosser_009_out_ready),                                //     sink1.ready
		.sink1_valid         (crosser_009_out_valid),                                //          .valid
		.sink1_channel       (crosser_009_out_channel),                              //          .channel
		.sink1_data          (crosser_009_out_data),                                 //          .data
		.sink1_startofpacket (crosser_009_out_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (crosser_009_out_endofpacket),                          //          .endofpacket
		.sink2_ready         (crosser_016_out_ready),                                //     sink2.ready
		.sink2_valid         (crosser_016_out_valid),                                //          .valid
		.sink2_channel       (crosser_016_out_channel),                              //          .channel
		.sink2_data          (crosser_016_out_data),                                 //          .data
		.sink2_startofpacket (crosser_016_out_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (crosser_016_out_endofpacket)                           //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_006 (
		.clk                 (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset               (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                //          .valid
		.src_data            (cmd_mux_006_src_data),                                 //          .data
		.src_channel         (cmd_mux_006_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                //          .valid
		.sink0_channel       (crosser_003_out_channel),                              //          .channel
		.sink0_data          (crosser_003_out_data),                                 //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket),                          //          .endofpacket
		.sink1_ready         (crosser_010_out_ready),                                //     sink1.ready
		.sink1_valid         (crosser_010_out_valid),                                //          .valid
		.sink1_channel       (crosser_010_out_channel),                              //          .channel
		.sink1_data          (crosser_010_out_data),                                 //          .data
		.sink1_startofpacket (crosser_010_out_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (crosser_010_out_endofpacket),                          //          .endofpacket
		.sink2_ready         (crosser_017_out_ready),                                //     sink2.ready
		.sink2_valid         (crosser_017_out_valid),                                //          .valid
		.sink2_channel       (crosser_017_out_channel),                              //          .channel
		.sink2_data          (crosser_017_out_data),                                 //          .data
		.sink2_startofpacket (crosser_017_out_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (crosser_017_out_endofpacket)                           //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_007 (
		.clk                 (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset               (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                //          .valid
		.src_data            (cmd_mux_007_src_data),                                 //          .data
		.src_channel         (cmd_mux_007_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                                //          .valid
		.sink0_channel       (crosser_004_out_channel),                              //          .channel
		.sink0_data          (crosser_004_out_data),                                 //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket),                          //          .endofpacket
		.sink1_ready         (crosser_011_out_ready),                                //     sink1.ready
		.sink1_valid         (crosser_011_out_valid),                                //          .valid
		.sink1_channel       (crosser_011_out_channel),                              //          .channel
		.sink1_data          (crosser_011_out_data),                                 //          .data
		.sink1_startofpacket (crosser_011_out_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (crosser_011_out_endofpacket),                          //          .endofpacket
		.sink2_ready         (crosser_018_out_ready),                                //     sink2.ready
		.sink2_valid         (crosser_018_out_valid),                                //          .valid
		.sink2_channel       (crosser_018_out_channel),                              //          .channel
		.sink2_data          (crosser_018_out_data),                                 //          .data
		.sink2_startofpacket (crosser_018_out_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (crosser_018_out_endofpacket)                           //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_008 (
		.clk                 (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset               (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                //          .valid
		.src_data            (cmd_mux_008_src_data),                                 //          .data
		.src_channel         (cmd_mux_008_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                                //          .valid
		.sink0_channel       (crosser_005_out_channel),                              //          .channel
		.sink0_data          (crosser_005_out_data),                                 //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket),                          //          .endofpacket
		.sink1_ready         (crosser_012_out_ready),                                //     sink1.ready
		.sink1_valid         (crosser_012_out_valid),                                //          .valid
		.sink1_channel       (crosser_012_out_channel),                              //          .channel
		.sink1_data          (crosser_012_out_data),                                 //          .data
		.sink1_startofpacket (crosser_012_out_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (crosser_012_out_endofpacket),                          //          .endofpacket
		.sink2_ready         (crosser_019_out_ready),                                //     sink2.ready
		.sink2_valid         (crosser_019_out_valid),                                //          .valid
		.sink2_channel       (crosser_019_out_channel),                              //          .channel
		.sink2_data          (crosser_019_out_data),                                 //          .data
		.sink2_startofpacket (crosser_019_out_startofpacket),                        //          .startofpacket
		.sink2_endofpacket   (crosser_019_out_endofpacket)                           //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                         //          .valid
		.src_data            (cmd_mux_009_src_data),                          //          .data
		.src_channel         (cmd_mux_009_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                        //          .channel
		.sink0_data          (cmd_demux_src9_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_demux_002_src7_ready),                      //     sink2.ready
		.sink2_valid         (cmd_demux_002_src7_valid),                      //          .valid
		.sink2_channel       (cmd_demux_002_src7_channel),                    //          .channel
		.sink2_data          (cmd_demux_002_src7_data),                       //          .data
		.sink2_startofpacket (cmd_demux_002_src7_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src7_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                         //          .valid
		.src_data            (cmd_mux_010_src_data),                          //          .data
		.src_channel         (cmd_mux_010_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                       //          .channel
		.sink0_data          (cmd_demux_src10_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_demux_002_src8_ready),                      //     sink2.ready
		.sink2_valid         (cmd_demux_002_src8_valid),                      //          .valid
		.sink2_channel       (cmd_demux_002_src8_channel),                    //          .channel
		.sink2_data          (cmd_demux_002_src8_data),                       //          .data
		.sink2_startofpacket (cmd_demux_002_src8_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src8_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                         //          .valid
		.src_data            (cmd_mux_011_src_data),                          //          .data
		.src_channel         (cmd_mux_011_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                       //          .channel
		.sink0_data          (cmd_demux_src11_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                      //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                    //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                       //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket),                //          .endofpacket
		.sink2_ready         (cmd_demux_002_src9_ready),                      //     sink2.ready
		.sink2_valid         (cmd_demux_002_src9_valid),                      //          .valid
		.sink2_channel       (cmd_demux_002_src9_channel),                    //          .channel
		.sink2_data          (cmd_demux_002_src9_data),                       //          .data
		.sink2_startofpacket (cmd_demux_002_src9_startofpacket),              //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src9_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                         //          .valid
		.src_data            (cmd_mux_012_src_data),                          //          .data
		.src_channel         (cmd_mux_012_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                       //          .channel
		.sink0_data          (cmd_demux_src12_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src10_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src10_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src10_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src10_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src10_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src10_endofpacket)                //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_013 cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                         //          .valid
		.src_data            (cmd_mux_013_src_data),                          //          .data
		.src_channel         (cmd_mux_013_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                       //          .channel
		.sink0_data          (cmd_demux_src13_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src11_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src11_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src11_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src11_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src11_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src11_endofpacket),               //          .endofpacket
		.sink3_ready         (cmd_demux_003_src1_ready),                      //     sink3.ready
		.sink3_valid         (cmd_demux_003_src1_valid),                      //          .valid
		.sink3_channel       (cmd_demux_003_src1_channel),                    //          .channel
		.sink3_data          (cmd_demux_003_src1_data),                       //          .data
		.sink3_startofpacket (cmd_demux_003_src1_startofpacket),              //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src1_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                         //          .valid
		.src_data            (cmd_mux_014_src_data),                          //          .data
		.src_channel         (cmd_mux_014_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                       //          .channel
		.sink0_data          (cmd_demux_src14_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src12_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src12_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src12_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src12_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src12_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src12_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src12_endofpacket)                //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_015 (
		.clk                 (clock_bridge_0_out_clk_clk),              //       clk.clk
		.reset               (reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                   //          .valid
		.src_data            (cmd_mux_015_src_data),                    //          .data
		.src_channel         (cmd_mux_015_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                   //          .valid
		.sink0_channel       (crosser_006_out_channel),                 //          .channel
		.sink0_data          (crosser_006_out_data),                    //          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket),             //          .endofpacket
		.sink1_ready         (crosser_013_out_ready),                   //     sink1.ready
		.sink1_valid         (crosser_013_out_valid),                   //          .valid
		.sink1_channel       (crosser_013_out_channel),                 //          .channel
		.sink1_data          (crosser_013_out_data),                    //          .data
		.sink1_startofpacket (crosser_013_out_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (crosser_013_out_endofpacket),             //          .endofpacket
		.sink2_ready         (crosser_020_out_ready),                   //     sink2.ready
		.sink2_valid         (crosser_020_out_valid),                   //          .valid
		.sink2_channel       (crosser_020_out_channel),                 //          .channel
		.sink2_data          (crosser_020_out_data),                    //          .data
		.sink2_startofpacket (crosser_020_out_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (crosser_020_out_endofpacket)              //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                         //          .valid
		.src_data            (cmd_mux_016_src_data),                          //          .data
		.src_channel         (cmd_mux_016_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                       //          .channel
		.sink0_data          (cmd_demux_src16_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src14_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src14_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src14_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src14_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src14_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src14_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src14_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src14_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src14_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src14_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src14_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src14_endofpacket)                //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_017 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                         //          .valid
		.src_data            (cmd_mux_017_src_data),                          //          .data
		.src_channel         (cmd_mux_017_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                       //          .channel
		.sink0_data          (cmd_demux_src17_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src15_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src15_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src15_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src15_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src15_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src15_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src15_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src15_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src15_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src15_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src15_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src15_endofpacket)                //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_018 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                         //          .valid
		.src_data            (cmd_mux_018_src_data),                          //          .data
		.src_channel         (cmd_mux_018_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                       //          .channel
		.sink0_data          (cmd_demux_src18_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src16_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src16_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src16_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src16_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src16_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src16_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src16_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src16_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src16_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src16_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src16_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src16_endofpacket)                //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_019 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                         //          .valid
		.src_data            (cmd_mux_019_src_data),                          //          .data
		.src_channel         (cmd_mux_019_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                       //          .channel
		.sink0_data          (cmd_demux_src19_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src17_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src17_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src17_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src17_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src17_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src17_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src17_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src17_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src17_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src17_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src17_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src17_endofpacket)                //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_020 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                         //          .valid
		.src_data            (cmd_mux_020_src_data),                          //          .data
		.src_channel         (cmd_mux_020_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                       //          .channel
		.sink0_data          (cmd_demux_src20_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src18_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src18_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src18_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src18_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src18_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src18_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src18_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src18_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src18_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src18_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src18_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src18_endofpacket)                //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_021 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                         //          .valid
		.src_data            (cmd_mux_021_src_data),                          //          .data
		.src_channel         (cmd_mux_021_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                       //          .channel
		.sink0_data          (cmd_demux_src21_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src19_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src19_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src19_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src19_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src19_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src19_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src19_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src19_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src19_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src19_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src19_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src19_endofpacket)                //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_022 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                         //          .valid
		.src_data            (cmd_mux_022_src_data),                          //          .data
		.src_channel         (cmd_mux_022_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src22_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src22_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src22_channel),                       //          .channel
		.sink0_data          (cmd_demux_src22_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src22_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src22_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src20_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src20_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src20_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src20_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src20_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src20_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src20_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src20_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src20_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src20_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src20_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src20_endofpacket)                //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_mux_002 cmd_mux_023 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                         //          .valid
		.src_data            (cmd_mux_023_src_data),                          //          .data
		.src_channel         (cmd_mux_023_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src23_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src23_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src23_channel),                       //          .channel
		.sink0_data          (cmd_demux_src23_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src23_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src23_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src21_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src21_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src21_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src21_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src21_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src21_endofpacket),               //          .endofpacket
		.sink2_ready         (cmd_demux_002_src21_ready),                     //     sink2.ready
		.sink2_valid         (cmd_demux_002_src21_valid),                     //          .valid
		.sink2_channel       (cmd_demux_002_src21_channel),                   //          .channel
		.sink2_data          (cmd_demux_002_src21_data),                      //          .data
		.sink2_startofpacket (cmd_demux_002_src21_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src21_endofpacket)                //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                          //      sink.ready
		.sink_channel       (router_004_src_channel),                        //          .channel
		.sink_data          (router_004_src_data),                           //          .data
		.sink_startofpacket (router_004_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_004_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	procesador_mm_interconnect_0_cmd_demux_003 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_001_src1_data),                        //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                          //      sink.ready
		.sink_channel       (router_006_src_channel),                        //          .channel
		.sink_data          (router_006_src_data),                           //          .data
		.sink_startofpacket (router_006_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_006_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_002_src1_data),                       //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_002_src2_data),                       //          .data
		.src2_channel       (rsp_demux_002_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset              (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                 //      sink.ready
		.sink_channel       (router_007_src_channel),                               //          .channel
		.sink_data          (router_007_src_data),                                  //          .data
		.sink_startofpacket (router_007_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_007_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_003_src0_data),                              //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_003_src1_data),                              //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_003_src2_data),                              //          .data
		.src2_channel       (rsp_demux_003_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)                        //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_003 rsp_demux_004 (
		.clk                (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset              (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                 //      sink.ready
		.sink_channel       (router_008_src_channel),                               //          .channel
		.sink_data          (router_008_src_data),                                  //          .data
		.sink_startofpacket (router_008_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_008_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_004_src0_data),                              //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_004_src1_data),                              //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_004_src2_data),                              //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)                        //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_003 rsp_demux_005 (
		.clk                (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset              (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                 //      sink.ready
		.sink_channel       (router_009_src_channel),                               //          .channel
		.sink_data          (router_009_src_data),                                  //          .data
		.sink_startofpacket (router_009_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_009_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_005_src0_data),                              //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_005_src1_data),                              //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_005_src2_data),                              //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket)                        //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_003 rsp_demux_006 (
		.clk                (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset              (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                 //      sink.ready
		.sink_channel       (router_010_src_channel),                               //          .channel
		.sink_data          (router_010_src_data),                                  //          .data
		.sink_startofpacket (router_010_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_010_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_006_src0_data),                              //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_006_src1_data),                              //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_006_src2_data),                              //          .data
		.src2_channel       (rsp_demux_006_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket)                        //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_003 rsp_demux_007 (
		.clk                (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset              (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                 //      sink.ready
		.sink_channel       (router_011_src_channel),                               //          .channel
		.sink_data          (router_011_src_data),                                  //          .data
		.sink_startofpacket (router_011_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_011_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_007_src0_data),                              //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_007_src1_data),                              //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_007_src2_data),                              //          .data
		.src2_channel       (rsp_demux_007_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket)                        //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_003 rsp_demux_008 (
		.clk                (clock_bridge_0_out_clk_clk),                           //       clk.clk
		.reset              (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                 //      sink.ready
		.sink_channel       (router_012_src_channel),                               //          .channel
		.sink_data          (router_012_src_data),                                  //          .data
		.sink_startofpacket (router_012_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_012_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_008_src0_data),                              //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                             //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                             //          .valid
		.src1_data          (rsp_demux_008_src1_data),                              //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                           //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),                             //      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),                             //          .valid
		.src2_data          (rsp_demux_008_src2_data),                              //          .data
		.src2_channel       (rsp_demux_008_src2_channel),                           //          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket)                        //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                          //      sink.ready
		.sink_channel       (router_013_src_channel),                        //          .channel
		.sink_data          (router_013_src_data),                           //          .data
		.sink_startofpacket (router_013_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_013_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_009_src0_data),                       //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_009_src1_data),                       //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_009_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_009_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_009_src2_data),                       //          .data
		.src2_channel       (rsp_demux_009_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_009_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_009_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                          //      sink.ready
		.sink_channel       (router_014_src_channel),                        //          .channel
		.sink_data          (router_014_src_data),                           //          .data
		.sink_startofpacket (router_014_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_014_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_010_src0_data),                       //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_010_src1_data),                       //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_010_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_010_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_010_src2_data),                       //          .data
		.src2_channel       (rsp_demux_010_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_010_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_010_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                          //      sink.ready
		.sink_channel       (router_015_src_channel),                        //          .channel
		.sink_data          (router_015_src_data),                           //          .data
		.sink_startofpacket (router_015_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_015_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_011_src0_data),                       //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_011_src1_data),                       //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_011_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_011_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_011_src2_data),                       //          .data
		.src2_channel       (rsp_demux_011_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_011_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_011_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                          //      sink.ready
		.sink_channel       (router_016_src_channel),                        //          .channel
		.sink_data          (router_016_src_data),                           //          .data
		.sink_startofpacket (router_016_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_016_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_012_src0_data),                       //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_012_src1_data),                       //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_012_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_012_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_012_src2_data),                       //          .data
		.src2_channel       (rsp_demux_012_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_012_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_012_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_013 rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                          //      sink.ready
		.sink_channel       (router_017_src_channel),                        //          .channel
		.sink_data          (router_017_src_data),                           //          .data
		.sink_startofpacket (router_017_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_017_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_013_src0_data),                       //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_013_src1_data),                       //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_013_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_013_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_013_src2_data),                       //          .data
		.src2_channel       (rsp_demux_013_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_013_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_013_src2_endofpacket),                //          .endofpacket
		.src3_ready         (rsp_demux_013_src3_ready),                      //      src3.ready
		.src3_valid         (rsp_demux_013_src3_valid),                      //          .valid
		.src3_data          (rsp_demux_013_src3_data),                       //          .data
		.src3_channel       (rsp_demux_013_src3_channel),                    //          .channel
		.src3_startofpacket (rsp_demux_013_src3_startofpacket),              //          .startofpacket
		.src3_endofpacket   (rsp_demux_013_src3_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_014 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                          //      sink.ready
		.sink_channel       (router_018_src_channel),                        //          .channel
		.sink_data          (router_018_src_data),                           //          .data
		.sink_startofpacket (router_018_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_018_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_014_src0_data),                       //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_014_src1_data),                       //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_014_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_014_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_014_src2_data),                       //          .data
		.src2_channel       (rsp_demux_014_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_014_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_014_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_003 rsp_demux_015 (
		.clk                (clock_bridge_0_out_clk_clk),              //       clk.clk
		.reset              (reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                    //      sink.ready
		.sink_channel       (router_019_src_channel),                  //          .channel
		.sink_data          (router_019_src_data),                     //          .data
		.sink_startofpacket (router_019_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_019_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                //          .valid
		.src0_data          (rsp_demux_015_src0_data),                 //          .data
		.src0_channel       (rsp_demux_015_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                //          .valid
		.src1_data          (rsp_demux_015_src1_data),                 //          .data
		.src1_channel       (rsp_demux_015_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket),          //          .endofpacket
		.src2_ready         (rsp_demux_015_src2_ready),                //      src2.ready
		.src2_valid         (rsp_demux_015_src2_valid),                //          .valid
		.src2_data          (rsp_demux_015_src2_data),                 //          .data
		.src2_channel       (rsp_demux_015_src2_channel),              //          .channel
		.src2_startofpacket (rsp_demux_015_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket   (rsp_demux_015_src2_endofpacket)           //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_016 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                          //      sink.ready
		.sink_channel       (router_020_src_channel),                        //          .channel
		.sink_data          (router_020_src_data),                           //          .data
		.sink_startofpacket (router_020_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_020_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_016_src0_data),                       //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_016_src1_data),                       //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_016_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_016_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_016_src2_data),                       //          .data
		.src2_channel       (rsp_demux_016_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_016_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_016_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_017 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                          //      sink.ready
		.sink_channel       (router_021_src_channel),                        //          .channel
		.sink_data          (router_021_src_data),                           //          .data
		.sink_startofpacket (router_021_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_021_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_017_src0_data),                       //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_017_src1_data),                       //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_017_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_017_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_017_src2_data),                       //          .data
		.src2_channel       (rsp_demux_017_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_017_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_017_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_018 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                          //      sink.ready
		.sink_channel       (router_022_src_channel),                        //          .channel
		.sink_data          (router_022_src_data),                           //          .data
		.sink_startofpacket (router_022_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_022_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_018_src0_data),                       //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_018_src1_data),                       //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_018_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_018_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_018_src2_data),                       //          .data
		.src2_channel       (rsp_demux_018_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_018_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_018_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_019 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                          //      sink.ready
		.sink_channel       (router_023_src_channel),                        //          .channel
		.sink_data          (router_023_src_data),                           //          .data
		.sink_startofpacket (router_023_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_023_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_019_src0_data),                       //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_019_src1_data),                       //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_019_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_019_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_019_src2_data),                       //          .data
		.src2_channel       (rsp_demux_019_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_019_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_019_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_020 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                          //      sink.ready
		.sink_channel       (router_024_src_channel),                        //          .channel
		.sink_data          (router_024_src_data),                           //          .data
		.sink_startofpacket (router_024_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_024_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_020_src0_data),                       //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_020_src1_data),                       //          .data
		.src1_channel       (rsp_demux_020_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_020_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_020_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_020_src2_data),                       //          .data
		.src2_channel       (rsp_demux_020_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_020_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_020_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_021 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                          //      sink.ready
		.sink_channel       (router_025_src_channel),                        //          .channel
		.sink_data          (router_025_src_data),                           //          .data
		.sink_startofpacket (router_025_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_025_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_021_src0_data),                       //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_021_src1_data),                       //          .data
		.src1_channel       (rsp_demux_021_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_021_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_021_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_021_src2_data),                       //          .data
		.src2_channel       (rsp_demux_021_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_021_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_021_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_022 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                          //      sink.ready
		.sink_channel       (router_026_src_channel),                        //          .channel
		.sink_data          (router_026_src_data),                           //          .data
		.sink_startofpacket (router_026_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_026_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_022_src0_data),                       //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_022_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_022_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_022_src1_data),                       //          .data
		.src1_channel       (rsp_demux_022_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_022_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_022_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_022_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_022_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_022_src2_data),                       //          .data
		.src2_channel       (rsp_demux_022_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_022_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_022_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_demux_002 rsp_demux_023 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                          //      sink.ready
		.sink_channel       (router_027_src_channel),                        //          .channel
		.sink_data          (router_027_src_data),                           //          .data
		.sink_startofpacket (router_027_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_027_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_023_src0_data),                       //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_023_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_023_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_023_src1_data),                       //          .data
		.src1_channel       (rsp_demux_023_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_023_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_023_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_023_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_023_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_023_src2_data),                       //          .data
		.src2_channel       (rsp_demux_023_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_023_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_023_src2_endofpacket)                 //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                  //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                              //       src.ready
		.src_valid            (rsp_mux_src_valid),                              //          .valid
		.src_data             (rsp_mux_src_data),                               //          .data
		.src_channel          (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                         //          .channel
		.sink0_data           (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                       //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                     //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                        //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                       //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                     //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                        //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready          (crosser_021_out_ready),                          //     sink3.ready
		.sink3_valid          (crosser_021_out_valid),                          //          .valid
		.sink3_channel        (crosser_021_out_channel),                        //          .channel
		.sink3_data           (crosser_021_out_data),                           //          .data
		.sink3_startofpacket  (crosser_021_out_startofpacket),                  //          .startofpacket
		.sink3_endofpacket    (crosser_021_out_endofpacket),                    //          .endofpacket
		.sink4_ready          (crosser_024_out_ready),                          //     sink4.ready
		.sink4_valid          (crosser_024_out_valid),                          //          .valid
		.sink4_channel        (crosser_024_out_channel),                        //          .channel
		.sink4_data           (crosser_024_out_data),                           //          .data
		.sink4_startofpacket  (crosser_024_out_startofpacket),                  //          .startofpacket
		.sink4_endofpacket    (crosser_024_out_endofpacket),                    //          .endofpacket
		.sink5_ready          (crosser_027_out_ready),                          //     sink5.ready
		.sink5_valid          (crosser_027_out_valid),                          //          .valid
		.sink5_channel        (crosser_027_out_channel),                        //          .channel
		.sink5_data           (crosser_027_out_data),                           //          .data
		.sink5_startofpacket  (crosser_027_out_startofpacket),                  //          .startofpacket
		.sink5_endofpacket    (crosser_027_out_endofpacket),                    //          .endofpacket
		.sink6_ready          (crosser_030_out_ready),                          //     sink6.ready
		.sink6_valid          (crosser_030_out_valid),                          //          .valid
		.sink6_channel        (crosser_030_out_channel),                        //          .channel
		.sink6_data           (crosser_030_out_data),                           //          .data
		.sink6_startofpacket  (crosser_030_out_startofpacket),                  //          .startofpacket
		.sink6_endofpacket    (crosser_030_out_endofpacket),                    //          .endofpacket
		.sink7_ready          (crosser_033_out_ready),                          //     sink7.ready
		.sink7_valid          (crosser_033_out_valid),                          //          .valid
		.sink7_channel        (crosser_033_out_channel),                        //          .channel
		.sink7_data           (crosser_033_out_data),                           //          .data
		.sink7_startofpacket  (crosser_033_out_startofpacket),                  //          .startofpacket
		.sink7_endofpacket    (crosser_033_out_endofpacket),                    //          .endofpacket
		.sink8_ready          (crosser_036_out_ready),                          //     sink8.ready
		.sink8_valid          (crosser_036_out_valid),                          //          .valid
		.sink8_channel        (crosser_036_out_channel),                        //          .channel
		.sink8_data           (crosser_036_out_data),                           //          .data
		.sink8_startofpacket  (crosser_036_out_startofpacket),                  //          .startofpacket
		.sink8_endofpacket    (crosser_036_out_endofpacket),                    //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                       //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                       //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                     //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                        //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                 //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                       //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                        //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                 //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                       //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                        //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                 //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                       //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                       //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                     //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                        //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),               //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                 //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                       //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                       //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                     //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                        //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),               //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                 //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                       //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                       //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                     //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                        //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),               //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                 //          .endofpacket
		.sink15_ready         (crosser_039_out_ready),                          //    sink15.ready
		.sink15_valid         (crosser_039_out_valid),                          //          .valid
		.sink15_channel       (crosser_039_out_channel),                        //          .channel
		.sink15_data          (crosser_039_out_data),                           //          .data
		.sink15_startofpacket (crosser_039_out_startofpacket),                  //          .startofpacket
		.sink15_endofpacket   (crosser_039_out_endofpacket),                    //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                       //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                       //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                     //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                        //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),               //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                 //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                       //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                       //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                     //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                        //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),               //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                 //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                       //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                       //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                     //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                        //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),               //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                 //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                       //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                       //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                     //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                        //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),               //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                 //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                       //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                       //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                     //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                        //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),               //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                 //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                       //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                       //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                     //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                        //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),               //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),                 //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                       //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                       //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                     //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                        //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),               //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),                 //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                       //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                       //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                     //          .channel
		.sink23_data          (rsp_demux_023_src0_data),                        //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),               //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket)                  //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (clk_0_clk_clk),                                                       //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                               //          .valid
		.src_data             (rsp_mux_001_src_data),                                                //          .data
		.src_channel          (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready          (rsp_demux_002_src1_ready),                                            //     sink0.ready
		.sink0_valid          (rsp_demux_002_src1_valid),                                            //          .valid
		.sink0_channel        (rsp_demux_002_src1_channel),                                          //          .channel
		.sink0_data           (rsp_demux_002_src1_data),                                             //          .data
		.sink0_startofpacket  (rsp_demux_002_src1_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket    (rsp_demux_002_src1_endofpacket),                                      //          .endofpacket
		.sink1_ready          (crosser_022_out_ready),                                               //     sink1.ready
		.sink1_valid          (crosser_022_out_valid),                                               //          .valid
		.sink1_channel        (crosser_022_out_channel),                                             //          .channel
		.sink1_data           (crosser_022_out_data),                                                //          .data
		.sink1_startofpacket  (crosser_022_out_startofpacket),                                       //          .startofpacket
		.sink1_endofpacket    (crosser_022_out_endofpacket),                                         //          .endofpacket
		.sink2_ready          (crosser_025_out_ready),                                               //     sink2.ready
		.sink2_valid          (crosser_025_out_valid),                                               //          .valid
		.sink2_channel        (crosser_025_out_channel),                                             //          .channel
		.sink2_data           (crosser_025_out_data),                                                //          .data
		.sink2_startofpacket  (crosser_025_out_startofpacket),                                       //          .startofpacket
		.sink2_endofpacket    (crosser_025_out_endofpacket),                                         //          .endofpacket
		.sink3_ready          (crosser_028_out_ready),                                               //     sink3.ready
		.sink3_valid          (crosser_028_out_valid),                                               //          .valid
		.sink3_channel        (crosser_028_out_channel),                                             //          .channel
		.sink3_data           (crosser_028_out_data),                                                //          .data
		.sink3_startofpacket  (crosser_028_out_startofpacket),                                       //          .startofpacket
		.sink3_endofpacket    (crosser_028_out_endofpacket),                                         //          .endofpacket
		.sink4_ready          (crosser_031_out_ready),                                               //     sink4.ready
		.sink4_valid          (crosser_031_out_valid),                                               //          .valid
		.sink4_channel        (crosser_031_out_channel),                                             //          .channel
		.sink4_data           (crosser_031_out_data),                                                //          .data
		.sink4_startofpacket  (crosser_031_out_startofpacket),                                       //          .startofpacket
		.sink4_endofpacket    (crosser_031_out_endofpacket),                                         //          .endofpacket
		.sink5_ready          (crosser_034_out_ready),                                               //     sink5.ready
		.sink5_valid          (crosser_034_out_valid),                                               //          .valid
		.sink5_channel        (crosser_034_out_channel),                                             //          .channel
		.sink5_data           (crosser_034_out_data),                                                //          .data
		.sink5_startofpacket  (crosser_034_out_startofpacket),                                       //          .startofpacket
		.sink5_endofpacket    (crosser_034_out_endofpacket),                                         //          .endofpacket
		.sink6_ready          (crosser_037_out_ready),                                               //     sink6.ready
		.sink6_valid          (crosser_037_out_valid),                                               //          .valid
		.sink6_channel        (crosser_037_out_channel),                                             //          .channel
		.sink6_data           (crosser_037_out_data),                                                //          .data
		.sink6_startofpacket  (crosser_037_out_startofpacket),                                       //          .startofpacket
		.sink6_endofpacket    (crosser_037_out_endofpacket),                                         //          .endofpacket
		.sink7_ready          (rsp_demux_009_src1_ready),                                            //     sink7.ready
		.sink7_valid          (rsp_demux_009_src1_valid),                                            //          .valid
		.sink7_channel        (rsp_demux_009_src1_channel),                                          //          .channel
		.sink7_data           (rsp_demux_009_src1_data),                                             //          .data
		.sink7_startofpacket  (rsp_demux_009_src1_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (rsp_demux_009_src1_endofpacket),                                      //          .endofpacket
		.sink8_ready          (rsp_demux_010_src1_ready),                                            //     sink8.ready
		.sink8_valid          (rsp_demux_010_src1_valid),                                            //          .valid
		.sink8_channel        (rsp_demux_010_src1_channel),                                          //          .channel
		.sink8_data           (rsp_demux_010_src1_data),                                             //          .data
		.sink8_startofpacket  (rsp_demux_010_src1_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_010_src1_endofpacket),                                      //          .endofpacket
		.sink9_ready          (rsp_demux_011_src1_ready),                                            //     sink9.ready
		.sink9_valid          (rsp_demux_011_src1_valid),                                            //          .valid
		.sink9_channel        (rsp_demux_011_src1_channel),                                          //          .channel
		.sink9_data           (rsp_demux_011_src1_data),                                             //          .data
		.sink9_startofpacket  (rsp_demux_011_src1_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_011_src1_endofpacket),                                      //          .endofpacket
		.sink10_ready         (rsp_demux_012_src1_ready),                                            //    sink10.ready
		.sink10_valid         (rsp_demux_012_src1_valid),                                            //          .valid
		.sink10_channel       (rsp_demux_012_src1_channel),                                          //          .channel
		.sink10_data          (rsp_demux_012_src1_data),                                             //          .data
		.sink10_startofpacket (rsp_demux_012_src1_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_012_src1_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_demux_013_src1_ready),                                            //    sink11.ready
		.sink11_valid         (rsp_demux_013_src1_valid),                                            //          .valid
		.sink11_channel       (rsp_demux_013_src1_channel),                                          //          .channel
		.sink11_data          (rsp_demux_013_src1_data),                                             //          .data
		.sink11_startofpacket (rsp_demux_013_src1_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_013_src1_endofpacket),                                      //          .endofpacket
		.sink12_ready         (rsp_demux_014_src1_ready),                                            //    sink12.ready
		.sink12_valid         (rsp_demux_014_src1_valid),                                            //          .valid
		.sink12_channel       (rsp_demux_014_src1_channel),                                          //          .channel
		.sink12_data          (rsp_demux_014_src1_data),                                             //          .data
		.sink12_startofpacket (rsp_demux_014_src1_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (rsp_demux_014_src1_endofpacket),                                      //          .endofpacket
		.sink13_ready         (crosser_040_out_ready),                                               //    sink13.ready
		.sink13_valid         (crosser_040_out_valid),                                               //          .valid
		.sink13_channel       (crosser_040_out_channel),                                             //          .channel
		.sink13_data          (crosser_040_out_data),                                                //          .data
		.sink13_startofpacket (crosser_040_out_startofpacket),                                       //          .startofpacket
		.sink13_endofpacket   (crosser_040_out_endofpacket),                                         //          .endofpacket
		.sink14_ready         (rsp_demux_016_src1_ready),                                            //    sink14.ready
		.sink14_valid         (rsp_demux_016_src1_valid),                                            //          .valid
		.sink14_channel       (rsp_demux_016_src1_channel),                                          //          .channel
		.sink14_data          (rsp_demux_016_src1_data),                                             //          .data
		.sink14_startofpacket (rsp_demux_016_src1_startofpacket),                                    //          .startofpacket
		.sink14_endofpacket   (rsp_demux_016_src1_endofpacket),                                      //          .endofpacket
		.sink15_ready         (rsp_demux_017_src1_ready),                                            //    sink15.ready
		.sink15_valid         (rsp_demux_017_src1_valid),                                            //          .valid
		.sink15_channel       (rsp_demux_017_src1_channel),                                          //          .channel
		.sink15_data          (rsp_demux_017_src1_data),                                             //          .data
		.sink15_startofpacket (rsp_demux_017_src1_startofpacket),                                    //          .startofpacket
		.sink15_endofpacket   (rsp_demux_017_src1_endofpacket),                                      //          .endofpacket
		.sink16_ready         (rsp_demux_018_src1_ready),                                            //    sink16.ready
		.sink16_valid         (rsp_demux_018_src1_valid),                                            //          .valid
		.sink16_channel       (rsp_demux_018_src1_channel),                                          //          .channel
		.sink16_data          (rsp_demux_018_src1_data),                                             //          .data
		.sink16_startofpacket (rsp_demux_018_src1_startofpacket),                                    //          .startofpacket
		.sink16_endofpacket   (rsp_demux_018_src1_endofpacket),                                      //          .endofpacket
		.sink17_ready         (rsp_demux_019_src1_ready),                                            //    sink17.ready
		.sink17_valid         (rsp_demux_019_src1_valid),                                            //          .valid
		.sink17_channel       (rsp_demux_019_src1_channel),                                          //          .channel
		.sink17_data          (rsp_demux_019_src1_data),                                             //          .data
		.sink17_startofpacket (rsp_demux_019_src1_startofpacket),                                    //          .startofpacket
		.sink17_endofpacket   (rsp_demux_019_src1_endofpacket),                                      //          .endofpacket
		.sink18_ready         (rsp_demux_020_src1_ready),                                            //    sink18.ready
		.sink18_valid         (rsp_demux_020_src1_valid),                                            //          .valid
		.sink18_channel       (rsp_demux_020_src1_channel),                                          //          .channel
		.sink18_data          (rsp_demux_020_src1_data),                                             //          .data
		.sink18_startofpacket (rsp_demux_020_src1_startofpacket),                                    //          .startofpacket
		.sink18_endofpacket   (rsp_demux_020_src1_endofpacket),                                      //          .endofpacket
		.sink19_ready         (rsp_demux_021_src1_ready),                                            //    sink19.ready
		.sink19_valid         (rsp_demux_021_src1_valid),                                            //          .valid
		.sink19_channel       (rsp_demux_021_src1_channel),                                          //          .channel
		.sink19_data          (rsp_demux_021_src1_data),                                             //          .data
		.sink19_startofpacket (rsp_demux_021_src1_startofpacket),                                    //          .startofpacket
		.sink19_endofpacket   (rsp_demux_021_src1_endofpacket),                                      //          .endofpacket
		.sink20_ready         (rsp_demux_022_src1_ready),                                            //    sink20.ready
		.sink20_valid         (rsp_demux_022_src1_valid),                                            //          .valid
		.sink20_channel       (rsp_demux_022_src1_channel),                                          //          .channel
		.sink20_data          (rsp_demux_022_src1_data),                                             //          .data
		.sink20_startofpacket (rsp_demux_022_src1_startofpacket),                                    //          .startofpacket
		.sink20_endofpacket   (rsp_demux_022_src1_endofpacket),                                      //          .endofpacket
		.sink21_ready         (rsp_demux_023_src1_ready),                                            //    sink21.ready
		.sink21_valid         (rsp_demux_023_src1_valid),                                            //          .valid
		.sink21_channel       (rsp_demux_023_src1_channel),                                          //          .channel
		.sink21_data          (rsp_demux_023_src1_data),                                             //          .data
		.sink21_startofpacket (rsp_demux_023_src1_startofpacket),                                    //          .startofpacket
		.sink21_endofpacket   (rsp_demux_023_src1_endofpacket)                                       //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                  (clk_0_clk_clk),                                                       //       clk.clk
		.reset                (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_002_src_ready),                                               //       src.ready
		.src_valid            (rsp_mux_002_src_valid),                                               //          .valid
		.src_data             (rsp_mux_002_src_data),                                                //          .data
		.src_channel          (rsp_mux_002_src_channel),                                             //          .channel
		.src_startofpacket    (rsp_mux_002_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket      (rsp_mux_002_src_endofpacket),                                         //          .endofpacket
		.sink0_ready          (rsp_demux_002_src2_ready),                                            //     sink0.ready
		.sink0_valid          (rsp_demux_002_src2_valid),                                            //          .valid
		.sink0_channel        (rsp_demux_002_src2_channel),                                          //          .channel
		.sink0_data           (rsp_demux_002_src2_data),                                             //          .data
		.sink0_startofpacket  (rsp_demux_002_src2_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket    (rsp_demux_002_src2_endofpacket),                                      //          .endofpacket
		.sink1_ready          (crosser_023_out_ready),                                               //     sink1.ready
		.sink1_valid          (crosser_023_out_valid),                                               //          .valid
		.sink1_channel        (crosser_023_out_channel),                                             //          .channel
		.sink1_data           (crosser_023_out_data),                                                //          .data
		.sink1_startofpacket  (crosser_023_out_startofpacket),                                       //          .startofpacket
		.sink1_endofpacket    (crosser_023_out_endofpacket),                                         //          .endofpacket
		.sink2_ready          (crosser_026_out_ready),                                               //     sink2.ready
		.sink2_valid          (crosser_026_out_valid),                                               //          .valid
		.sink2_channel        (crosser_026_out_channel),                                             //          .channel
		.sink2_data           (crosser_026_out_data),                                                //          .data
		.sink2_startofpacket  (crosser_026_out_startofpacket),                                       //          .startofpacket
		.sink2_endofpacket    (crosser_026_out_endofpacket),                                         //          .endofpacket
		.sink3_ready          (crosser_029_out_ready),                                               //     sink3.ready
		.sink3_valid          (crosser_029_out_valid),                                               //          .valid
		.sink3_channel        (crosser_029_out_channel),                                             //          .channel
		.sink3_data           (crosser_029_out_data),                                                //          .data
		.sink3_startofpacket  (crosser_029_out_startofpacket),                                       //          .startofpacket
		.sink3_endofpacket    (crosser_029_out_endofpacket),                                         //          .endofpacket
		.sink4_ready          (crosser_032_out_ready),                                               //     sink4.ready
		.sink4_valid          (crosser_032_out_valid),                                               //          .valid
		.sink4_channel        (crosser_032_out_channel),                                             //          .channel
		.sink4_data           (crosser_032_out_data),                                                //          .data
		.sink4_startofpacket  (crosser_032_out_startofpacket),                                       //          .startofpacket
		.sink4_endofpacket    (crosser_032_out_endofpacket),                                         //          .endofpacket
		.sink5_ready          (crosser_035_out_ready),                                               //     sink5.ready
		.sink5_valid          (crosser_035_out_valid),                                               //          .valid
		.sink5_channel        (crosser_035_out_channel),                                             //          .channel
		.sink5_data           (crosser_035_out_data),                                                //          .data
		.sink5_startofpacket  (crosser_035_out_startofpacket),                                       //          .startofpacket
		.sink5_endofpacket    (crosser_035_out_endofpacket),                                         //          .endofpacket
		.sink6_ready          (crosser_038_out_ready),                                               //     sink6.ready
		.sink6_valid          (crosser_038_out_valid),                                               //          .valid
		.sink6_channel        (crosser_038_out_channel),                                             //          .channel
		.sink6_data           (crosser_038_out_data),                                                //          .data
		.sink6_startofpacket  (crosser_038_out_startofpacket),                                       //          .startofpacket
		.sink6_endofpacket    (crosser_038_out_endofpacket),                                         //          .endofpacket
		.sink7_ready          (rsp_demux_009_src2_ready),                                            //     sink7.ready
		.sink7_valid          (rsp_demux_009_src2_valid),                                            //          .valid
		.sink7_channel        (rsp_demux_009_src2_channel),                                          //          .channel
		.sink7_data           (rsp_demux_009_src2_data),                                             //          .data
		.sink7_startofpacket  (rsp_demux_009_src2_startofpacket),                                    //          .startofpacket
		.sink7_endofpacket    (rsp_demux_009_src2_endofpacket),                                      //          .endofpacket
		.sink8_ready          (rsp_demux_010_src2_ready),                                            //     sink8.ready
		.sink8_valid          (rsp_demux_010_src2_valid),                                            //          .valid
		.sink8_channel        (rsp_demux_010_src2_channel),                                          //          .channel
		.sink8_data           (rsp_demux_010_src2_data),                                             //          .data
		.sink8_startofpacket  (rsp_demux_010_src2_startofpacket),                                    //          .startofpacket
		.sink8_endofpacket    (rsp_demux_010_src2_endofpacket),                                      //          .endofpacket
		.sink9_ready          (rsp_demux_011_src2_ready),                                            //     sink9.ready
		.sink9_valid          (rsp_demux_011_src2_valid),                                            //          .valid
		.sink9_channel        (rsp_demux_011_src2_channel),                                          //          .channel
		.sink9_data           (rsp_demux_011_src2_data),                                             //          .data
		.sink9_startofpacket  (rsp_demux_011_src2_startofpacket),                                    //          .startofpacket
		.sink9_endofpacket    (rsp_demux_011_src2_endofpacket),                                      //          .endofpacket
		.sink10_ready         (rsp_demux_012_src2_ready),                                            //    sink10.ready
		.sink10_valid         (rsp_demux_012_src2_valid),                                            //          .valid
		.sink10_channel       (rsp_demux_012_src2_channel),                                          //          .channel
		.sink10_data          (rsp_demux_012_src2_data),                                             //          .data
		.sink10_startofpacket (rsp_demux_012_src2_startofpacket),                                    //          .startofpacket
		.sink10_endofpacket   (rsp_demux_012_src2_endofpacket),                                      //          .endofpacket
		.sink11_ready         (rsp_demux_013_src2_ready),                                            //    sink11.ready
		.sink11_valid         (rsp_demux_013_src2_valid),                                            //          .valid
		.sink11_channel       (rsp_demux_013_src2_channel),                                          //          .channel
		.sink11_data          (rsp_demux_013_src2_data),                                             //          .data
		.sink11_startofpacket (rsp_demux_013_src2_startofpacket),                                    //          .startofpacket
		.sink11_endofpacket   (rsp_demux_013_src2_endofpacket),                                      //          .endofpacket
		.sink12_ready         (rsp_demux_014_src2_ready),                                            //    sink12.ready
		.sink12_valid         (rsp_demux_014_src2_valid),                                            //          .valid
		.sink12_channel       (rsp_demux_014_src2_channel),                                          //          .channel
		.sink12_data          (rsp_demux_014_src2_data),                                             //          .data
		.sink12_startofpacket (rsp_demux_014_src2_startofpacket),                                    //          .startofpacket
		.sink12_endofpacket   (rsp_demux_014_src2_endofpacket),                                      //          .endofpacket
		.sink13_ready         (crosser_041_out_ready),                                               //    sink13.ready
		.sink13_valid         (crosser_041_out_valid),                                               //          .valid
		.sink13_channel       (crosser_041_out_channel),                                             //          .channel
		.sink13_data          (crosser_041_out_data),                                                //          .data
		.sink13_startofpacket (crosser_041_out_startofpacket),                                       //          .startofpacket
		.sink13_endofpacket   (crosser_041_out_endofpacket),                                         //          .endofpacket
		.sink14_ready         (rsp_demux_016_src2_ready),                                            //    sink14.ready
		.sink14_valid         (rsp_demux_016_src2_valid),                                            //          .valid
		.sink14_channel       (rsp_demux_016_src2_channel),                                          //          .channel
		.sink14_data          (rsp_demux_016_src2_data),                                             //          .data
		.sink14_startofpacket (rsp_demux_016_src2_startofpacket),                                    //          .startofpacket
		.sink14_endofpacket   (rsp_demux_016_src2_endofpacket),                                      //          .endofpacket
		.sink15_ready         (rsp_demux_017_src2_ready),                                            //    sink15.ready
		.sink15_valid         (rsp_demux_017_src2_valid),                                            //          .valid
		.sink15_channel       (rsp_demux_017_src2_channel),                                          //          .channel
		.sink15_data          (rsp_demux_017_src2_data),                                             //          .data
		.sink15_startofpacket (rsp_demux_017_src2_startofpacket),                                    //          .startofpacket
		.sink15_endofpacket   (rsp_demux_017_src2_endofpacket),                                      //          .endofpacket
		.sink16_ready         (rsp_demux_018_src2_ready),                                            //    sink16.ready
		.sink16_valid         (rsp_demux_018_src2_valid),                                            //          .valid
		.sink16_channel       (rsp_demux_018_src2_channel),                                          //          .channel
		.sink16_data          (rsp_demux_018_src2_data),                                             //          .data
		.sink16_startofpacket (rsp_demux_018_src2_startofpacket),                                    //          .startofpacket
		.sink16_endofpacket   (rsp_demux_018_src2_endofpacket),                                      //          .endofpacket
		.sink17_ready         (rsp_demux_019_src2_ready),                                            //    sink17.ready
		.sink17_valid         (rsp_demux_019_src2_valid),                                            //          .valid
		.sink17_channel       (rsp_demux_019_src2_channel),                                          //          .channel
		.sink17_data          (rsp_demux_019_src2_data),                                             //          .data
		.sink17_startofpacket (rsp_demux_019_src2_startofpacket),                                    //          .startofpacket
		.sink17_endofpacket   (rsp_demux_019_src2_endofpacket),                                      //          .endofpacket
		.sink18_ready         (rsp_demux_020_src2_ready),                                            //    sink18.ready
		.sink18_valid         (rsp_demux_020_src2_valid),                                            //          .valid
		.sink18_channel       (rsp_demux_020_src2_channel),                                          //          .channel
		.sink18_data          (rsp_demux_020_src2_data),                                             //          .data
		.sink18_startofpacket (rsp_demux_020_src2_startofpacket),                                    //          .startofpacket
		.sink18_endofpacket   (rsp_demux_020_src2_endofpacket),                                      //          .endofpacket
		.sink19_ready         (rsp_demux_021_src2_ready),                                            //    sink19.ready
		.sink19_valid         (rsp_demux_021_src2_valid),                                            //          .valid
		.sink19_channel       (rsp_demux_021_src2_channel),                                          //          .channel
		.sink19_data          (rsp_demux_021_src2_data),                                             //          .data
		.sink19_startofpacket (rsp_demux_021_src2_startofpacket),                                    //          .startofpacket
		.sink19_endofpacket   (rsp_demux_021_src2_endofpacket),                                      //          .endofpacket
		.sink20_ready         (rsp_demux_022_src2_ready),                                            //    sink20.ready
		.sink20_valid         (rsp_demux_022_src2_valid),                                            //          .valid
		.sink20_channel       (rsp_demux_022_src2_channel),                                          //          .channel
		.sink20_data          (rsp_demux_022_src2_data),                                             //          .data
		.sink20_startofpacket (rsp_demux_022_src2_startofpacket),                                    //          .startofpacket
		.sink20_endofpacket   (rsp_demux_022_src2_endofpacket),                                      //          .endofpacket
		.sink21_ready         (rsp_demux_023_src2_ready),                                            //    sink21.ready
		.sink21_valid         (rsp_demux_023_src2_valid),                                            //          .valid
		.sink21_channel       (rsp_demux_023_src2_channel),                                          //          .channel
		.sink21_data          (rsp_demux_023_src2_data),                                             //          .data
		.sink21_startofpacket (rsp_demux_023_src2_startofpacket),                                    //          .startofpacket
		.sink21_endofpacket   (rsp_demux_023_src2_endofpacket)                                       //          .endofpacket
	);

	procesador_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                          //          .valid
		.src_data            (rsp_mux_003_src_data),                           //          .data
		.src_channel         (rsp_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_001_src1_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_001_src1_valid),                       //          .valid
		.sink0_channel       (rsp_demux_001_src1_channel),                     //          .channel
		.sink0_data          (rsp_demux_001_src1_data),                        //          .data
		.sink0_startofpacket (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src1_endofpacket),                 //          .endofpacket
		.sink1_ready         (rsp_demux_013_src3_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_013_src3_valid),                       //          .valid
		.sink1_channel       (rsp_demux_013_src3_channel),                     //          .channel
		.sink1_data          (rsp_demux_013_src3_data),                        //          .data
		.sink1_startofpacket (rsp_demux_013_src3_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_013_src3_endofpacket)                  //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_0_clk_clk),                                        //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                           //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                 //            in.ready
		.in_valid          (cmd_demux_src3_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                               //              .channel
		.in_data           (cmd_demux_src3_data),                                  //              .data
		.out_ready         (crosser_out_ready),                                    //           out.ready
		.out_valid         (crosser_out_valid),                                    //              .valid
		.out_startofpacket (crosser_out_startofpacket),                            //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                              //              .endofpacket
		.out_channel       (crosser_out_channel),                                  //              .channel
		.out_data          (crosser_out_data),                                     //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                        //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                           //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                 //            in.ready
		.in_valid          (cmd_demux_src4_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                               //              .channel
		.in_data           (cmd_demux_src4_data),                                  //              .data
		.out_ready         (crosser_001_out_ready),                                //           out.ready
		.out_valid         (crosser_001_out_valid),                                //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_001_out_channel),                              //              .channel
		.out_data          (crosser_001_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_0_clk_clk),                                        //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                           //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                 //            in.ready
		.in_valid          (cmd_demux_src5_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                               //              .channel
		.in_data           (cmd_demux_src5_data),                                  //              .data
		.out_ready         (crosser_002_out_ready),                                //           out.ready
		.out_valid         (crosser_002_out_valid),                                //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_002_out_channel),                              //              .channel
		.out_data          (crosser_002_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_0_clk_clk),                                        //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                           //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                 //            in.ready
		.in_valid          (cmd_demux_src6_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                               //              .channel
		.in_data           (cmd_demux_src6_data),                                  //              .data
		.out_ready         (crosser_003_out_ready),                                //           out.ready
		.out_valid         (crosser_003_out_valid),                                //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_003_out_channel),                              //              .channel
		.out_data          (crosser_003_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_0_clk_clk),                                        //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                           //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src7_ready),                                 //            in.ready
		.in_valid          (cmd_demux_src7_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_src7_channel),                               //              .channel
		.in_data           (cmd_demux_src7_data),                                  //              .data
		.out_ready         (crosser_004_out_ready),                                //           out.ready
		.out_valid         (crosser_004_out_valid),                                //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_004_out_channel),                              //              .channel
		.out_data          (crosser_004_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_0_clk_clk),                                        //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                           //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src8_ready),                                 //            in.ready
		.in_valid          (cmd_demux_src8_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_src8_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src8_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_src8_channel),                               //              .channel
		.in_data           (cmd_demux_src8_data),                                  //              .data
		.out_ready         (crosser_005_out_ready),                                //           out.ready
		.out_valid         (crosser_005_out_valid),                                //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_005_out_channel),                              //              .channel
		.out_data          (crosser_005_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_0_clk_clk),                                  //        in_clk.clk
		.in_reset          (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                     //       out_clk.clk
		.out_reset         (reset_reset_reset_bridge_in_reset_reset),        // out_clk_reset.reset
		.in_ready          (cmd_demux_src15_ready),                          //            in.ready
		.in_valid          (cmd_demux_src15_valid),                          //              .valid
		.in_startofpacket  (cmd_demux_src15_startofpacket),                  //              .startofpacket
		.in_endofpacket    (cmd_demux_src15_endofpacket),                    //              .endofpacket
		.in_channel        (cmd_demux_src15_channel),                        //              .channel
		.in_data           (cmd_demux_src15_data),                           //              .data
		.out_ready         (crosser_006_out_ready),                          //           out.ready
		.out_valid         (crosser_006_out_valid),                          //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_006_out_channel),                        //              .channel
		.out_data          (crosser_006_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src1_data),                                             //              .data
		.out_ready         (crosser_007_out_ready),                                               //           out.ready
		.out_valid         (crosser_007_out_valid),                                               //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                             //              .channel
		.out_data          (crosser_007_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src2_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src2_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src2_data),                                             //              .data
		.out_ready         (crosser_008_out_ready),                                               //           out.ready
		.out_valid         (crosser_008_out_valid),                                               //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                             //              .channel
		.out_data          (crosser_008_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src3_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src3_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src3_data),                                             //              .data
		.out_ready         (crosser_009_out_ready),                                               //           out.ready
		.out_valid         (crosser_009_out_valid),                                               //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                             //              .channel
		.out_data          (crosser_009_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src4_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src4_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src4_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src4_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src4_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src4_data),                                             //              .data
		.out_ready         (crosser_010_out_ready),                                               //           out.ready
		.out_valid         (crosser_010_out_valid),                                               //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                             //              .channel
		.out_data          (crosser_010_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src5_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src5_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src5_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src5_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src5_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src5_data),                                             //              .data
		.out_ready         (crosser_011_out_ready),                                               //           out.ready
		.out_valid         (crosser_011_out_valid),                                               //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                             //              .channel
		.out_data          (crosser_011_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src6_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src6_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src6_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src6_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src6_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src6_data),                                             //              .data
		.out_ready         (crosser_012_out_ready),                                               //           out.ready
		.out_valid         (crosser_012_out_valid),                                               //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_012_out_channel),                                             //              .channel
		.out_data          (crosser_012_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (reset_reset_reset_bridge_in_reset_reset),                             // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src13_ready),                                           //            in.ready
		.in_valid          (cmd_demux_001_src13_valid),                                           //              .valid
		.in_startofpacket  (cmd_demux_001_src13_startofpacket),                                   //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src13_endofpacket),                                     //              .endofpacket
		.in_channel        (cmd_demux_001_src13_channel),                                         //              .channel
		.in_data           (cmd_demux_001_src13_data),                                            //              .data
		.out_ready         (crosser_013_out_ready),                                               //           out.ready
		.out_valid         (crosser_013_out_valid),                                               //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_013_out_channel),                                             //              .channel
		.out_data          (crosser_013_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src1_ready),                                            //            in.ready
		.in_valid          (cmd_demux_002_src1_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_002_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_002_src1_channel),                                          //              .channel
		.in_data           (cmd_demux_002_src1_data),                                             //              .data
		.out_ready         (crosser_014_out_ready),                                               //           out.ready
		.out_valid         (crosser_014_out_valid),                                               //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_014_out_channel),                                             //              .channel
		.out_data          (crosser_014_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src2_ready),                                            //            in.ready
		.in_valid          (cmd_demux_002_src2_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_002_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_002_src2_channel),                                          //              .channel
		.in_data           (cmd_demux_002_src2_data),                                             //              .data
		.out_ready         (crosser_015_out_ready),                                               //           out.ready
		.out_valid         (crosser_015_out_valid),                                               //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_015_out_channel),                                             //              .channel
		.out_data          (crosser_015_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src3_ready),                                            //            in.ready
		.in_valid          (cmd_demux_002_src3_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_002_src3_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src3_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_002_src3_channel),                                          //              .channel
		.in_data           (cmd_demux_002_src3_data),                                             //              .data
		.out_ready         (crosser_016_out_ready),                                               //           out.ready
		.out_valid         (crosser_016_out_valid),                                               //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_016_out_channel),                                             //              .channel
		.out_data          (crosser_016_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src4_ready),                                            //            in.ready
		.in_valid          (cmd_demux_002_src4_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_002_src4_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src4_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_002_src4_channel),                                          //              .channel
		.in_data           (cmd_demux_002_src4_data),                                             //              .data
		.out_ready         (crosser_017_out_ready),                                               //           out.ready
		.out_valid         (crosser_017_out_valid),                                               //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_017_out_channel),                                             //              .channel
		.out_data          (crosser_017_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src5_ready),                                            //            in.ready
		.in_valid          (cmd_demux_002_src5_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_002_src5_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src5_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_002_src5_channel),                                          //              .channel
		.in_data           (cmd_demux_002_src5_data),                                             //              .data
		.out_ready         (crosser_018_out_ready),                                               //           out.ready
		.out_valid         (crosser_018_out_valid),                                               //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_018_out_channel),                                             //              .channel
		.out_data          (crosser_018_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src6_ready),                                            //            in.ready
		.in_valid          (cmd_demux_002_src6_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_002_src6_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src6_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_002_src6_channel),                                          //              .channel
		.in_data           (cmd_demux_002_src6_data),                                             //              .data
		.out_ready         (crosser_019_out_ready),                                               //           out.ready
		.out_valid         (crosser_019_out_valid),                                               //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_019_out_channel),                                             //              .channel
		.out_data          (crosser_019_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_020 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clock_bridge_0_out_clk_clk),                                          //       out_clk.clk
		.out_reset         (reset_reset_reset_bridge_in_reset_reset),                             // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src13_ready),                                           //            in.ready
		.in_valid          (cmd_demux_002_src13_valid),                                           //              .valid
		.in_startofpacket  (cmd_demux_002_src13_startofpacket),                                   //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src13_endofpacket),                                     //              .endofpacket
		.in_channel        (cmd_demux_002_src13_channel),                                         //              .channel
		.in_data           (cmd_demux_002_src13_data),                                            //              .data
		.out_ready         (crosser_020_out_ready),                                               //           out.ready
		.out_valid         (crosser_020_out_valid),                                               //              .valid
		.out_startofpacket (crosser_020_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_020_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_020_out_channel),                                             //              .channel
		.out_data          (crosser_020_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_021 (
		.in_clk            (clock_bridge_0_out_clk_clk),                           //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                        //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                           //              .channel
		.in_data           (rsp_demux_003_src0_data),                              //              .data
		.out_ready         (crosser_021_out_ready),                                //           out.ready
		.out_valid         (crosser_021_out_valid),                                //              .valid
		.out_startofpacket (crosser_021_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_021_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_021_out_channel),                              //              .channel
		.out_data          (crosser_021_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_022 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_003_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_003_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_003_src1_data),                                             //              .data
		.out_ready         (crosser_022_out_ready),                                               //           out.ready
		.out_valid         (crosser_022_out_valid),                                               //              .valid
		.out_startofpacket (crosser_022_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_022_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_022_out_channel),                                             //              .channel
		.out_data          (crosser_022_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_023 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src2_ready),                                            //            in.ready
		.in_valid          (rsp_demux_003_src2_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_003_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_003_src2_channel),                                          //              .channel
		.in_data           (rsp_demux_003_src2_data),                                             //              .data
		.out_ready         (crosser_023_out_ready),                                               //           out.ready
		.out_valid         (crosser_023_out_valid),                                               //              .valid
		.out_startofpacket (crosser_023_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_023_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_023_out_channel),                                             //              .channel
		.out_data          (crosser_023_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_024 (
		.in_clk            (clock_bridge_0_out_clk_clk),                           //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                        //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                           //              .channel
		.in_data           (rsp_demux_004_src0_data),                              //              .data
		.out_ready         (crosser_024_out_ready),                                //           out.ready
		.out_valid         (crosser_024_out_valid),                                //              .valid
		.out_startofpacket (crosser_024_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_024_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_024_out_channel),                              //              .channel
		.out_data          (crosser_024_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_025 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_004_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_004_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_004_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_004_src1_data),                                             //              .data
		.out_ready         (crosser_025_out_ready),                                               //           out.ready
		.out_valid         (crosser_025_out_valid),                                               //              .valid
		.out_startofpacket (crosser_025_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_025_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_025_out_channel),                                             //              .channel
		.out_data          (crosser_025_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_026 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src2_ready),                                            //            in.ready
		.in_valid          (rsp_demux_004_src2_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_004_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_004_src2_channel),                                          //              .channel
		.in_data           (rsp_demux_004_src2_data),                                             //              .data
		.out_ready         (crosser_026_out_ready),                                               //           out.ready
		.out_valid         (crosser_026_out_valid),                                               //              .valid
		.out_startofpacket (crosser_026_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_026_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_026_out_channel),                                             //              .channel
		.out_data          (crosser_026_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_027 (
		.in_clk            (clock_bridge_0_out_clk_clk),                           //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                        //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                           //              .channel
		.in_data           (rsp_demux_005_src0_data),                              //              .data
		.out_ready         (crosser_027_out_ready),                                //           out.ready
		.out_valid         (crosser_027_out_valid),                                //              .valid
		.out_startofpacket (crosser_027_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_027_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_027_out_channel),                              //              .channel
		.out_data          (crosser_027_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_028 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_005_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_005_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_005_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_005_src1_data),                                             //              .data
		.out_ready         (crosser_028_out_ready),                                               //           out.ready
		.out_valid         (crosser_028_out_valid),                                               //              .valid
		.out_startofpacket (crosser_028_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_028_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_028_out_channel),                                             //              .channel
		.out_data          (crosser_028_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_029 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src2_ready),                                            //            in.ready
		.in_valid          (rsp_demux_005_src2_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_005_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_005_src2_channel),                                          //              .channel
		.in_data           (rsp_demux_005_src2_data),                                             //              .data
		.out_ready         (crosser_029_out_ready),                                               //           out.ready
		.out_valid         (crosser_029_out_valid),                                               //              .valid
		.out_startofpacket (crosser_029_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_029_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_029_out_channel),                                             //              .channel
		.out_data          (crosser_029_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_030 (
		.in_clk            (clock_bridge_0_out_clk_clk),                           //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                        //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                           //              .channel
		.in_data           (rsp_demux_006_src0_data),                              //              .data
		.out_ready         (crosser_030_out_ready),                                //           out.ready
		.out_valid         (crosser_030_out_valid),                                //              .valid
		.out_startofpacket (crosser_030_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_030_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_030_out_channel),                              //              .channel
		.out_data          (crosser_030_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_031 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_006_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_006_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_006_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_006_src1_data),                                             //              .data
		.out_ready         (crosser_031_out_ready),                                               //           out.ready
		.out_valid         (crosser_031_out_valid),                                               //              .valid
		.out_startofpacket (crosser_031_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_031_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_031_out_channel),                                             //              .channel
		.out_data          (crosser_031_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_032 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src2_ready),                                            //            in.ready
		.in_valid          (rsp_demux_006_src2_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_006_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_006_src2_channel),                                          //              .channel
		.in_data           (rsp_demux_006_src2_data),                                             //              .data
		.out_ready         (crosser_032_out_ready),                                               //           out.ready
		.out_valid         (crosser_032_out_valid),                                               //              .valid
		.out_startofpacket (crosser_032_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_032_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_032_out_channel),                                             //              .channel
		.out_data          (crosser_032_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_033 (
		.in_clk            (clock_bridge_0_out_clk_clk),                           //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                        //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                           //              .channel
		.in_data           (rsp_demux_007_src0_data),                              //              .data
		.out_ready         (crosser_033_out_ready),                                //           out.ready
		.out_valid         (crosser_033_out_valid),                                //              .valid
		.out_startofpacket (crosser_033_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_033_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_033_out_channel),                              //              .channel
		.out_data          (crosser_033_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_034 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_007_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_007_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_007_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_007_src1_data),                                             //              .data
		.out_ready         (crosser_034_out_ready),                                               //           out.ready
		.out_valid         (crosser_034_out_valid),                                               //              .valid
		.out_startofpacket (crosser_034_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_034_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_034_out_channel),                                             //              .channel
		.out_data          (crosser_034_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_035 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src2_ready),                                            //            in.ready
		.in_valid          (rsp_demux_007_src2_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_007_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_007_src2_channel),                                          //              .channel
		.in_data           (rsp_demux_007_src2_data),                                             //              .data
		.out_ready         (crosser_035_out_ready),                                               //           out.ready
		.out_valid         (crosser_035_out_valid),                                               //              .valid
		.out_startofpacket (crosser_035_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_035_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_035_out_channel),                                             //              .channel
		.out_data          (crosser_035_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_036 (
		.in_clk            (clock_bridge_0_out_clk_clk),                           //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                        //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_008_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_008_src0_channel),                           //              .channel
		.in_data           (rsp_demux_008_src0_data),                              //              .data
		.out_ready         (crosser_036_out_ready),                                //           out.ready
		.out_valid         (crosser_036_out_valid),                                //              .valid
		.out_startofpacket (crosser_036_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_036_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_036_out_channel),                              //              .channel
		.out_data          (crosser_036_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_037 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_008_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_008_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_008_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_008_src1_data),                                             //              .data
		.out_ready         (crosser_037_out_ready),                                               //           out.ready
		.out_valid         (crosser_037_out_valid),                                               //              .valid
		.out_startofpacket (crosser_037_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_037_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_037_out_channel),                                             //              .channel
		.out_data          (crosser_037_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_038 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset),                //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_008_src2_ready),                                            //            in.ready
		.in_valid          (rsp_demux_008_src2_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_008_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_008_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_008_src2_channel),                                          //              .channel
		.in_data           (rsp_demux_008_src2_data),                                             //              .data
		.out_ready         (crosser_038_out_ready),                                               //           out.ready
		.out_valid         (crosser_038_out_valid),                                               //              .valid
		.out_startofpacket (crosser_038_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_038_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_038_out_channel),                                             //              .channel
		.out_data          (crosser_038_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_039 (
		.in_clk            (clock_bridge_0_out_clk_clk),                     //        in_clk.clk
		.in_reset          (reset_reset_reset_bridge_in_reset_reset),        //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                  //       out_clk.clk
		.out_reset         (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_015_src0_ready),                       //            in.ready
		.in_valid          (rsp_demux_015_src0_valid),                       //              .valid
		.in_startofpacket  (rsp_demux_015_src0_startofpacket),               //              .startofpacket
		.in_endofpacket    (rsp_demux_015_src0_endofpacket),                 //              .endofpacket
		.in_channel        (rsp_demux_015_src0_channel),                     //              .channel
		.in_data           (rsp_demux_015_src0_data),                        //              .data
		.out_ready         (crosser_039_out_ready),                          //           out.ready
		.out_valid         (crosser_039_out_valid),                          //              .valid
		.out_startofpacket (crosser_039_out_startofpacket),                  //              .startofpacket
		.out_endofpacket   (crosser_039_out_endofpacket),                    //              .endofpacket
		.out_channel       (crosser_039_out_channel),                        //              .channel
		.out_data          (crosser_039_out_data),                           //              .data
		.in_empty          (1'b0),                                           //   (terminated)
		.in_error          (1'b0),                                           //   (terminated)
		.out_empty         (),                                               //   (terminated)
		.out_error         ()                                                //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_040 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (reset_reset_reset_bridge_in_reset_reset),                             //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_015_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_015_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_015_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_015_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_015_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_015_src1_data),                                             //              .data
		.out_ready         (crosser_040_out_ready),                                               //           out.ready
		.out_valid         (crosser_040_out_valid),                                               //              .valid
		.out_startofpacket (crosser_040_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_040_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_040_out_channel),                                             //              .channel
		.out_data          (crosser_040_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (120),
		.BITS_PER_SYMBOL     (120),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (24),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_041 (
		.in_clk            (clock_bridge_0_out_clk_clk),                                          //        in_clk.clk
		.in_reset          (reset_reset_reset_bridge_in_reset_reset),                             //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_015_src2_ready),                                            //            in.ready
		.in_valid          (rsp_demux_015_src2_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_015_src2_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_015_src2_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_015_src2_channel),                                          //              .channel
		.in_data           (rsp_demux_015_src2_data),                                             //              .data
		.out_ready         (crosser_041_out_ready),                                               //           out.ready
		.out_valid         (crosser_041_out_valid),                                               //              .valid
		.out_startofpacket (crosser_041_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_041_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_041_out_channel),                                             //              .channel
		.out_data          (crosser_041_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                        //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pll_reconfigurar_mgmt_avalon_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                              //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clock_bridge_0_out_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo0_64_bit_up_out_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (fifo0_64_bit_up_out_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (fifo0_64_bit_up_out_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                     //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clock_bridge_0_out_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo0_64_bit_down_out_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (fifo0_64_bit_down_out_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (fifo0_64_bit_down_out_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                     //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clock_bridge_0_out_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo1_64_bit_up_out_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (fifo1_64_bit_up_out_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (fifo1_64_bit_up_out_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                     //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clock_bridge_0_out_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo1_64_bit_down_out_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (fifo1_64_bit_down_out_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (fifo1_64_bit_down_out_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                     //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clock_bridge_0_out_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo0_32_bit_out_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (fifo0_32_bit_out_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (fifo0_32_bit_out_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                     //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clock_bridge_0_out_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (fifo0_64_bit_up_reset_in_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fifo1_32_bit_out_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (fifo1_32_bit_out_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (fifo1_32_bit_out_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                     //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (parameters_s0_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (parameters_s0_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (parameters_s0_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)              //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (parameters_1_s0_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (parameters_1_s0_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (parameters_1_s0_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)              //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (parameters_2_s0_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (parameters_2_s0_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (parameters_2_s0_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)              //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (parameters_3_s0_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (parameters_3_s0_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (parameters_3_s0_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)              //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (program_memory_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (program_memory_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (program_memory_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)              //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (divisor_clock_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (divisor_clock_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (divisor_clock_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)              //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clock_bridge_0_out_clk_clk),              // in_clk_0.clk
		.in_rst_0_reset (reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (reset_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (reset_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (reset_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)        //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (enable_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (enable_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (enable_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)              //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (finalizacion_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (finalizacion_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (finalizacion_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)              //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (result0_64_bit_up_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (result0_64_bit_up_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (result0_64_bit_up_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (result0_64_bit_down_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (result0_64_bit_down_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (result0_64_bit_down_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                  //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_0_clk_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (result1_64_bit_up_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (result1_64_bit_up_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (result1_64_bit_up_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)                //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (result1_64_bit_down_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (result1_64_bit_down_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (result1_64_bit_down_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                  //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (result0_32_bit_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (result0_32_bit_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (result0_32_bit_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)              //         .error
	);

	procesador_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (result1_32_bit_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (result1_32_bit_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (result1_32_bit_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)              //         .error
	);

endmodule
